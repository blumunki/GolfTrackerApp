@using MudBlazor
@using GolfTrackerApp.Mobile.Services
@using GolfTrackerApp.Mobile.Components.Pages
@using GolfTrackerApp.Mobile.Components.Shared
@using GolfTrackerApp.Mobile.Components.Navigation
@inject AuthenticationStateService AuthState
@inject NavigationManager Navigation

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div style="background: white; min-height: 100vh;">
    @if (isCheckingAuth)
    {
        <div class="d-flex justify-center align-center" style="min-height: 100vh;">
            <div class="text-center">
                <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
                <MudText Typo="Typo.h6" Class="mt-4">Loading...</MudText>
            </div>
        </div>
    }
    else if (!AuthState.IsAuthenticated)
    {
        <!-- Show login page directly (no layout) -->
        <LoginPage />
    }
    else
    {
        <!-- Show authenticated app with simple page switcher -->
        <MudLayout Style="min-height: 100vh;">
            <MudMainContent Style="padding-bottom: 80px;">
                @switch (currentPage)
                {
                    case "home":
                        <Home />
                        break;
                    case "rounds":
                        <RoundsPage />
                        break;
                    case "players":
                        <PlayersPage />
                        break;
                    case "golfclubs":
                        <GolfClubsPage />
                        break;
                    case var page when page.StartsWith("players/") && page.Contains("/report"):
                        {
                            // Extract player ID from route like "players/123/report"
                            var parts = currentPage.Split('/');
                            var playerIdStr = parts.Length > 1 ? parts[1] : "";
                            <PlayerReportPage PlayerId="@playerIdStr" />
                        }
                        break;
                    case "profile":
                        <div class="pa-4">
                            <MudText Typo="Typo.h5" Class="mb-4">Profile & Settings</MudText>
                            
                            <MudCard Elevation="2" Class="mb-4">
                                <MudCardContent>
                                    <MudStack Spacing="3">
                                        <div>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                                                Account Management
                                            </MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Tertiary">
                                                Use the stats icon in the navigation bar to view your performance report.
                                            </MudText>
                                        </div>
                                        
                                        <MudButton Variant="Variant.Filled" 
                                                  Color="Color.Error"
                                                  StartIcon="@Icons.Material.Filled.Logout"
                                                  OnClick="@HandleLogout"
                                                  FullWidth="true">
                                            Sign Out
                                        </MudButton>
                                    </MudStack>
                                </MudCardContent>
                            </MudCard>
                        </div>
                        break;
                    case "player-report":
                        <PlayerReportPage PlayerId="me" />
                        break;
                    default:
                        <Home />
                        break;
                }
            </MudMainContent>
            
            <!-- Bottom Navigation - DIRECTLY in App.razor -->
            <div class="bottom-navigation">
                <MudPaper Elevation="8" Style="position: fixed; bottom: 0; left: 0; right: 0; z-index: 1300; border-radius: 20px 20px 0 0; background: rgba(255, 255, 255, 0.95);">
                    <div class="d-flex justify-space-evenly align-center pa-2" Style="width: 100%; height: 60px;">
                        <MudIconButton Icon="@Icons.Material.Filled.Home" 
                                      Color="@(currentPage == "home" ? Color.Primary : Color.Secondary)"
                                      Size="Size.Medium"
                                      OnClick="@(() => NavigateToPage("home"))" />
                        
                        <MudIconButton Icon="@Icons.Material.Filled.SportsGolf" 
                                      Color="@(currentPage == "rounds" ? Color.Primary : Color.Secondary)"
                                      Size="Size.Medium"
                                      OnClick="@(() => NavigateToPage("rounds"))" />
                        
                        <MudIconButton Icon="@Icons.Material.Filled.Assessment" 
                                      Color="@(currentPage == "player-report" ? Color.Primary : Color.Secondary)"
                                      Size="Size.Medium"
                                      title="Your Stats"
                                      OnClick="@(() => NavigateToPage("player-report"))" />
                        
                        <MudIconButton Icon="@Icons.Material.Filled.People" 
                                      Color="@(currentPage == "players" ? Color.Primary : Color.Secondary)"
                                      Size="Size.Medium"
                                      OnClick="@(() => NavigateToPage("players"))" />
                        
                        <MudIconButton Icon="@Icons.Material.Filled.GolfCourse" 
                                      Color="@(currentPage == "golfclubs" ? Color.Primary : Color.Secondary)"
                                      Size="Size.Medium"
                                      OnClick="@(() => NavigateToPage("golfclubs"))" />
                        
                        <MudIconButton Icon="@Icons.Material.Filled.Person" 
                                      Color="@(currentPage == "profile" ? Color.Primary : Color.Secondary)"
                                      Size="Size.Medium"
                                      OnClick="@(() => NavigateToPage("profile"))" />
                    </div>
                </MudPaper>
            </div>
        </MudLayout>
    }
</div>

@code {
    private bool isCheckingAuth = true;
    private string currentPage = "home";
    private string? currentUserId = null;
    
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("[APP] *** SIMPLE PAGE SWITCHER - NO ROUTER ***");
        
        // Check authentication state
        await AuthState.LoadTokenFromSecureStorageAsync();
        
        Console.WriteLine($"[APP] Is authenticated: {AuthState.IsAuthenticated}");
        
        // Listen for authentication changes
        AuthState.AuthenticationStateChanged += OnAuthenticationStateChanged;
        
        // Listen for URL changes
        Navigation.LocationChanged += OnLocationChanged;
        
        // Get initial page from URL
        UpdateCurrentPageFromUrl();
        
        isCheckingAuth = false;
        StateHasChanged();
    }
    
    private void UpdateCurrentPageFromUrl()
    {
        var uri = Navigation.ToBaseRelativePath(Navigation.Uri).ToLower().Trim('/');
        
        // Handle query strings by removing them
        if (uri.Contains('?'))
        {
            uri = uri.Substring(0, uri.IndexOf('?'));
        }
        
        currentPage = string.IsNullOrEmpty(uri) ? "home" : uri;
        Console.WriteLine($"[APP] Current page from URL: {currentPage}");
    }
    
    private void NavigateToPage(string page)
    {
        Console.WriteLine($"[APP] *** Button clicked - Navigating to: {page} ***");
        currentPage = page;
        Navigation.NavigateTo($"/{page}", false);
        StateHasChanged();
    }
    
    private async Task HandleLogout()
    {
        Console.WriteLine("[APP] Logout clicked");
        await AuthState.LogoutAsync();
        Navigation.NavigateTo("/", forceLoad: true);
    }
    
    private void OnAuthenticationStateChanged()
    {
        Console.WriteLine("[APP] Authentication state changed");
        StateHasChanged();
    }
    
    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        Console.WriteLine($"[APP] Location changed: {e.Location}");
        UpdateCurrentPageFromUrl();
        StateHasChanged();
    }
    
    public void Dispose()
    {
        AuthState.AuthenticationStateChanged -= OnAuthenticationStateChanged;
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
