@using GolfTrackerApp.Mobile.Components.Pages
@using GolfTrackerApp.Mobile.Services.Api

<div class="mobile-app">
    <!-- Header -->
    <MudAppBar Color="Color.Primary" Fixed="true" Style="background: linear-gradient(135deg, #2c5530 0%, #3d7c3f 100%);">
        <MudText Typo="Typo.h5" Style="font-weight: 600;">
            üèåÔ∏è Golf Tracker Mobile
        </MudText>
    </MudAppBar>
    
    <!-- Content Area -->
    <MudContainer MaxWidth="MaxWidth.False" Style="margin-top: 80px; margin-bottom: 80px; padding: 16px; min-height: calc(100vh - 160px);">
        @switch (CurrentPage.ToLower())
        {
            case "home":
            case "":
                <!-- Real Mobile Dashboard -->
                <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
                    üè† Dashboard
                </MudText>
                
                @if (loadingDashboard)
                {
                    <MudProgressCircular Size="Size.Medium" Indeterminate="true" Class="ma-4" />
                }
                else
                {
                    <!-- Key Stats Cards -->
                    <MudGrid Class="mb-4">
                        <MudItem xs="6">
                            <MudCard Class="text-center pa-2">
                                <MudCardContent>
                                    <MudIcon Icon="Icons.Material.Filled.Timeline" Color="Color.Primary" Size="Size.Large" />
                                    <MudText Typo="Typo.h5" Color="Color.Primary">@(dashboardStats?.TotalRounds ?? 0)</MudText>
                                    <MudText Typo="Typo.caption">Total Rounds</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        
                        <MudItem xs="6">
                            <MudCard Class="text-center pa-2">
                                <MudCardContent>
                                    <MudIcon Icon="Icons.Material.Filled.TrendingDown" Color="Color.Success" Size="Size.Large" />
                                    <MudText Typo="Typo.h5" Color="Color.Success">@((dashboardStats?.AverageScore ?? 0).ToString("F1"))</MudText>
                                    <MudText Typo="Typo.caption">Avg Score</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        
                        <MudItem xs="6">
                            <MudCard Class="text-center pa-2">
                                <MudCardContent>
                                    <MudIcon Icon="Icons.Material.Filled.Star" Color="Color.Warning" Size="Size.Large" />
                                    <MudText Typo="Typo.h5" Color="Color.Warning">@(dashboardStats?.BestScore ?? 0)</MudText>
                                    <MudText Typo="Typo.caption">Best Score</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        
                        <MudItem xs="6">
                            <MudCard Class="text-center pa-2">
                                <MudCardContent>
                                    <MudIcon Icon="Icons.Material.Filled.GolfCourse" Color="Color.Info" Size="Size.Large" />
                                    <MudText Typo="Typo.h5" Color="Color.Info">@(dashboardStats?.TotalPlayingPartners ?? 0)</MudText>
                                    <MudText Typo="Typo.caption">Partners</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>

                    <!-- Recent Activity -->
                    <MudCard Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Recent Activity</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (recentActivity?.Any() == true)
                            {
                                @foreach (var activity in recentActivity.Take(3))
                                {
                                    <div class="d-flex align-center justify-space-between mb-2">
                                        <div>
                                            <MudText Typo="Typo.body2">@activity</MudText>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Color="Color.Secondary">No recent activity.</MudText>
                            }
                        </MudCardContent>
                    </MudCard>

                    <!-- Quick Actions -->
                    <MudText Typo="Typo.h6" GutterBottom="true">Quick Actions</MudText>
                    <MudGrid>
                        <MudItem xs="4">
                            <MudButton Variant="Variant.Outlined" 
                                      Color="Color.Primary" 
                                      FullWidth="true"
                                      StartIcon="@Icons.Material.Filled.Add"
                                      OnClick="@(() => OnNavigate.InvokeAsync("rounds"))">
                                New Round
                            </MudButton>
                        </MudItem>
                        
                        <MudItem xs="4">
                            <MudButton Variant="Variant.Outlined" 
                                      Color="Color.Secondary" 
                                      FullWidth="true"
                                      StartIcon="@Icons.Material.Filled.GolfCourse"
                                      OnClick="@(() => OnNavigate.InvokeAsync("golf-clubs"))">
                                Find Clubs
                            </MudButton>
                        </MudItem>
                        
                        <MudItem xs="4">
                            <MudButton Variant="Variant.Outlined" 
                                      Color="Color.Info" 
                                      FullWidth="true"
                                      StartIcon="@Icons.Material.Filled.Analytics"
                                      OnClick="@(() => OnNavigate.InvokeAsync("dashboard"))">
                                View Stats
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                }
                break;
                
            case "golf-clubs":
                <GolfClubsPage />
                break;
                
            case "players":
                <PlayersPage />
                break;
                
            case "rounds":
                <RoundsPage />
                break;
                
            case "dashboard":
                <DashboardPage />
                break;
                
            case "test-api":
                <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
                    üîå API Test
                </MudText>
                
                <MudCard Class="mb-4">
                    <MudCardContent>
                        <MudText Typo="Typo.h6" GutterBottom="true">API Connection Test</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Testing connection to Golf Tracker Web API at https://localhost:7295
                        </MudText>
                        
                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Success" 
                                  StartIcon="@Icons.Material.Filled.PlayArrow"
                                  OnClick="@TestApiConnection"
                                  Disabled="@isTestingApi"
                                  Class="mt-3">
                            @(isTestingApi ? "Testing..." : "Run API Test")
                        </MudButton>
                        
                        @if (!string.IsNullOrEmpty(apiTestResult))
                        {
                            <MudAlert Severity="@(apiTestSuccess ? Severity.Success : Severity.Error)" Class="mt-3">
                                @apiTestResult
                            </MudAlert>
                        }
                    </MudCardContent>
                </MudCard>
                
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Secondary" 
                          StartIcon="@Icons.Material.Filled.ArrowBack"
                          OnClick="@(() => OnNavigate.InvokeAsync("home"))">
                    Back to Home
                </MudButton>
                break;
                
            default:
                <div class="text-center mt-8">
                    <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Secondary" />
                    <MudText Typo="Typo.h4" Class="mt-4">Page Not Found</MudText>
                    <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                        The page '@CurrentPage' doesn't exist.
                    </MudText>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Home"
                              OnClick="@(() => OnNavigate.InvokeAsync("home"))">
                        Go Home
                    </MudButton>
                </div>
                break;
        }
    </MudContainer>
    
    <!-- Bottom Navigation -->
    <MudPaper Square="true" Style="position: fixed; bottom: 0; left: 0; right: 0; z-index: 1000;" Elevation="3">
        <div class="d-flex justify-center pa-1" style="overflow-x: auto;">
            <MudButton Color="@(CurrentPage == "home" ? Color.Primary : Color.Default)"
                      Variant="@(CurrentPage == "home" ? Variant.Filled : Variant.Text)"
                      StartIcon="@Icons.Material.Filled.Home"
                      OnClick="@(() => OnNavigate.InvokeAsync("home"))"
                      Size="Size.Small"
                      Class="mx-1">
                Home
            </MudButton>
            
            <MudButton Color="@(CurrentPage == "golf-clubs" ? Color.Primary : Color.Default)"
                      Variant="@(CurrentPage == "golf-clubs" ? Variant.Filled : Variant.Text)"
                      StartIcon="@Icons.Material.Filled.GolfCourse"
                      OnClick="@(() => OnNavigate.InvokeAsync("golf-clubs"))"
                      Size="Size.Small"
                      Class="mx-1">
                Clubs
            </MudButton>
            
            <MudButton Color="@(CurrentPage == "players" ? Color.Primary : Color.Default)"
                      Variant="@(CurrentPage == "players" ? Variant.Filled : Variant.Text)"
                      StartIcon="@Icons.Material.Filled.People"
                      OnClick="@(() => OnNavigate.InvokeAsync("players"))"
                      Size="Size.Small"
                      Class="mx-1">
                Players
            </MudButton>
            
            <MudButton Color="@(CurrentPage == "rounds" ? Color.Primary : Color.Default)"
                      Variant="@(CurrentPage == "rounds" ? Variant.Filled : Variant.Text)"
                      StartIcon="@Icons.Material.Filled.Timeline"
                      OnClick="@(() => OnNavigate.InvokeAsync("rounds"))"
                      Size="Size.Small"
                      Class="mx-1">
                Rounds
            </MudButton>
            
            <MudButton Color="@(CurrentPage == "dashboard" ? Color.Primary : Color.Default)"
                      Variant="@(CurrentPage == "dashboard" ? Variant.Filled : Variant.Text)"
                      StartIcon="@Icons.Material.Filled.Analytics"
                      OnClick="@(() => OnNavigate.InvokeAsync("dashboard"))"
                      Size="Size.Small"
                      Class="mx-1">
                Stats
            </MudButton>
        </div>
    </MudPaper>
</div>

@code {
    [Parameter] public string CurrentPage { get; set; } = "home";
    [Parameter] public EventCallback<string> OnNavigate { get; set; }
    
    [Inject] private HttpClient HttpClient { get; set; } = default!;
    [Inject] private IDashboardApiService DashboardApiService { get; set; } = default!;
    
    private bool isTestingApi = false;
    private string apiTestResult = "";
    private bool apiTestSuccess = false;
    
    // Dashboard data
    private bool loadingDashboard = true;
    private Services.Api.DashboardStats? dashboardStats;
    private List<string> recentActivity = new();
    
    protected override async Task OnInitializedAsync()
    {
        if (CurrentPage == "home" || string.IsNullOrEmpty(CurrentPage))
        {
            await LoadDashboardData();
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if ((CurrentPage == "home" || string.IsNullOrEmpty(CurrentPage)) && loadingDashboard)
        {
            await LoadDashboardData();
        }
    }
    
    private async Task LoadDashboardData()
    {
        try
        {
            loadingDashboard = true;
            StateHasChanged();
            
            // Load real dashboard data from API
            dashboardStats = await DashboardApiService.GetDashboardStatsAsync();
            
            var recentActivityData = await DashboardApiService.GetRecentActivityAsync(3);
            recentActivity = recentActivityData.Select(activity => 
                $"{activity.Type}: {activity.Description} at {activity.Location}").ToList();
                
            if (!recentActivity.Any())
            {
                recentActivity = new List<string>
                {
                    "Welcome to Golf Tracker!",
                    "Start by recording your first round",
                    "Explore golf clubs in your area"
                };
            }
        }
        catch (Exception ex)
        {
            // Handle error - could show error message to user
            dashboardStats = null;
            recentActivity = new List<string> { $"Unable to load dashboard data: {ex.Message}" };
        }
        finally
        {
            loadingDashboard = false;
            StateHasChanged();
        }
    }
    
    private async Task TestApiConnection()
    {
        isTestingApi = true;
        apiTestResult = "";
        StateHasChanged();
        
        try
        {
            var response = await HttpClient.GetAsync("https://localhost:7295/api/golfclubs");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                apiTestResult = $"‚úÖ API connection successful! Received {content.Length} characters of data.";
                apiTestSuccess = true;
            }
            else
            {
                apiTestResult = $"‚ùå API returned status: {response.StatusCode}";
                apiTestSuccess = false;
            }
        }
        catch (Exception ex)
        {
            apiTestResult = $"‚ùå Connection failed: {ex.Message}";
            apiTestSuccess = false;
        }
        finally
        {
            isTestingApi = false;
            StateHasChanged();
        }
    }
    
}
