@using GolfTrackerApp.Mobile.Services
@using GolfTrackerApp.Mobile.Services.Api
@using GolfTrackerApp.Mobile.Models
@inject NavigationManager Navigation
@inject AuthenticationStateService AuthService
@inject IPlayerApiService PlayerApiService

<!-- Bottom Navigation -->
<div class="bottom-navigation">
    <MudPaper Elevation="8" Class="bottom-nav-paper" Style="position: fixed; bottom: 0; left: 0; right: 0; z-index: 1300; border-radius: 20px 20px 0 0;">
        <div class="d-flex justify-space-evenly align-center pa-2" Style="width: 100%; height: 60px;">
            <MudIconButton Icon="@Icons.Material.Filled.Home" 
                          Color="@GetNavColor("home")"
                          Size="Size.Large"
                          OnClick="@(() => Navigation.NavigateTo("/"))" />
            
            <MudIconButton Icon="@Icons.Material.Filled.SportsGolf" 
                          Color="@GetNavColor("rounds")"
                          Size="Size.Large"
                          OnClick="@(() => Navigation.NavigateTo("/rounds"))" />
            
            <MudIconButton Icon="@Icons.Material.Filled.BarChart" 
                          Color="@GetNavColor("player-report")"
                          Size="Size.Large"
                          OnClick="@OnStatsClick" />
            
            <MudIconButton Icon="@Icons.Material.Filled.GolfCourse" 
                          Color="@GetNavColor("golfclubs")"
                          Size="Size.Large"
                          OnClick="@(() => Navigation.NavigateTo("/golfclubs"))" />
            
            <MudIconButton Icon="@Icons.Material.Filled.Person" 
                          Color="@GetNavColor("profile")"
                          Size="Size.Large"
                          OnClick="@(() => Navigation.NavigateTo("/profile"))" />
        </div>
    </MudPaper>
</div>

<style>
    .bottom-navigation {
        height: 80px;
    }
    
    .bottom-nav-paper {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
    }
    
    .mud-theme-dark .bottom-nav-paper {
        background: rgba(30, 30, 30, 0.95);
    }
</style>

@code {
    private void OnStatsClick()
    {
        Console.WriteLine($"[BOTTOM_NAV] Stats icon clicked!");
        
        var playerId = AuthService.PlayerId;
        Console.WriteLine($"[BOTTOM_NAV] AuthService.PlayerId = {playerId}");
        
        if (playerId.HasValue)
        {
            var url = $"/players/{playerId.Value}/report";
            Console.WriteLine($"[BOTTOM_NAV] Navigating to: {url}");
            Navigation.NavigateTo(url);
        }
        else
        {
            Console.WriteLine($"[BOTTOM_NAV] No player ID, navigating to /players");
            Navigation.NavigateTo("/players");
        }
    }
    
    private string GetMyStatsUrl()
    {
        // Get player ID directly from AuthService - it's stored globally at login
        var playerId = AuthService.PlayerId;
        
        if (playerId.HasValue)
        {
            Console.WriteLine($"[NAV] GetMyStatsUrl: Player ID={playerId.Value}, returning /players/{playerId.Value}/report");
            return $"/players/{playerId.Value}/report";
        }
        
        Console.WriteLine($"[NAV] GetMyStatsUrl: No player ID in AuthService, returning /players");
        return "/players"; // Fallback to players list
    }
    
    private Color GetNavColor(string page)
    {
        try
        {
            var currentPage = GetCurrentPageFromUrl();
            return currentPage.Equals(page, StringComparison.OrdinalIgnoreCase) ? Color.Primary : Color.Secondary;
        }
        catch
        {
            return Color.Secondary;
        }
    }
    
    private string GetCurrentPageFromUrl()
    {
        try
        {
            var uri = Navigation.ToBaseRelativePath(Navigation.Uri).ToLower();
            
            if (string.IsNullOrEmpty(uri) || uri == "/" || uri.StartsWith("home"))
                return "home";
            if (uri.StartsWith("rounds"))
                return "rounds";
            if (uri.StartsWith("player-report") || uri.StartsWith("players/"))
                return "player-report";
            if (uri.StartsWith("golfclubs"))
                return "golfclubs";
            if (uri.StartsWith("profile"))
                return "profile";
                
            return "home";
        }
        catch
        {
            return "home";
        }
    }
}