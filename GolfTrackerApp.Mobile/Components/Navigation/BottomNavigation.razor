@using GolfTrackerApp.Mobile.Services
@using GolfTrackerApp.Mobile.Services.Api
@using GolfTrackerApp.Mobile.Models
@inject NavigationManager Navigation
@inject AuthenticationStateService AuthService
@inject IPlayerApiService PlayerApiService

<!-- Bottom Navigation -->
<div class="bottom-navigation">
    <MudPaper Elevation="8" Class="bottom-nav-paper" Style="position: fixed; bottom: 0; left: 0; right: 0; z-index: 1300; border-radius: 20px 20px 0 0;">
        <div class="d-flex justify-space-evenly align-center pa-2" Style="width: 100%; height: 60px;">
            <MudIconButton Icon="@Icons.Material.Filled.Home" 
                          Color="@GetNavColor("home")"
                          Size="Size.Large"
                          OnClick="@(async () => await HandleNavigationAsync("/"))" />
            
            <MudIconButton Icon="@Icons.Material.Filled.SportsGolf" 
                          Color="@GetNavColor("rounds")"
                          Size="Size.Large"
                          OnClick="@(async () => await HandleNavigationAsync("/rounds"))" />
            
            <MudIconButton Icon="@Icons.Material.Filled.BarChart" 
                          Color="@GetNavColor("player-report")"
                          Size="Size.Large"
                          OnClick="@(async () => await NavigateToPlayerReportAsync())" />
            
            <MudIconButton Icon="@Icons.Material.Filled.GolfCourse" 
                          Color="@GetNavColor("golfclubs")"
                          Size="Size.Large"
                          OnClick="@(async () => await HandleNavigationAsync("/golfclubs"))" />
            
            <MudIconButton Icon="@Icons.Material.Filled.Person" 
                          Color="@GetNavColor("profile")"
                          Size="Size.Large"
                          OnClick="@(async () => await HandleNavigationAsync("/profile"))" />
        </div>
    </MudPaper>
</div>

<style>
    .bottom-navigation {
        height: 80px;
    }
    
    .bottom-nav-paper {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
    }
    
    .mud-theme-dark .bottom-nav-paper {
        background: rgba(30, 30, 30, 0.95);
    }
</style>

@code {
    private Color GetNavColor(string page)
    {
        try
        {
            var currentPage = GetCurrentPageFromUrl();
            return currentPage.Equals(page, StringComparison.OrdinalIgnoreCase) ? Color.Primary : Color.Secondary;
        }
        catch
        {
            return Color.Secondary;
        }
    }
    
    private string GetCurrentPageFromUrl()
    {
        try
        {
            var uri = Navigation.ToBaseRelativePath(Navigation.Uri).ToLower();
            
            if (string.IsNullOrEmpty(uri) || uri == "/" || uri.StartsWith("home"))
                return "home";
            if (uri.StartsWith("rounds"))
                return "rounds";
            if (uri.StartsWith("player-report"))
                return "player-report";
            if (uri.StartsWith("golfclubs"))
                return "golfclubs";
            if (uri.StartsWith("profile"))
                return "profile";
                
            return "home";
        }
        catch
        {
            return "home";
        }
    }
    
    private async Task HandleNavigationAsync(string route)
    {
        try
        {
            Console.WriteLine($"[NAV] *** VERSION 2.1 *** ASYNC Button clicked - Navigating to: {route}");
            
            Console.WriteLine($"[NAV] Current NavigationManager.Uri: {Navigation.Uri}");
            
            // Force a small delay to ensure UI updates
            await Task.Delay(50);
            
            // Navigate to the route
            Navigation.NavigateTo(route);
            
            Console.WriteLine($"[NAV] Navigation completed to: {route}");
            
            // Update UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[NAV] Navigation error: {ex.Message}");
            Console.WriteLine($"[NAV] Error stack: {ex.StackTrace}");
        }
    }
    
    private async Task NavigateToPlayerReportAsync()
    {
        try
        {
            Console.WriteLine($"[NAV] ========== STATS ICON CLICKED ==========");
            Console.WriteLine($"[NAV] Auth Status: IsAuthenticated={AuthService.IsAuthenticated}, HasToken={!string.IsNullOrEmpty(AuthService.Token)}");
            Console.WriteLine($"[NAV] Current URI: {Navigation.Uri}");
            
            // Get the user's first player from the API
            // The API returns only players created by current user
            Console.WriteLine($"[NAV] Calling PlayerApiService.GetAllPlayersAsync()...");
            var players = await PlayerApiService.GetAllPlayersAsync();
            
            Console.WriteLine($"[NAV] GetAllPlayersAsync returned: {players?.Count ?? 0} players");
            Console.WriteLine($"[NAV] Current user ID: {AuthService.UserId}");
            
            if (players?.Any() == true)
            {
                // Find the player that matches the current logged-in user
                // Look for a player with ApplicationUserId matching the current user's ID
                var currentUserPlayer = players.FirstOrDefault(p => 
                    !string.IsNullOrEmpty(p.ApplicationUserId) && 
                    !string.IsNullOrEmpty(AuthService.UserId) &&
                    p.ApplicationUserId.Equals(AuthService.UserId, StringComparison.OrdinalIgnoreCase));
                
                // If not found by ApplicationUserId, just use the first player as fallback
                var targetPlayer = currentUserPlayer ?? players.First();
                
                Console.WriteLine($"[NAV] Current user's player: {(currentUserPlayer != null ? "FOUND" : "NOT FOUND, using first")}");
                Console.WriteLine($"[NAV] Target player: ID={targetPlayer.Id}, Name={targetPlayer.FirstName} {targetPlayer.LastName}");
                Console.WriteLine($"[NAV] Navigating to: /players/{targetPlayer.Id}/report");
                
                await Task.Delay(50); // Small delay to ensure state updates
                Navigation.NavigateTo($"/players/{targetPlayer.Id}/report");
                Console.WriteLine($"[NAV] Navigation completed");
                return;
            }
            
            // Fallback: show error
            Console.WriteLine($"[NAV] WARNING: No players found, cannot navigate to stats");
            Console.WriteLine($"[NAV] Falling back to /player-report (will show error)");
            Navigation.NavigateTo("/player-report"); // This will show the "No Player Selected" message
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[NAV] ERROR navigating to player report: {ex.Message}");
            Console.WriteLine($"[NAV] Exception details: {ex}");
            Console.WriteLine($"[NAV] Stack trace: {ex.StackTrace}");
            Navigation.NavigateTo("/player-report");
        }
    }
}