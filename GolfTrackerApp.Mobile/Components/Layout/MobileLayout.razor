@using GolfTrackerApp.Mobile.Services
@inherits LayoutComponentBase
@inject AuthenticationStateService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if (isCheckingAuth)
{
    <!-- Loading state while checking authentication -->
    <MudContainer MaxWidth="MaxWidth.False" Style="height: 100vh; display: flex; align-items: center; justify-content: center;">
        <div class="text-center">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
            <MudText Typo="Typo.body1" Class="mt-3" Color="Color.Secondary">Checking authentication...</MudText>
        </div>
    </MudContainer>
}
else if (isAuthenticated || isOnLoginPage)
{
    <MudLayout Style="min-height: 100vh;">
        <!-- Main content area with padding for bottom nav -->
        <MudMainContent Style="padding-bottom: 80px;">
            @Body
        </MudMainContent>
        
        <!-- Fixed bottom navigation (only show when authenticated and not on login page) -->
        @if (isAuthenticated && !isOnLoginPage)
        {
            <BottomNavigation />
        }
    </MudLayout>
}

@code {
    private bool isCheckingAuth = true;
    private bool isAuthenticated = false;
    private bool isOnLoginPage = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("[LAYOUT] *** MOBILE LAYOUT V2.1 *** Initializing");
        
        // First load stored authentication
        await AuthService.LoadTokenFromSecureStorageAsync();
        
        // Check current route
        var currentUri = Navigation.ToBaseRelativePath(Navigation.Uri).ToLower();
        isOnLoginPage = currentUri.StartsWith("login");
        
        Console.WriteLine($"[LAYOUT] Current URI: {currentUri}, isOnLoginPage: {isOnLoginPage}");
        
        // Check authentication state
        isAuthenticated = AuthService.IsAuthenticated;
        Console.WriteLine($"[LAYOUT] Is authenticated: {isAuthenticated}");
        
        isCheckingAuth = false;
        
        // Redirect logic
        if (!isAuthenticated && !isOnLoginPage)
        {
            Console.WriteLine("[LAYOUT] Not authenticated and not on login page - redirecting to login");
            Navigation.NavigateTo("/login");
            return;
        }
        else if (isAuthenticated && isOnLoginPage)
        {
            Console.WriteLine("[LAYOUT] Authenticated but on login page - redirecting to home");
            Navigation.NavigateTo("/");
            return;
        }
        
        Console.WriteLine("[LAYOUT] Authentication check complete");
        StateHasChanged();
    }
    
    protected override void OnParametersSet()
    {
        // Update current page check
        var currentUri = Navigation.ToBaseRelativePath(Navigation.Uri).ToLower();
        isOnLoginPage = currentUri.StartsWith("login");
    }
}
