@page "/player-report"
@page "/players/{PlayerId}/report"
@using GolfTrackerApp.Mobile.Services
@using GolfTrackerApp.Mobile.Services.Api
@using GolfTrackerApp.Mobile.Models
@using MudBlazor
@inject INavigationService NavigationService
@inject IPlayerReportApiService PlayerReportApiService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<MudContainer Class="pa-2" Style="height: calc(100vh - 144px); overflow-y: auto;">
    @if (loading)
    {
        <div class="text-center pa-4">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
            <MudText Typo="Typo.body1" Class="mt-3" Color="Color.Secondary">Loading player report...</MudText>
        </div>
    }
    else if (playerId <= 0)
    {
        <div class="text-center pa-4">
            <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Large" Color="Color.Warning" />
            <MudText Typo="Typo.h6" Color="Color.Warning" Class="mt-2">No Player Selected</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">Please select a player to view their report.</MudText>
        </div>
    }
    else if (reportData?.Player != null)
    {
        <!-- Player Header -->
        <div class="d-flex align-center mb-4">
            <MudAvatar Color="Color.Primary" Size="Size.Large" Class="mr-3">
                @GetPlayerInitials(reportData.Player)
            </MudAvatar>
            <div>
                <MudText Typo="Typo.h4" Color="Color.Primary">
                    @reportData.Player.FirstName @reportData.Player.LastName
                </MudText>
                <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                    Player Report
                </MudText>
            </div>
        </div>

        <!-- Performance Chart -->
        @if (reportData.PerformanceData?.Any() == true)
        {
            <MudCard Elevation="3" Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">üìà Performance Trend</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class="golf-chart-container">
                        <MudChart ChartType="ChartType.Line" 
                                 ChartSeries="@performanceSeries" 
                                 XAxisLabels="@performanceXAxisLabels" 
                                 Width="100%" 
                                 Height="300px"
                                 ChartOptions="@chartOptions">
                        </MudChart>
                    </div>
                </MudCardContent>
            </MudCard>
        }

        <!-- Performance Statistics -->
        @if (reportData.PerformanceData?.Any() == true)
        {
            <MudGrid Class="mb-4" Spacing="2">
                <MudItem xs="6" sm="3">
                    <MudCard Elevation="2" Class="pa-3 text-center" Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 50%); color: white;">
                        <MudText Typo="Typo.h5">@reportData.PerformanceData.Count</MudText>
                        <MudText Typo="Typo.caption">Total Rounds</MudText>
                    </MudCard>
                </MudItem>
                <MudItem xs="6" sm="3">
                    <MudCard Elevation="2" Class="pa-3 text-center" Style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 50%); color: white;">
                        <MudText Typo="Typo.h5">@GetBestScore()</MudText>
                        <MudText Typo="Typo.caption">Best Score</MudText>
                    </MudCard>
                </MudItem>
                <MudItem xs="6" sm="3">
                    <MudCard Elevation="2" Class="pa-3 text-center" Style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 50%); color: white;">
                        <MudText Typo="Typo.h5">@GetAverageScore().ToString("F1")</MudText>
                        <MudText Typo="Typo.caption">Average Score</MudText>
                    </MudCard>
                </MudItem>
                <MudItem xs="6" sm="3">
                    <MudCard Elevation="2" Class="pa-3 text-center" Style="background: linear-gradient(135deg, #43e97b 0%, #38f9d7 50%); color: white;">
                        <MudText Typo="Typo.h5">@GetAverageToPar().ToString("F1")</MudText>
                        <MudText Typo="Typo.caption">Avg to Par</MudText>
                    </MudCard>
                </MudItem>
            </MudGrid>
        }

        <!-- Recent Rounds -->
        @if (reportData.PerformanceData?.Any() == true)
        {
            <MudCard Elevation="3" Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">üèåÔ∏è Recent Rounds</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudList T="object" Dense="true">
                        @foreach (var round in reportData.PerformanceData.OrderByDescending(r => r.Date).Take(10))
                        {
                            <MudListItem T="object">
                                <div class="d-flex justify-space-between align-center flex-grow-1">
                                    <div class="d-flex flex-column">
                                        <MudText Typo="Typo.body2">
                                            <strong>@round.CourseName</strong>
                                        </MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            @round.Date.ToString("MMM dd, yyyy")
                                        </MudText>
                                    </div>
                                    <div class="text-right">
                                        <MudText Typo="Typo.h6" Color="Color.Primary">
                                            @round.TotalScore
                                        </MudText>
                                        <MudText Typo="Typo.caption" Color="@(round.ScoreVsPar < 0 ? Color.Success : round.ScoreVsPar > 0 ? Color.Warning : Color.Info)">
                                            @(round.ScoreVsPar >= 0 ? "+" : "")@round.ScoreVsPar
                                        </MudText>
                                    </div>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                </MudCardContent>
            </MudCard>
        }
    }
    else
    {
        <div class="text-center pa-4">
            <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Large" Color="Color.Error" />
            <MudText Typo="Typo.h6" Color="Color.Error" Class="mt-2">Unable to Load Report</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">There was an error loading the player report data.</MudText>
            @if (!string.IsNullOrEmpty(debugInfo))
            {
                <MudText Typo="Typo.caption" Color="Color.Info" Class="mt-2">
                    DEBUG: @debugInfo
                </MudText>
            }
        </div>
    }
</MudContainer>

@code {
    [Parameter] public string? PlayerId { get; set; }
    
    private int playerId = 0;
    private bool loading = true;
    private PlayerReportViewModel? reportData;
    private string debugInfo = "";
    
    // Chart data
    private List<ChartSeries> performanceSeries = new();
    private string[] performanceXAxisLabels = Array.Empty<string>();
    private ChartOptions chartOptions = new();
    
    protected override async Task OnInitializedAsync()
    {
        // Get player ID from the route parameter
        if (!string.IsNullOrEmpty(PlayerId) && int.TryParse(PlayerId, out var routePlayerId))
        {
            playerId = routePlayerId;
        }

        if (playerId > 0)
        {
            await LoadPlayerReport();
        }
        else
        {
            loading = false;
        }
    }
    
    private async Task LoadPlayerReport()
    {
        try
        {
            loading = true;
            debugInfo = $"Calling API for player ID: {playerId}";
            StateHasChanged();
            
            reportData = await PlayerReportApiService.GetPlayerReportAsync(playerId);
            
            if (reportData == null)
            {
                debugInfo = $"API returned null for player ID: {playerId}. Details: {PlayerReportApiService.LastApiError}";
            }
            else if (reportData.Player == null)
            {
                debugInfo = $"API returned data but Player is null for ID: {playerId}. Response has {reportData.PerformanceData?.Count ?? 0} performance data points. Details: {PlayerReportApiService.LastApiError}";
            }
            else
            {
                debugInfo = $"Successfully loaded data for player: {reportData.Player.FirstName} {reportData.Player.LastName} (ID: {reportData.Player.Id}). Details: {PlayerReportApiService.LastApiError}";
            }
            
            if (reportData?.PerformanceData?.Any() == true)
            {
                InitializePerformanceChart();
            }
        }
        catch (Exception ex)
        {
            // Log error but don't crash the app
            debugInfo = $"EXCEPTION: {ex.GetType().Name}: {ex.Message}";
            if (ex.InnerException != null)
            {
                debugInfo += $" | Inner: {ex.InnerException.Message}";
            }
            debugInfo += $" | API Details: {PlayerReportApiService.LastApiError}";
            reportData = null;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }
    
    private void InitializePerformanceChart()
    {
        if (reportData?.PerformanceData == null) return;
        
        chartOptions = new ChartOptions
        {
            YAxisTicks = 1,
            YAxisLines = true,
            XAxisLines = false,
            YAxisFormat = "F0",
            LineStrokeWidth = 2
        };

        var data = reportData.PerformanceData
            .OrderBy(p => p.Date)
            .Take(20)
            .Select(p => (double)p.ScoreVsPar)
            .ToArray();
            
        var labels = reportData.PerformanceData
            .OrderBy(p => p.Date)
            .Take(20)
            .Select(p => p.Date.ToString("MM/dd"))
            .ToArray();
        
        performanceSeries = new List<ChartSeries>
        {
            new() { Name = "Score vs Par", Data = data }
        };
        performanceXAxisLabels = labels;
    }
    
    private string GetPlayerInitials(Player player)
    {
        var firstInitial = !string.IsNullOrEmpty(player.FirstName) ? player.FirstName[0].ToString().ToUpper() : "";
        var lastInitial = !string.IsNullOrEmpty(player.LastName) ? player.LastName[0].ToString().ToUpper() : "";
        return firstInitial + lastInitial;
    }
    
    private int GetBestScore()
    {
        return reportData?.PerformanceData?.Any() == true 
            ? reportData.PerformanceData.Min(p => p.TotalScore) 
            : 0;
    }
    
    private double GetAverageScore()
    {
        return reportData?.PerformanceData?.Any() == true 
            ? reportData.PerformanceData.Average(p => p.TotalScore) 
            : 0;
    }
    
    private double GetAverageToPar()
    {
        return reportData?.PerformanceData?.Any() == true 
            ? reportData.PerformanceData.Average(p => p.ScoreVsPar) 
            : 0;
    }
}