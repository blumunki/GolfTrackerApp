@page "/login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using MudBlazor
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Login - Golf Tracker</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-4">
    <MudPaper Elevation="4" Class="pa-6">
        <!-- Logo/Header -->
        <div class="text-center mb-6">
            <MudIcon Icon="@Icons.Material.Filled.SportsTennis" Size="Size.Large" Color="Color.Primary" Class="mb-2" />
            <MudText Typo="Typo.h4" Color="Color.Primary">Golf Tracker</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">Track your golf game like a pro</MudText>
        </div>
        
        <EditForm Model="@_loginModel" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />
            
            <MudTextField @bind-Value="_loginModel.Email" 
                          Label="Email" 
                          InputType="InputType.Email" 
                          Variant="Variant.Outlined"
                          Class="mb-4"
                          For="@(() => _loginModel.Email)" />
            
            <MudTextField @bind-Value="_loginModel.Password" 
                          Label="Password" 
                          InputType="InputType.Password" 
                          Variant="Variant.Outlined"
                          Class="mb-4"
                          For="@(() => _loginModel.Password)" />
            
            <MudButton ButtonType="ButtonType.Submit" 
                       Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       FullWidth="true"
                       Size="Size.Large"
                       Class="mb-4"
                       Disabled="_isLoading">
                @if (_isLoading)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                }
                Login
            </MudButton>
        </EditForm>

        <!-- Demo Accounts -->
        <MudExpansionPanels Elevation="0">
            <MudExpansionPanel Text="Demo Accounts">
                <MudText Typo="Typo.body2" Class="mb-2">Try these demo accounts:</MudText>
                <MudButton Variant="Variant.Outlined" 
                          Size="Size.Small" 
                          OnClick="@(() => SetDemoAccount("admin@golftracker.com", "Admin123!"))"
                          Class="mr-2 mb-2">
                    Admin Demo
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                          Size="Size.Small" 
                          OnClick="@(() => SetDemoAccount("demo@golftracker.com", "Demo123!"))"
                          Class="mb-2">
                    User Demo
                </MudButton>
            </MudExpansionPanel>
        </MudExpansionPanels>

        <MudDivider Class="my-4" />

        <!-- Register Link -->
        <div class="text-center">
            <MudText Typo="Typo.body2" Class="mb-2">Don't have an account?</MudText>
            <MudButton Variant="Variant.Text" 
                      Color="Color.Primary" 
                      OnClick="@(() => Navigation.NavigateTo("/register"))">
                Create Account
            </MudButton>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private LoginModel _loginModel = new();
    private bool _isLoading = false;

    private async Task HandleLogin()
    {
        _isLoading = true;

        try
        {
            // TODO: Implement API-based authentication
            // For now, just navigate to home - we'll implement proper API auth later
            await Task.Delay(500); // Simulate API call
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred during login. Please try again.", Severity.Error);
            System.Diagnostics.Debug.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void SetDemoAccount(string email, string password)
    {
        _loginModel.Email = email;
        _loginModel.Password = password;
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = "";
    }
}
