@page "/dashboard"
@using GolfTrackerApp.Mobile.Models
@using GolfTrackerApp.Mobile.Services.Api
@using System.Text.Json
@inject HttpClient Http
@inject IDashboardApiService DashboardApiService
@inject IJSRuntime JSRuntime

@* Use aliases to resolve namespace conflicts *@
@using ApiRound = GolfTrackerApp.Mobile.Services.Api.Round
@using LocalRound = GolfTrackerApp.Mobile.Models.Round

<MudContainer Class="pa-4">
    <MudText Typo="Typo.h4" Class="mb-4">Golf Dashboard</MudText>
    
    @if (loading)
    {
        <MudProgressCircular Size="Size.Large" Indeterminate="true" Class="ma-4" />
    }
    else
    {
        <!-- Key Stats Cards -->
        <MudGrid Class="mb-6">
            <MudItem xs="6" md="3">
                <MudCard Class="text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.GolfCourse" Color="Color.Primary" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Primary">@(stats?.TotalRounds ?? 0)</MudText>
                        <MudText Typo="Typo.body2">Total Rounds</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="6" md="3">
                <MudCard Class="text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.TrendingDown" Color="Color.Success" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Success">@((stats?.AverageScore ?? 0).ToString("F1"))</MudText>
                        <MudText Typo="Typo.body2">Average Score</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="6" md="3">
                <MudCard Class="text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.Star" Color="Color.Warning" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Warning">@(stats?.BestScore ?? 0)</MudText>
                        <MudText Typo="Typo.body2">Best Score</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="6" md="3">
                <MudCard Class="text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.GolfCourse" Color="Color.Info" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Info">@(stats?.CoursesPlayed ?? 0)</MudText>
                        <MudText Typo="Typo.body2">Courses Played</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Recent Performance -->
        <MudCard Class="mb-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Recent Performance</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (recentRounds?.Any() == true)
                {
                    <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelinePosition="TimelinePosition.Start">
                        @foreach (var round in recentRounds.Take(5))
                        {
                            <MudTimelineItem Color="@GetScoreColor(round.TotalScore, round.TotalPar)" Size="Size.Small">
                                <ItemContent>
                                    <div class="d-flex align-center justify-space-between">
                                        <div>
                                            <MudText Typo="Typo.body1"><strong>@round.CourseName</strong></MudText>
                                            <MudText Typo="Typo.body2">@round.ClubName</MudText>
                                            <MudText Typo="Typo.caption">@round.DatePlayed.ToString("MMM dd, yyyy")</MudText>
                                        </div>
                                        <div class="text-right">
                                            <MudText Typo="Typo.h6" Color="@GetScoreColor(round.TotalScore, round.TotalPar)">
                                                @round.TotalScore
                                            </MudText>
                                            <MudText Typo="Typo.caption">
                                                @FormatScoreToPar(round.TotalScore, round.TotalPar)
                                            </MudText>
                                        </div>
                                    </div>
                                </ItemContent>
                            </MudTimelineItem>
                        }
                    </MudTimeline>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary">No recent rounds to display.</MudText>
                }
            </MudCardContent>
        </MudCard>

        <!-- Score Distribution & Favorite Courses -->
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Score Distribution</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (scoreDistribution?.Any() == true)
                        {
                            @foreach (var item in scoreDistribution)
                            {
                                <div class="d-flex align-center justify-space-between mb-2">
                                    <MudText Typo="Typo.body2">@item.ScoreRange</MudText>
                                    <div class="d-flex align-center">
                                        <MudProgressLinear Value="@item.Percentage" Color="Color.Primary" Class="mr-2" Style="width: 100px;" />
                                        <MudText Typo="Typo.caption">@item.Count rounds</MudText>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Not enough data for distribution.</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Favorite Courses</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (favoriteCourses?.Any() == true)
                        {
                            <MudList T="string">
                                @foreach (var course in favoriteCourses)
                                {
                                    <MudListItem T="string">
                                        <div class="d-flex align-center justify-space-between">
                                            <div>
                                                <MudText Typo="Typo.body1">@course.CourseName</MudText>
                                                <MudText Typo="Typo.caption">@course.ClubName</MudText>
                                            </div>
                                            <div class="text-right">
                                                <MudText Typo="Typo.body2" Color="Color.Primary">@course.PlayCount rounds</MudText>
                                                <MudText Typo="Typo.caption">Avg: @course.AverageScore.ToString("F1")</MudText>
                                            </div>
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Play more rounds to see your favorites!</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private bool loading = true;
    private Services.Api.DashboardStats? stats;
    private List<ApiRound>? recentRounds;
    private List<Services.Api.ScoreDistribution>? scoreDistribution;
    private List<Services.Api.FavoriteCourse>? favoriteCourses;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            loading = true;
            StateHasChanged();
            
            // Add debug logging
            await JSRuntime.InvokeVoidAsync("console.log", "[DASHBOARD] Starting LoadDashboardData()");
            System.Diagnostics.Debug.WriteLine("[DASHBOARD] Starting LoadDashboardData()");
            
            // Load real dashboard data from API
            await JSRuntime.InvokeVoidAsync("console.log", "[DASHBOARD] Calling GetDashboardStatsAsync()");
            System.Diagnostics.Debug.WriteLine("[DASHBOARD] Calling GetDashboardStatsAsync()");
            stats = await DashboardApiService.GetDashboardStatsAsync();
            await JSRuntime.InvokeVoidAsync("console.log", $"[DASHBOARD] GetDashboardStatsAsync() returned: {(stats != null ? "Success" : "Null")}");
            System.Diagnostics.Debug.WriteLine($"[DASHBOARD] GetDashboardStatsAsync() returned: {(stats != null ? $"TotalRounds={stats.TotalRounds}" : "Null")}");
            
            await JSRuntime.InvokeVoidAsync("console.log", "[DASHBOARD] Calling GetScoreDistributionAsync()");
            System.Diagnostics.Debug.WriteLine("[DASHBOARD] Calling GetScoreDistributionAsync()");
            scoreDistribution = await DashboardApiService.GetScoreDistributionAsync();
            await JSRuntime.InvokeVoidAsync("console.log", $"[DASHBOARD] GetScoreDistributionAsync() returned: {(scoreDistribution?.Count ?? 0)} items");
            System.Diagnostics.Debug.WriteLine($"[DASHBOARD] GetScoreDistributionAsync() returned: {(scoreDistribution?.Count ?? 0)} items");
            
            await JSRuntime.InvokeVoidAsync("console.log", "[DASHBOARD] Calling GetFavoriteCoursesAsync()");
            System.Diagnostics.Debug.WriteLine("[DASHBOARD] Calling GetFavoriteCoursesAsync()");
            favoriteCourses = await DashboardApiService.GetFavoriteCoursesAsync(4);
            await JSRuntime.InvokeVoidAsync("console.log", $"[DASHBOARD] GetFavoriteCoursesAsync() returned: {(favoriteCourses?.Count ?? 0)} items");
            System.Diagnostics.Debug.WriteLine($"[DASHBOARD] GetFavoriteCoursesAsync() returned: {(favoriteCourses?.Count ?? 0)} items");
            
            // For recent rounds, we would need to get this from the rounds API
            // For now, we'll just leave it empty or use a mock
            recentRounds = new List<ApiRound>();
            
            await JSRuntime.InvokeVoidAsync("console.log", "[DASHBOARD] LoadDashboardData() completed successfully");
            System.Diagnostics.Debug.WriteLine("[DASHBOARD] LoadDashboardData() completed successfully");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"[DASHBOARD] Error loading dashboard data: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.error", $"[DASHBOARD] Exception details: {ex}");
            System.Diagnostics.Debug.WriteLine($"[DASHBOARD] Error loading dashboard data: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"[DASHBOARD] Exception details: {ex}");
            
            // Set defaults on error
            stats = null;
            recentRounds = new List<ApiRound>();
            scoreDistribution = new List<Services.Api.ScoreDistribution>();
            favoriteCourses = new List<Services.Api.FavoriteCourse>();
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private Color GetScoreColor(int score, int par)
    {
        var diff = score - par;
        return diff switch
        {
            <= -2 => Color.Success,
            <= 0 => Color.Info,
            <= 5 => Color.Warning,
            _ => Color.Error
        };
    }

    private string FormatScoreToPar(int score, int par)
    {
        var diff = score - par;
        if (diff == 0) return "E";
        return diff > 0 ? $"+{diff}" : diff.ToString();
    }

}
