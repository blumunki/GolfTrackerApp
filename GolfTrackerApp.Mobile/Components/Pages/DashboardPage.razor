@page "/dashboard"
@using GolfTrackerApp.Mobile.Models
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<MudContainer Class="pa-4">
    <MudText Typo="Typo.h4" Class="mb-4">Golf Dashboard</MudText>
    
    @if (loading)
    {
        <MudProgressCircular Size="Size.Large" Indeterminate="true" Class="ma-4" />
    }
    else
    {
        <!-- Key Stats Cards -->
        <MudGrid Class="mb-6">
            <MudItem xs="6" md="3">
                <MudCard Class="text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.GolfCourse" Color="Color.Primary" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Primary">@stats.TotalRounds</MudText>
                        <MudText Typo="Typo.body2">Total Rounds</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="6" md="3">
                <MudCard Class="text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.TrendingDown" Color="Color.Success" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Success">@stats.AverageScore?.ToString("F1")</MudText>
                        <MudText Typo="Typo.body2">Average Score</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="6" md="3">
                <MudCard Class="text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.Star" Color="Color.Warning" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Warning">@stats.BestScore</MudText>
                        <MudText Typo="Typo.body2">Best Score</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="6" md="3">
                <MudCard Class="text-center">
                    <MudCardContent>
                        <MudIcon Icon="Icons.Material.Filled.Flag" Color="Color.Info" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Info">@stats.CoursesPlayed</MudText>
                        <MudText Typo="Typo.body2">Courses Played</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Recent Performance -->
        <MudCard Class="mb-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Recent Performance</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (recentRounds?.Any() == true)
                {
                    <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelinePosition="TimelinePosition.Start">
                        @foreach (var round in recentRounds.Take(5))
                        {
                            <MudTimelineItem Color="@GetScoreColor(round.TotalScore, round.Par)" Size="Size.Small">
                                <ItemContent>
                                    <div class="d-flex align-center justify-space-between">
                                        <div>
                                            <MudText Typo="Typo.body1"><strong>@round.CourseName</strong></MudText>
                                            <MudText Typo="Typo.body2">@round.ClubName</MudText>
                                            <MudText Typo="Typo.caption">@round.DatePlayed.ToString("MMM dd, yyyy")</MudText>
                                        </div>
                                        <div class="text-right">
                                            <MudText Typo="Typo.h6" Color="@GetScoreColor(round.TotalScore, round.Par)">
                                                @round.TotalScore
                                            </MudText>
                                            <MudText Typo="Typo.caption">
                                                @FormatScoreToPar(round.TotalScore, round.Par)
                                            </MudText>
                                        </div>
                                    </div>
                                </ItemContent>
                            </MudTimelineItem>
                        }
                    </MudTimeline>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary">No recent rounds to display.</MudText>
                }
            </MudCardContent>
        </MudCard>

        <!-- Score Distribution & Favorite Courses -->
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Score Distribution</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (scoreDistribution?.Any() == true)
                        {
                            @foreach (var item in scoreDistribution)
                            {
                                <div class="d-flex align-center justify-space-between mb-2">
                                    <MudText Typo="Typo.body2">@item.Range</MudText>
                                    <div class="d-flex align-center">
                                        <MudProgressLinear Value="@item.Percentage" Color="Color.Primary" Class="mr-2" Style="width: 100px;" />
                                        <MudText Typo="Typo.caption">@item.Count rounds</MudText>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Not enough data for distribution.</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Favorite Courses</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (favoriteCourses?.Any() == true)
                        {
                            <MudList T="string">
                                @foreach (var course in favoriteCourses)
                                {
                                    <MudListItem T="string">
                                        <div class="d-flex align-center justify-space-between">
                                            <div>
                                                <MudText Typo="Typo.body1">@course.Name</MudText>
                                                <MudText Typo="Typo.caption">@course.Location</MudText>
                                            </div>
                                            <div class="text-right">
                                                <MudText Typo="Typo.body2" Color="Color.Primary">@course.RoundsPlayed rounds</MudText>
                                                <MudText Typo="Typo.caption">Avg: @course.AverageScore?.ToString("F1")</MudText>
                                            </div>
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Play more rounds to see your favorites!</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private bool loading = true;
    private DashboardStats stats = new();
    private List<Round>? recentRounds;
    private List<ScoreDistribution>? scoreDistribution;
    private List<FavoriteCourse>? favoriteCourses;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            loading = true;
            await Task.Delay(1000); // Simulate API call
            
            // Mock dashboard data
            stats = new DashboardStats
            {
                TotalRounds = 47,
                AverageScore = 86.3m,
                BestScore = 78,
                CoursesPlayed = 12
            };

            recentRounds = new List<Round>
            {
                new Round { CourseName = "Pebble Beach Golf Links", ClubName = "Pebble Beach", DatePlayed = DateTime.Now.AddDays(-3), TotalScore = 89, Par = 72 },
                new Round { CourseName = "Augusta National", ClubName = "Augusta National", DatePlayed = DateTime.Now.AddDays(-10), TotalScore = 95, Par = 72 },
                new Round { CourseName = "St. Andrews Old Course", ClubName = "The R&A", DatePlayed = DateTime.Now.AddDays(-17), TotalScore = 82, Par = 72 },
                new Round { CourseName = "Pinehurst No. 2", ClubName = "Pinehurst Resort", DatePlayed = DateTime.Now.AddDays(-24), TotalScore = 88, Par = 72 },
                new Round { CourseName = "Bethpage Black", ClubName = "Bethpage State Park", DatePlayed = DateTime.Now.AddDays(-31), TotalScore = 93, Par = 72 }
            };

            scoreDistribution = new List<ScoreDistribution>
            {
                new ScoreDistribution { Range = "Under 80", Count = 3, Percentage = 6.4 },
                new ScoreDistribution { Range = "80-89", Count = 18, Percentage = 38.3 },
                new ScoreDistribution { Range = "90-99", Count = 21, Percentage = 44.7 },
                new ScoreDistribution { Range = "100+", Count = 5, Percentage = 10.6 }
            };

            favoriteCourses = new List<FavoriteCourse>
            {
                new FavoriteCourse { Name = "TPC Scottsdale", Location = "Scottsdale, AZ", RoundsPlayed = 8, AverageScore = 85.2m },
                new FavoriteCourse { Name = "Pebble Beach Golf Links", Location = "Pebble Beach, CA", RoundsPlayed = 5, AverageScore = 91.4m },
                new FavoriteCourse { Name = "Pinehurst No. 2", Location = "Pinehurst, NC", RoundsPlayed = 4, AverageScore = 87.8m },
                new FavoriteCourse { Name = "Whistling Straits", Location = "Kohler, WI", RoundsPlayed = 3, AverageScore = 92.7m }
            };
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private Color GetScoreColor(int score, int par)
    {
        var diff = score - par;
        return diff switch
        {
            <= -2 => Color.Success,
            <= 0 => Color.Info,
            <= 5 => Color.Warning,
            _ => Color.Error
        };
    }

    private string FormatScoreToPar(int score, int par)
    {
        var diff = score - par;
        if (diff == 0) return "E";
        return diff > 0 ? $"+{diff}" : diff.ToString();
    }

    public class DashboardStats
    {
        public int TotalRounds { get; set; }
        public decimal? AverageScore { get; set; }
        public int BestScore { get; set; }
        public int CoursesPlayed { get; set; }
    }

    public class ScoreDistribution
    {
        public string Range { get; set; } = string.Empty;
        public int Count { get; set; }
        public double Percentage { get; set; }
    }

    public class FavoriteCourse
    {
        public string Name { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
        public int RoundsPlayed { get; set; }
        public decimal? AverageScore { get; set; }
    }
}
