@page "/home"
@using GolfTrackerApp.Mobile.Services.Api
@using GolfTrackerApp.Mobile.Models
@inject IDashboardApiService DashboardService
@inject IRoundApiService RoundApiService
@inject IPlayerReportApiService PlayerReportApiService
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4" Style="padding-bottom: 80px;">
    @if (loadingDashboard)
    {
        <MudStack AlignItems="AlignItems.Center" Spacing="4" Style="margin-top: 100px;">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            <MudText Typo="Typo.h6" Color="Color.Primary">Loading your golf dashboard...</MudText>
        </MudStack>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudStack AlignItems="AlignItems.Center" Spacing="4" Style="margin-top: 100px;">
            <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Size="Size.Large" Color="Color.Error" />
            <MudText Typo="Typo.h5" Color="Color.Error">Unable to Connect to API</MudText>
            <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Default">
                @errorMessage
            </MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadDashboardData">
                Try Again
            </MudButton>
        </MudStack>
    }
    else if (dashboardStats?.TotalRounds == 0)
    {
        <MudStack AlignItems="AlignItems.Center" Spacing="4" Style="margin-top: 100px;">
            <MudIcon Icon="@Icons.Material.Filled.GolfCourse" Size="Size.Large" Color="Color.Primary" />
            <MudText Typo="Typo.h5" Color="Color.Primary">Welcome to Golf Tracker!</MudText>
            <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Default">
                You haven't recorded any rounds yet. Start tracking your golf progress today!
            </MudText>
        </MudStack>
    }
    else if (dashboardStats != null)
    {
        <MudStack Spacing="3" Class="mb-4">
            <MudText Typo="Typo.h4" Style="font-weight: 700; color: #2e7d32;">
                Your Golf Dashboard
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Default">
                Track your performance and see how you're improving
            </MudText>
        </MudStack>

        <MudGrid Spacing="3" Class="mb-4">
            <MudItem xs="6">
                <MudCard Elevation="2" Style="border-left: 4px solid #2e7d32;">
                    <MudCardContent Class="pa-3">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.caption" Color="Color.Default">Total Rounds</MudText>
                            <MudText Typo="Typo.h5" Style="font-weight: 700; color: #2e7d32;">@dashboardStats.TotalRounds</MudText>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="6">
                <MudCard Elevation="2" Style="border-left: 4px solid #1976d2;">
                    <MudCardContent Class="pa-3">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.caption" Color="Color.Default">Best Score</MudText>
                            <MudText Typo="Typo.h5" Style="font-weight: 700; color: #1976d2;">@dashboardStats.BestScore</MudText>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="6">
                <MudCard Elevation="2" Style="border-left: 4px solid #ed6c02;">
                    <MudCardContent Class="pa-3">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.caption" Color="Color.Default">Avg Score</MudText>
                            <MudText Typo="Typo.h5" Style="font-weight: 700; color: #ed6c02;">@($"{dashboardStats.AverageScore:F1}")</MudText>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="6">
                <MudCard Elevation="2" Style="border-left: 4px solid #9c27b0;">
                    <MudCardContent Class="pa-3">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.caption" Color="Color.Default">Current Streak</MudText>
                            <MudText Typo="Typo.h5" Style="font-weight: 700; color: #9c27b0;">
                                @dashboardStats.CurrentStreak @(dashboardStats.IsImprovingStreak ? "üî•" : "")
                            </MudText>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <MudCard Elevation="2" Class="mb-4">
            <MudCardContent Class="pa-3">
                <MudStack Spacing="2">
                    <MudText Typo="Typo.h6" Style="font-weight: 700; color: #1976d2;">
                        üèÜ Best Round
                    </MudText>
                    <MudText Typo="Typo.body2">
                        <strong>@dashboardStats.BestScore</strong> at @dashboardStats.BestScoreCourseName
                    </MudText>
                    <MudText Typo="Typo.caption" Color="Color.Default">
                        @($"{dashboardStats.BestScoreDate:MMMM dd, yyyy}")
                    </MudText>
                </MudStack>
            </MudCardContent>
        </MudCard>

        <MudCard Elevation="2" Class="mb-4">
            <MudCardContent Class="pa-3">
                <MudStack Spacing="2">
                    <MudText Typo="Typo.h6" Style="font-weight: 700; color: #2e7d32;">
                        ‚≠ê Favorite Course
                    </MudText>
                    <MudText Typo="Typo.body2">
                        <strong>@dashboardStats.FavoriteCourseName</strong>
                    </MudText>
                    <MudText Typo="Typo.caption" Color="Color.Default">
                        Played @dashboardStats.FavoriteCourseRounds times
                    </MudText>
                </MudStack>
            </MudCardContent>
        </MudCard>

        <MudCard Elevation="2" Class="mb-4">
            <MudCardContent Class="pa-3">
                <MudStack Spacing="2">
                    <MudText Typo="Typo.h6" Style="font-weight: 700;">
                        üìÖ Last Round
                    </MudText>
                    <MudText Typo="Typo.caption" Color="Color.Default">
                        @($"{dashboardStats.LastRoundDate:MMMM dd, yyyy}")
                    </MudText>
                </MudStack>
            </MudCardContent>
        </MudCard>

        <!-- Recent Form Chart -->
        <MudCard Elevation="2" Class="mb-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">üìà Recent Form</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (performanceSeries?.Any() == true)
                {
                    <MudChart ChartType="ChartType.Line" 
                             ChartSeries="@performanceSeries" 
                             XAxisLabels="@performanceXAxisLabels" 
                             Width="100%" 
                             Height="200px"
                             ChartOptions="@chartOptions">
                    </MudChart>
                }
                else
                {
                    <div class="text-center pa-4">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Large" Color="Color.Secondary" />
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Play a few rounds to see your performance trends here.
                        </MudText>
                    </div>
                }
            </MudCardContent>
        </MudCard>

        <!-- Recent Rounds -->
        <MudCard Elevation="2" Class="mb-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">üèåÔ∏è Recent Rounds</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Filled.List" 
                                  Color="Color.Primary" 
                                  OnClick="@(() => Navigation.NavigateTo(\"/rounds\"))" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                @if (recentRounds?.Any() == true)
                {
                    <MudList T="object">
                        @foreach (var round in recentRounds)
                        {
                            <MudListItem T="object" OnClick="@(() => Navigation.NavigateTo($\"/rounds/{round.Id}\"))">
                                <div class="d-flex justify-space-between align-center flex-grow-1">
                                    <div class="d-flex flex-column">
                                        <MudText Typo="Typo.body1">
                                            <strong>@round.GolfCourseName</strong>
                                        </MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            @($"{round.DatePlayed:MMM dd, yyyy}")
                                        </MudText>
                                    </div>
                                    <div class="text-right">
                                        <MudText Typo="Typo.h6" Color="Color.Primary">
                                            @round.TotalScore
                                        </MudText>
                                        <MudText Typo="Typo.caption" Color="@(round.ToPar < 0 ? Color.Success : round.ToPar > 0 ? Color.Warning : Color.Info)">
                                            @(round.ToPar >= 0 ? "+" : "")@round.ToPar
                                        </MudText>
                                    </div>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <div class="text-center pa-4">
                        <MudIcon Icon="@Icons.Material.Filled.SportsGolf" Size="Size.Large" Color="Color.Secondary" />
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            No rounds recorded yet. Start tracking your game!
                        </MudText>
                    </div>
                }
            </MudCardContent>
        </MudCard>

        <!-- Playing Partners -->
        <MudCard Elevation="2">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">üë• Playing Partners</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Filled.People" 
                                  Color="Color.Primary" 
                                  OnClick="@(() => Navigation.NavigateTo(\"/players\"))" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                @if (partnerSummary?.Any() == true)
                {
                    <MudList T="object">
                        @foreach (var partner in partnerSummary)
                        {
                            <MudListItem T="object" OnClick="@(() => Navigation.NavigateTo($\"/players/{partner.PartnerId}/report\"))">
                                <div class="d-flex justify-space-between align-center flex-grow-1">
                                    <div class="d-flex flex-column">
                                        <MudText Typo="Typo.body1">
                                            <strong>@partner.PartnerName</strong>
                                        </MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            Last played: @($"{partner.LastPlayedDate:MMM dd, yyyy}")
                                        </MudText>
                                    </div>
                                    <div class="text-right">
                                        <MudText Typo="Typo.body2" Color="@(partner.UserWins > partner.PartnerWins ? Color.Success : partner.UserWins < partner.PartnerWins ? Color.Warning : Color.Info)">
                                            <strong>@partner.UserWins-@partner.PartnerWins-@partner.Ties</strong>
                                        </MudText>
                                        <MudText Typo="Typo.caption">
                                            @(partner.UserWins > partner.PartnerWins ? "You lead!" : 
                                              partner.UserWins < partner.PartnerWins ? "You trail" : "It's tied!")
                                        </MudText>
                                    </div>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <div class="text-center pa-4">
                        <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Large" Color="Color.Secondary" />
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Invite friends to play and track your competitive records!
                        </MudText>
                    </div>
                }
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private bool loadingDashboard = true;
    private string? errorMessage = null;
    private DashboardStats? dashboardStats = null;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("[HOME] Attempting API connection...");
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        loadingDashboard = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            dashboardStats = await DashboardService.GetDashboardStatsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load dashboard: {ex.Message}";
            Console.WriteLine($"[HOME] Error loading dashboard: {errorMessage}");
        }
        finally
        {
            loadingDashboard = false;
            StateHasChanged();
        }
    }
}
