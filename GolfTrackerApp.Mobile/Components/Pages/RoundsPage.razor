@page "/rounds"
@using GolfTrackerApp.Mobile.Models
@using GolfTrackerApp.Mobile.Services.Api
@using System.Text.Json
@inject HttpClient Http
@inject IRoundApiService RoundApiService
@inject IJSRuntime JSRuntime

@* Use aliases to resolve namespace conflicts *@
@using ApiRound = GolfTrackerApp.Mobile.Services.Api.Round
@using LocalRound = GolfTrackerApp.Mobile.Models.Round

<MudContainer Class="pa-2" Style="height: calc(100vh - 144px); overflow-y: auto;">
    <!-- Header with Actions -->
    <div class="d-flex align-center justify-space-between mb-3">
        <MudText Typo="Typo.h4" Color="Color.Primary">üèåÔ∏è Rounds</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add" 
                      Color="Color.Primary" 
                      Size="Size.Large"
                      OnClick="@(() => JSRuntime.InvokeVoidAsync("alert", "Record new round coming soon!"))" />
    </div>
    
    <!-- Search Bar -->
    <MudPaper Class="pa-3 mb-4" Elevation="2" Style="background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);">
        <MudTextField @bind-Value="searchString" 
                      Label="Search by course or club..." 
                      Variant="Variant.Outlined" 
                      Adornment="Adornment.Start" 
                      AdornmentIcon="@Icons.Material.Filled.Search" 
                      DebounceInterval="300" 
                      OnDebounceIntervalElapsed="OnSearchTextChanged"
                      Margin="Margin.Dense"
                      FullWidth="true" />
    </MudPaper>
    
    @if (loading)
    {
        <div class="text-center pa-4">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
            <MudText Typo="Typo.body1" Class="mt-3" Color="Color.Secondary">Loading your rounds...</MudText>
        </div>
    }
    else if (filteredRounds?.Any() == true)
    {
        <MudList T="object" Class="rounds-list">
            @foreach (var round in filteredRounds)
            {
                <MudListItem T="object" Class="round-list-item">
                    <MudCard Elevation="2" 
                             Class="mb-3 round-card" 
                             Style="border-left: 4px solid #667eea; cursor: pointer; transition: all 0.2s ease;"
                             @onclick="@(() => ShowRoundDetails(round))">
                        <MudCardContent Class="pa-3">
                            <div class="d-flex justify-space-between align-start">
                                <!-- Main Round Info -->
                                <div class="flex-grow-1">
                                    <div class="d-flex align-center mb-2">
                                        <MudIcon Icon="@Icons.Material.Filled.CalendarToday" 
                                                Size="Size.Small" 
                                                Class="mr-2" 
                                                Color="Color.Primary" />
                                        <MudText Typo="Typo.body1" Style="font-weight: 600;">
                                            @round.DatePlayed.ToString("MMM dd, yyyy")
                                        </MudText>
                                    </div>
                                    
                                    <div class="d-flex align-center mb-2">
                                        <MudIcon Icon="@Icons.Material.Filled.GolfCourse" 
                                                Size="Size.Small" 
                                                Class="mr-2" 
                                                Color="Color.Success" />
                                        <div class="flex-grow-1">
                                            <MudText Typo="Typo.body2" Style="font-weight: 500;">
                                                @round.ClubName
                                            </MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                @round.CourseName
                                            </MudText>
                                        </div>
                                    </div>
                                    
                                    <div class="d-flex align-center gap-4">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Flag" 
                                                    Size="Size.Small" 
                                                    Class="mr-1" 
                                                    Color="Color.Info" />
                                            <MudText Typo="Typo.caption">
                                                @GetRoundTypeDisplay(round)
                                            </MudText>
                                        </div>
                                        
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.People" 
                                                    Size="Size.Small" 
                                                    Class="mr-1" 
                                                    Color="Color.Warning" />
                                            <MudText Typo="Typo.caption">
                                                @GetPlayerCountDisplay(round) players
                                            </MudText>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Quick Actions -->
                                <div class="d-flex flex-column align-center ml-2">
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                                  Color="Color.Primary" 
                                                  Size="Size.Small"
                                                  OnClick="@(() => ShowRoundDetails(round))" />
                                    <MudMenu>
                                        <ActivatorContent>
                                            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" 
                                                          Color="Color.Secondary" 
                                                          Size="Size.Small" />
                                        </ActivatorContent>
                                        <ChildContent>
                                            <MudMenuItem Icon="@Icons.Material.Filled.Visibility" 
                                                         OnClick="@(() => ShowRoundDetails(round))">
                                                View Details
                                            </MudMenuItem>
                                            <MudMenuItem Icon="@Icons.Material.Filled.Edit" 
                                                         OnClick="@(() => EditRoundFromMenu(round))">
                                                Edit Round
                                            </MudMenuItem>
                                            <MudDivider />
                                            <MudMenuItem Icon="@Icons.Material.Filled.Delete" 
                                                         OnClick="@(() => DeleteRoundFromMenu(round))"
                                                         Style="color: var(--mud-palette-error);">
                                                Delete Round
                                            </MudMenuItem>
                                        </ChildContent>
                                    </MudMenu>
                                </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudListItem>
            }
        </MudList>
        
        @if (totalRounds > filteredRounds.Count)
        {
            <div class="text-center mt-4">
                <MudText Typo="Typo.caption" Color="Color.Secondary">
                    Showing @filteredRounds.Count of @totalRounds rounds
                </MudText>
            </div>
        }
    }
    else if (!loading && rounds?.Any() == true)
    {
        <!-- No search results -->
        <div class="text-center pa-4">
            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Secondary" />
            <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mt-2">No rounds found</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">Try adjusting your search terms</MudText>
        </div>
    }
    else
    {
        <!-- No rounds at all -->
        <div class="text-center pa-4">
            <MudIcon Icon="@Icons.Material.Filled.GolfCourse" Size="Size.Large" Color="Color.Secondary" />
            <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mt-2">No rounds recorded yet</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                Get out there and play some golf!
            </MudText>
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Add"
                      OnClick="@(() => JSRuntime.InvokeVoidAsync("alert", "Record new round coming soon!"))">
                Record Your First Round
            </MudButton>
        </div>
    }
</MudContainer>

<!-- Round Details Dialog -->
<MudDialog @bind-Visible="showDetailsDialog" Options="detailsDialogOptions">
    <DialogContent>
        @if (selectedRound != null)
        {
            <!-- Round Header -->
            <div class="mb-4">
                <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-1">
                    üìç @selectedRound.CourseName
                </MudText>
                <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                    @selectedRound.ClubName
                </MudText>
                <MudText Typo="Typo.caption" Color="Color.Tertiary">
                    @selectedRound.DatePlayed.ToString("dddd, MMMM dd, yyyy")
                </MudText>
            </div>
            
            <!-- Round Summary Cards -->
            <MudGrid Class="mb-4" Spacing="2">
                <MudItem xs="6">
                    <MudCard Elevation="1" Class="pa-3 text-center" Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 50%); color: white;">
                        <MudText Typo="Typo.caption">Total Score</MudText>
                        <MudText Typo="Typo.h4">@selectedRound.TotalScore</MudText>
                        <MudText Typo="Typo.caption">@FormatScoreToPar(selectedRound.TotalScore, selectedRound.Par)</MudText>
                    </MudCard>
                </MudItem>
                <MudItem xs="6">
                    <MudCard Elevation="1" Class="pa-3 text-center" Style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 50%); color: white;">
                        <MudText Typo="Typo.caption">Holes Played</MudText>
                        <MudText Typo="Typo.h4">@selectedRound.Holes</MudText>
                        <MudText Typo="Typo.caption">Par @selectedRound.Par</MudText>
                    </MudCard>
                </MudItem>
            </MudGrid>
            
            <!-- Round Details -->
            <MudCard Elevation="1" Class="mb-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-3">üìã Round Details</MudText>
                    
                    <div class="d-flex justify-space-between mb-2">
                        <MudText Typo="Typo.body2">Round Type:</MudText>
                        <MudText Typo="Typo.body2" Style="font-weight: 500;">@GetRoundTypeDisplay(selectedRound)</MudText>
                    </div>
                    
                    <div class="d-flex justify-space-between mb-2">
                        <MudText Typo="Typo.body2">Players:</MudText>
                        <MudText Typo="Typo.body2" Style="font-weight: 500;">@GetPlayerCountDisplay(selectedRound)</MudText>
                    </div>
                    
                    @if (selectedRound.PlayingPartners?.Any() == true)
                    {
                        <div class="mt-3">
                            <MudText Typo="Typo.body2" Class="mb-2">Playing Partners:</MudText>
                            <div class="d-flex flex-wrap gap-1">
                                @foreach (var partner in selectedRound.PlayingPartners)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Primary">@partner</MudChip>
                                }
                            </div>
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(selectedRound.Notes))
                    {
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.body2" Class="mb-2">Notes:</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Style="font-style: italic;">
                            @selectedRound.Notes
                        </MudText>
                    }
                </MudCardContent>
            </MudCard>
            
            <!-- Mobile Scorecard -->
            @if (scores?.Any() == true)
            {
                <MudCard Elevation="1">
                    <MudCardContent>
                        <MudText Typo="Typo.h6" Class="mb-3">üèåÔ∏è Scorecard</MudText>
                        
                        <!-- Mobile-optimized scorecard -->
                        <div class="mobile-scorecard">
                            @foreach (var hole in scores.Take(9).GroupBy(s => s.HoleNumber))
                            {
                                var holeNumber = hole.Key;
                                var holeScore = hole.First();
                                var scoreToPar = holeScore.Strokes - holeScore.Par;
                                
                                <div class="d-flex justify-space-between align-center py-1 @(holeNumber % 2 == 0 ? "bg-grey-50" : "")">
                                    <div class="d-flex align-center">
                                        <MudText Typo="Typo.body2" Style="font-weight: 600; min-width: 30px;">
                                            @holeNumber
                                        </MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="ml-2">
                                            Par @holeScore.Par
                                        </MudText>
                                    </div>
                                    
                                    <div class="d-flex align-center">
                                        <MudText Typo="Typo.body1" Style="font-weight: 600; margin-right: 8px;">
                                            @holeScore.Strokes
                                        </MudText>
                                        <MudChip T="string" 
                                                Size="Size.Small" 
                                                Color="@GetScoreColor(scoreToPar)"
                                                Style="min-width: 40px;">
                                            @FormatHoleScore(scoreToPar)
                                        </MudChip>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        @if (scores.Count > 9)
                        {
                            <div class="text-center mt-3">
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    Showing first 9 holes
                                </MudText>
                            </div>
                        }
                    </MudCardContent>
                </MudCard>
            }
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="CloseDetailsDialog">Close</MudButton>
        <MudButton Color="Color.Info" 
                  Variant="Variant.Outlined" 
                  StartIcon="@Icons.Material.Filled.Edit"
                  OnClick="EditRound">
            Edit
        </MudButton>
    </DialogActions>
</MudDialog>
@code {
    private List<LocalRound>? rounds;
    private List<LocalRound>? filteredRounds;
    private List<Score>? scores;
    private bool loading = true;
    private bool showDetailsDialog = false;
    private LocalRound? selectedRound;
    private string searchString = "";
    private int totalRounds = 0;
    
    // Actions menu
    private bool showActionsMenu = false;
    private LocalRound? selectedActionRound;
    
    private DialogOptions detailsDialogOptions = new() 
    { 
        MaxWidth = MaxWidth.Medium, 
        FullWidth = true,
        CloseButton = true
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadRounds();
    }

    private async Task LoadRounds()
    {
        try
        {
            loading = true;
            
            // Get rounds from API service
            var roundResponses = await RoundApiService.GetRoundsAsync(1, 50); // Load more for search
            
            // Convert API responses to Round model for UI
            rounds = roundResponses.Select(r => new LocalRound
            {
                Id = r.RoundId,
                CourseName = r.CourseName,
                ClubName = r.ClubName,
                DatePlayed = r.DatePlayed,
                TotalScore = r.TotalScore,
                Par = r.TotalPar,
                Holes = r.HolesPlayed,
                Notes = r.Notes ?? string.Empty,
                PlayingPartners = r.PlayingPartners ?? new List<string>(),
                Weather = "N/A", // Would need to add weather field to API
                PlayerCount = r.PlayerCount,
                RoundType = r.RoundType
            }).OrderByDescending(r => r.DatePlayed).ToList();
            
            totalRounds = rounds?.Count ?? 0;
            ApplySearchFilter();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading rounds: {ex.Message}");
            rounds = new List<LocalRound>();
            filteredRounds = new List<LocalRound>();
            totalRounds = 0;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchTextChanged(string text)
    {
        searchString = text;
        ApplySearchFilter();
        await Task.CompletedTask;
    }

    private void ApplySearchFilter()
    {
        if (rounds == null)
        {
            filteredRounds = new List<LocalRound>();
            return;
        }

        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredRounds = rounds;
        }
        else
        {
            var searchTerm = searchString.Trim().ToLowerInvariant();
            filteredRounds = rounds.Where(r =>
                r.CourseName.ToLowerInvariant().Contains(searchTerm) ||
                r.ClubName.ToLowerInvariant().Contains(searchTerm)
            ).ToList();
        }
        
        StateHasChanged();
    }

    private async Task ShowRoundDetails(LocalRound round)
    {
        selectedRound = round;
        await LoadRoundScores(round.Id);
        showDetailsDialog = true;
    }

    private async Task EditRoundFromMenu(LocalRound round)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Edit functionality coming soon for round at {round.CourseName}!");
    }

    private async Task DeleteRoundFromMenu(LocalRound round)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Delete functionality coming soon for round at {round.CourseName}!");
    }

    private async Task LoadRoundScores(int roundId)
    {
        try
        {
            // Mock scorecard data for now - in real implementation would call API
            scores = new List<Score>();
            var random = new Random(roundId); // Use roundId as seed for consistent data
            
            for (int i = 1; i <= 18; i++)
            {
                var par = i <= 6 ? (i % 3 == 0 ? 5 : 4) : (i % 4 == 0 ? 3 : 4);
                var strokes = par + random.Next(-1, 3); // Consistent score around par
                scores.Add(new Score
                {
                    Id = i,
                    RoundId = roundId,
                    HoleNumber = i,
                    Par = par,
                    Strokes = Math.Max(1, strokes) // Ensure at least 1 stroke
                });
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading scores: {ex.Message}");
            scores = new List<Score>();
        }
    }

    private void CloseDetailsDialog()
    {
        showDetailsDialog = false;
        selectedRound = null;
        scores = null;
    }

    private async Task EditRound()
    {
        var round = selectedRound ?? selectedActionRound;
        if (round != null)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Edit functionality coming soon for round at {round.CourseName}!");
        }
    }

    private async Task DeleteRound()
    {
        var round = selectedActionRound;
        if (round != null)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Delete functionality coming soon for round at {round.CourseName}!");
        }
    }

    private string GetRoundTypeDisplay(LocalRound round)
    {
        return string.IsNullOrEmpty(round.RoundType) ? "Friendly" : round.RoundType;
    }

    private string GetPlayerCountDisplay(LocalRound round)
    {
        return round.PlayerCount > 0 ? round.PlayerCount.ToString() : "1";
    }

    private string FormatScoreToPar(int score, int par)
    {
        var diff = score - par;
        if (diff == 0) return "E";
        return diff > 0 ? $"+{diff}" : diff.ToString();
    }

    private string FormatHoleScore(int diff)
    {
        if (diff == 0) return "E";
        return diff > 0 ? $"+{diff}" : diff.ToString();
    }

    private Color GetScoreColor(int scoreToPar)
    {
        return scoreToPar switch
        {
            <= -2 => Color.Success,
            -1 => Color.Info,
            0 => Color.Primary,
            1 => Color.Warning,
            _ => Color.Error
        };
    }
}
