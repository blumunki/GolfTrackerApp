@page "/login"
@layout SimpleLayout
@using GolfTrackerApp.Mobile.Services.Api
@using GolfTrackerApp.Mobile.Services
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Configuration
@inject GoogleAuthenticationService GoogleAuthService
@inject NavigationManager Navigation
@inject ILogger<LoginPage> Logger

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8 px-4">
    <MudPaper Elevation="8" Class="pa-8" Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 16px;">
        <div class="text-center mb-8">
            <MudIcon Icon="Icons.Material.Filled.GolfCourse" Color="Color.Surface" Size="Size.Large" Style="font-size: 4rem;" />
            <MudText Typo="Typo.h3" Color="Color.Surface" Class="mt-4 mb-2" Style="font-weight: 600;">
                Golf Tracker
            </MudText>
            <MudText Typo="Typo.h6" Color="Color.Surface" Style="opacity: 0.9;">
                Track your game, improve your score
            </MudText>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mb-6" ShowCloseIcon="true" CloseIconClicked="ClearError" Style="border-radius: 12px;">
                @errorMessage
            </MudAlert>
        }

        <MudCard Elevation="0" Style="background: white; border-radius: 12px; padding: 2rem;">
            <MudCardContent>
                <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Primary" Class="mb-6" Style="font-weight: 500;">
                    Welcome Back
                </MudText>

                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Primary" 
                          Size="Size.Large"
                          FullWidth="true"
                          OnClick="HandleGoogleSignIn"
                          Disabled="@isGoogleSigningIn"
                          Class="mb-6"
                          Style="height: 56px; border: 2px solid; border-radius: 12px; font-weight: 500;"
                          StartIcon="@Icons.Custom.Brands.Google">
                    @if (isGoogleSigningIn)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        <MudText>Signing you in...</MudText>
                    }
                    else
                    {
                        <MudText>Continue with Google</MudText>
                    }
                </MudButton>

                <div class="d-flex align-center my-6">
                    <MudDivider Class="flex-grow-1" />
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mx-4">or</MudText>
                    <MudDivider Class="flex-grow-1" />
                </div>

                <MudForm @ref="form" @bind-IsValid="@isFormValid">
                    <MudTextField @bind-Value="email" 
                                 Label="Email address" 
                                 Variant="Variant.Outlined" 
                                 Required="true"
                                 RequiredError="Email is required"
                                 Validation="@(new EmailAddressAttribute())"
                                 Class="mb-4"
                                 Style="border-radius: 8px;" />
                    
                    <MudTextField @bind-Value="password" 
                                 Label="Password" 
                                 Variant="Variant.Outlined" 
                                 InputType="InputType.Password"
                                 Required="true"
                                 RequiredError="Password is required"
                                 Class="mb-6"
                                 Style="border-radius: 8px;" />
                    
                    <MudButton ButtonType="ButtonType.Submit" 
                              Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              Size="Size.Large"
                              FullWidth="true"
                              OnClick="HandleLogin"
                              Disabled="@(!isFormValid || isLoading)"
                              Class="mb-4"
                              Style="height: 56px; border-radius: 12px; font-weight: 500; box-shadow: 0 4px 12px rgba(103, 58, 183, 0.3);">
                        @if (isLoading)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                            <MudText>Signing in...</MudText>
                        }
                        else
                        {
                            <MudText>Sign In</MudText>
                        }
                    </MudButton>
                </MudForm>

                <MudDivider Class="my-6" />
                
                <div class="text-center">
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                        New to Golf Tracker?
                    </MudText>
                    <MudButton Variant="Variant.Text" 
                              Color="Color.Primary" 
                              Size="Size.Large"
                              OnClick="ShowRegisterForm"
                              Disabled="@(isLoading || isGoogleSigningIn)"
                              Style="font-weight: 500;">
                        Create your account
                    </MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    </MudPaper>
</MudContainer>

<!-- Register Form Dialog -->
<MudDialog @bind-Visible="showRegisterDialog" Options="@(new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Small })">
    <TitleContent>
        <div class="d-flex align-center">
            <MudIcon Icon="Icons.Material.Filled.PersonAdd" Class="mr-3" />
            <MudText Typo="Typo.h6">Create Your Account</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        @if (!string.IsNullOrEmpty(registerErrorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mb-4" Style="border-radius: 8px;">
                @registerErrorMessage
            </MudAlert>
        }

        <MudForm @ref="registerForm" @bind-IsValid="@isRegisterFormValid">
            <MudTextField @bind-Value="registerEmail" 
                         Label="Email address" 
                         Variant="Variant.Outlined" 
                         Required="true"
                         RequiredError="Email is required"
                         Validation="@(new EmailAddressAttribute())"
                         Class="mb-4"
                         Style="border-radius: 8px;" />
            
            <MudTextField @bind-Value="registerPassword" 
                         Label="Password" 
                         Variant="Variant.Outlined" 
                         InputType="InputType.Password"
                         Required="true"
                         RequiredError="Password is required"
                         Class="mb-4"
                         Style="border-radius: 8px;" />
            
            <MudTextField @bind-Value="confirmPassword" 
                         Label="Confirm Password" 
                         Variant="Variant.Outlined" 
                         InputType="InputType.Password"
                         Required="true"
                         RequiredError="Please confirm your password"
                         Validation="@(new Func<string, string>(ValidatePasswordMatch))"
                         Class="mb-4"
                         Style="border-radius: 8px;" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseRegisterDialog" 
                  Disabled="@isRegistering"
                  Variant="Variant.Text">
            Cancel
        </MudButton>
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  OnClick="HandleRegister"
                  Disabled="@(!isRegisterFormValid || isRegistering)"
                  Style="border-radius: 8px;">
            @if (isRegistering)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                <MudText>Creating...</MudText>
            }
            else
            {
                <MudText>Create Account</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private MudForm form = null!;
    private MudForm registerForm = null!;
    private bool isFormValid;
    private bool isRegisterFormValid;
    private bool isLoading;
    private bool isRegistering;
    private bool isGoogleSigningIn;
    private bool showRegisterDialog;
    private string email = string.Empty;
    private string password = string.Empty;
    private string registerEmail = string.Empty;
    private string registerPassword = string.Empty;
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;
    private string registerErrorMessage = string.Empty;

    protected override void OnInitialized()
    {
        Logger.LogInformation("LoginPage initialized");
    }

    private async Task HandleLogin()
    {
        if (!isFormValid) return;

        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // TODO: Implement standard email/password authentication
            await Task.Delay(500); // Simulate API call
            errorMessage = "Standard login coming soon. Please use Google sign-in for now.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login error");
            errorMessage = "An unexpected error occurred during login";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleGoogleSignIn()
    {
        isGoogleSigningIn = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            Logger.LogInformation("Starting Google authentication");
            var result = await GoogleAuthService.GoogleSignInAsync();
            
            if (result)
            {
                Navigation.NavigateTo("/", replace: true);
            }
            else
            {
                errorMessage = "Google sign-in failed. Please try again or contact support if the issue persists.";
            }
        }
        catch (TaskCanceledException)
        {
            Logger.LogInformation("User canceled Google sign-in");
            // Don't show error message for user cancellation
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Google sign-in error");
            errorMessage = "An error occurred during Google sign-in. Please try again.";
        }
        finally
        {
            isGoogleSigningIn = false;
            StateHasChanged();
        }
    }

    private async Task HandleRegister()
    {
        if (!isRegisterFormValid) return;

        isRegistering = true;
        registerErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // TODO: Implement user registration
            await Task.Delay(500); // Simulate API call
            registerErrorMessage = "Registration coming soon. Please use Google sign-in for now.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Registration error");
            registerErrorMessage = "An unexpected error occurred during registration";
        }
        finally
        {
            isRegistering = false;
            StateHasChanged();
        }
    }

    private void ShowRegisterForm()
    {
        showRegisterDialog = true;
        registerErrorMessage = string.Empty;
        registerEmail = string.Empty;
        registerPassword = string.Empty;
        confirmPassword = string.Empty;
    }

    private void CloseRegisterDialog()
    {
        showRegisterDialog = false;
        registerErrorMessage = string.Empty;
    }

    private void ClearError()
    {
        errorMessage = string.Empty;
    }

    private string ValidatePasswordMatch(string confirmPwd)
    {
        if (confirmPwd != registerPassword)
            return "Passwords do not match";
        return string.Empty;
    }
}
