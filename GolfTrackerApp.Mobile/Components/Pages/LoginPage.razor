@page "/login"
@layout SimpleLayout
@using GolfTrackerApp.Mobile.Services.Api
@using GolfTrackerApp.Mobile.Services
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Configuration
@* @inject AuthenticationService AuthService *@
@inject GoogleAuthenticationService GoogleAuthService
@* @inject AuthenticationStateService AuthState *@
@inject NavigationManager Navigation
@inject ILogger<LoginPage> Logger
@inject IConfiguration Configuration

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16 px-8">
    <MudPaper Elevation="2" Class="pa-8">
        <div class="text-center mb-6">
            <MudIcon Icon="Icons.Material.Filled.GolfCourse" Color="Color.Primary" Size="Size.Large" />
            <MudText Typo="Typo.h4" Color="Color.Primary" Class="mt-2">Golf Tracker</MudText>
            <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Sign in to continue</MudText>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="ClearError">
                @errorMessage
            </MudAlert>
        }

        <!-- Configuration Debug Info -->
        <MudAlert Severity="Severity.Info" Class="mb-4">
            <MudText><strong>Configuration Debug:</strong></MudText>
            <MudText>Client ID configured: @clientIdConfigured</MudText>
            <MudText>Client ID preview: @clientIdPreview</MudText>
            <MudButton Size="Size.Small" Variant="Variant.Text" OnClick="TestConfiguration">Test Config</MudButton>
        </MudAlert>

        @if (!string.IsNullOrEmpty(configTestResult))
        {
            <MudAlert Severity="Severity.Warning" Class="mb-4">
                <pre style="white-space: pre-wrap; font-size: 0.8em;">@configTestResult</pre>
            </MudAlert>
        }

        <MudForm @ref="form" @bind-IsValid="@isFormValid">
            <MudTextField @bind-Value="email" 
                         Label="Email" 
                         Variant="Variant.Outlined" 
                         Required="true"
                         RequiredError="Email is required"
                         Validation="@(new EmailAddressAttribute())"
                         Class="mb-4" />
            
            <MudTextField @bind-Value="password" 
                         Label="Password" 
                         Variant="Variant.Outlined" 
                         InputType="InputType.Password"
                         Required="true"
                         RequiredError="Password is required"
                         Class="mb-6" />
            
            <MudButton ButtonType="ButtonType.Submit" 
                      Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      Size="Size.Large"
                      FullWidth="true"
                      OnClick="HandleLogin"
                      Disabled="@(!isFormValid || isLoading)"
                      Class="mb-4">
                @if (isLoading)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ml-2">Signing in...</MudText>
                }
                else
                {
                    <MudText>Sign In</MudText>
                }
            </MudButton>

            <MudButton Variant="Variant.Outlined" 
                      Color="Color.Default" 
                      Size="Size.Large"
                      FullWidth="true"
                      OnClick="HandleGoogleSignIn"
                      Disabled="@isLoading"
                      Class="mb-4"
                      StartIcon="@Icons.Custom.Brands.Google">
                @if (isGoogleSigningIn)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ml-2">Signing in with Google...</MudText>
                }
                else
                {
                    <MudText>Sign in with Google</MudText>
                }
            </MudButton>

            <MudDivider Class="my-4" />
            
            <MudText Align="Align.Center" Class="mb-2">Don't have an account?</MudText>
            <MudButton Variant="Variant.Text" 
                      Color="Color.Primary" 
                      Size="Size.Large"
                      FullWidth="true"
                      OnClick="ShowRegisterForm"
                      Disabled="@isLoading">
                Create Account
            </MudButton>
            
            <!-- Debug Navigation -->
            <MudDivider Class="my-4" />
            <MudText Align="Align.Center" Class="mb-2">Debug Navigation</MudText>
            <MudButton Variant="Variant.Text" 
                      Color="Color.Secondary" 
                      Size="Size.Large"
                      FullWidth="true"
                      Href="/test">
                Config Test Page
            </MudButton>
            <MudButton Variant="Variant.Text" 
                      Color="Color.Secondary" 
                      Size="Size.Large"
                      FullWidth="true"
                      Href="/simple">
                Simple Test Page
            </MudButton>
            <MudButton Variant="Variant.Text" 
                      Color="Color.Secondary" 
                      Size="Size.Large"
                      FullWidth="true"
                      Href="/">
                Home Page
            </MudButton>
        </MudForm>

        <!-- Register Form -->
        <MudDialog @bind-Visible="showRegisterDialog" Options="@(new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Small })">
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="Icons.Material.Filled.PersonAdd" Style="margin-right: 8px;" />
                    Create Account
                </MudText>
            </TitleContent>
            <DialogContent>
                @if (!string.IsNullOrEmpty(registerErrorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mb-4">
                        @registerErrorMessage
                    </MudAlert>
                }

                <MudForm @ref="registerForm" @bind-IsValid="@isRegisterFormValid">
                    <MudTextField @bind-Value="registerEmail" 
                                 Label="Email" 
                                 Variant="Variant.Outlined" 
                                 Required="true"
                                 RequiredError="Email is required"
                                 Validation="@(new EmailAddressAttribute())"
                                 Class="mb-4" />
                    
                    <MudTextField @bind-Value="registerPassword" 
                                 Label="Password" 
                                 Variant="Variant.Outlined" 
                                 InputType="InputType.Password"
                                 Required="true"
                                 RequiredError="Password is required"
                                 Class="mb-4" />
                    
                    <MudTextField @bind-Value="confirmPassword" 
                                 Label="Confirm Password" 
                                 Variant="Variant.Outlined" 
                                 InputType="InputType.Password"
                                 Required="true"
                                 RequiredError="Please confirm your password"
                                 Validation="@(new Func<string, string>(ValidatePasswordMatch))"
                                 Class="mb-4" />
                </MudForm>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="CloseRegisterDialog" Disabled="@isRegistering">Cancel</MudButton>
                <MudButton Color="Color.Primary" 
                          Variant="Variant.Filled" 
                          OnClick="HandleRegister"
                          Disabled="@(!isRegisterFormValid || isRegistering)">
                    @if (isRegistering)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ml-2">Creating...</MudText>
                    }
                    else
                    {
                        <MudText>Create Account</MudText>
                    }
                </MudButton>
            </DialogActions>
        </MudDialog>
    </MudPaper>
</MudContainer>

@code {
    private MudForm form = null!;
    private MudForm registerForm = null!;
    private bool isFormValid;
    private bool isRegisterFormValid;
    private bool isLoading;
    private bool isRegistering;
    private bool isGoogleSigningIn;
    private bool showRegisterDialog;
    private string email = string.Empty;
    private string password = string.Empty;
    private string registerEmail = string.Empty;
    private string registerPassword = string.Empty;
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;
    private string registerErrorMessage = string.Empty;
    
    // Configuration testing
    private bool clientIdConfigured = false;
    private string clientIdPreview = "";
    private string configTestResult = "";

    protected override void OnInitialized()
    {
        // Temporarily disabled for debugging
        Logger.LogInformation("LoginPage initialized");
        
        // Test configuration loading
        TestConfigurationOnLoad();
        
        /*
        // Check if user is already authenticated
        await AuthState.LoadTokenFromSecureStorageAsync();
        if (AuthState.IsAuthenticated)
        {
            Navigation.NavigateTo("/", replace: true);
        }
        */
    }

    private void TestConfigurationOnLoad()
    {
        try
        {
            var clientId = Configuration["Authentication:Google:ClientId"];

            clientIdConfigured = !string.IsNullOrEmpty(clientId);
            clientIdPreview = clientId?.Substring(0, Math.Min(20, clientId.Length)) ?? "[NOT SET]";

            Logger.LogInformation($"Configuration loaded - ClientId: {clientIdConfigured}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading configuration");
            configTestResult = $"Error loading config: {ex.Message}";
        }
    }

    private void TestConfiguration()
    {
        try
        {
            var allConfig = new Dictionary<string, string>();
            foreach (var item in Configuration.AsEnumerable())
            {
                allConfig[item.Key] = item.Value ?? "";
            }

            var authKeys = allConfig.Where(x => x.Key.Contains("Authentication")).ToList();
            
            configTestResult = $"Found {authKeys.Count} authentication config keys:\n";
            foreach (var key in authKeys)
            {
                configTestResult += $"- {key.Key}: {(string.IsNullOrEmpty(key.Value) ? "[EMPTY]" : "[HAS VALUE]")}\n";
            }

            Logger.LogInformation(configTestResult);
        }
        catch (Exception ex)
        {
            configTestResult = $"Test failed: {ex.Message}";
            Logger.LogError(ex, "Configuration test failed");
        }
    }

    private async Task HandleLogin()
    {
        if (!isFormValid) return;

        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Temporarily disabled for debugging
            Logger.LogInformation("Login temporarily disabled for debugging");
            await Task.Delay(500);
            errorMessage = "Login temporarily disabled for debugging";
            
            /*
            var result = await AuthService.LoginAsync(email, password);
            
            if (result.IsSuccess)
            {
                AuthState.SetAuthenticationState(result.Token, result.UserId, result.Email, result.UserName);
                await AuthState.SaveTokenSecurelyAsync();
                Navigation.NavigateTo("/", replace: true);
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
            */
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login error");
            errorMessage = "An unexpected error occurred during login";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleGoogleSignIn()
    {
        isGoogleSigningIn = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            Logger.LogInformation("HandleGoogleSignIn button clicked - starting authentication process");
            Console.WriteLine("DEBUG: HandleGoogleSignIn button clicked - starting authentication process");
            var result = await GoogleAuthService.GoogleSignInAsync();
            
            Logger.LogInformation($"Google sign-in result: {result}");
            
            if (result)
            {
                Navigation.NavigateTo("/", replace: true);
            }
            else
            {
                errorMessage = "Google sign-in failed. This might be due to WebAuthenticator redirect issues in iOS Simulator. Check the console logs in Xcode for detailed error information.";
            }
        }
        catch (TaskCanceledException)
        {
            Logger.LogInformation("User canceled Google sign-in");
            errorMessage = "Google sign-in was canceled by user.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Google sign-in error");
            errorMessage = $"OAuth Error: {ex.Message}. For iOS Simulator, WebAuthenticator may have issues with localhost redirects. Check Xcode console for details.";
        }
        finally
        {
            isGoogleSigningIn = false;
            StateHasChanged();
        }
    }

    private async Task HandleRegister()
    {
        if (!isRegisterFormValid) return;

        isRegistering = true;
        registerErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Temporarily disabled for debugging
            Logger.LogInformation("Register temporarily disabled for debugging");
            await Task.Delay(500);
            registerErrorMessage = "Register temporarily disabled for debugging";
            
            /*
            var result = await AuthService.RegisterAsync(registerEmail, registerPassword);
            
            if (result.IsSuccess)
            {
                AuthState.SetAuthenticationState(result.Token, result.UserId, result.Email, result.UserName);
                await AuthState.SaveTokenSecurelyAsync();
                showRegisterDialog = false;
                Navigation.NavigateTo("/", replace: true);
            }
            else
            {
                registerErrorMessage = result.ErrorMessage;
            }
            */
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Registration error");
            registerErrorMessage = "An unexpected error occurred during registration";
        }
        finally
        {
            isRegistering = false;
            StateHasChanged();
        }
    }

    private void ShowRegisterForm()
    {
        showRegisterDialog = true;
        registerErrorMessage = string.Empty;
        registerEmail = string.Empty;
        registerPassword = string.Empty;
        confirmPassword = string.Empty;
    }

    private void CloseRegisterDialog()
    {
        showRegisterDialog = false;
        registerErrorMessage = string.Empty;
    }

    private void ClearError()
    {
        errorMessage = string.Empty;
    }

    private string ValidatePasswordMatch(string confirmPwd)
    {
        if (confirmPwd != registerPassword)
            return "Passwords do not match";
        return string.Empty;
    }
}
