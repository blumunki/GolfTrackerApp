@page "/test-api"
@using GolfTrackerApp.Mobile.Services.Api
@using GolfTrackerApp.Mobile.Models
@inject IGolfClubApiService GolfClubApiService
@inject ILogger<TestApi> Logger

<MudContainer>
    <MudText Typo="Typo.h4" GutterBottom="true">API Test Page</MudText>
    
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="TestApiConnection">
        Test Golf Clubs API
    </MudButton>
    
    @if (isLoading)
    {
        <MudProgressCircular Class="mt-4" />
        <MudText>Testing API connection...</MudText>
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Class="mt-4" Severity="Severity.Error">@errorMessage</MudAlert>
    }
    
    @if (golfClubs.Any())
    {
        <MudText Class="mt-4" Typo="Typo.h6">âœ… API Connection Successful!</MudText>
        <MudText Class="mb-2">Found @golfClubs.Count golf clubs:</MudText>
        
        @foreach (var club in golfClubs)
        {
            <MudCard Class="mb-2">
                <MudCardContent>
                    <MudText Typo="Typo.h6">@club.Name</MudText>
                    <MudText Typo="Typo.body2">@club.City, @club.CountyOrRegion</MudText>
                </MudCardContent>
            </MudCard>
        }
    }
</MudContainer>

@code {
    private List<GolfClub> golfClubs = new();
    private bool isLoading = false;
    private string errorMessage = "";

    private async Task TestApiConnection()
    {
        isLoading = true;
        errorMessage = "";
        golfClubs.Clear();
        
        try
        {
            Logger.LogInformation("Testing API connection...");
            golfClubs = await GolfClubApiService.GetAllGolfClubsAsync();
            Logger.LogInformation("API test completed successfully. Retrieved {Count} golf clubs.", golfClubs.Count);
        }
        catch (Exception ex)
        {
            errorMessage = $"API connection failed: {ex.Message}";
            Logger.LogError(ex, "API test failed");
        }
        finally
        {
            isLoading = false;
        }
    }
}
