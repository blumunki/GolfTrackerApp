@page "/golf-clubs"
@page "/golfclubs"
@layout MobileLayout
@using GolfTrackerApp.Mobile.Models
@using GolfTrackerApp.Mobile.Services.Api
@inject IGolfClubApiService GolfClubApi
@inject ILogger<GolfClubsPage> Logger
@inject IJSRuntime JSRuntime

<MudContainer Class="pa-2" Style="height: calc(100vh - 144px); overflow-y: auto;">
    <!-- Header and Add Actions -->
    <div class="d-flex align-center justify-space-between mb-4">
        <MudText Typo="Typo.h4" Color="Color.Primary">⛳️ Golf Clubs</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add" 
                      Color="Color.Primary" 
                      Size="Size.Large"
                      OnClick="@(() => JSRuntime.InvokeVoidAsync("alert", "Add new club coming soon!"))" />
    </div>
    
    <!-- Search Bar -->
    <MudPaper Class="pa-3 mb-4" Elevation="2" Style="background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);">
        <MudTextField @bind-Value="searchString" 
                      Label="Search clubs by name or location..." 
                      Variant="Variant.Outlined" 
                      Adornment="Adornment.Start" 
                      AdornmentIcon="@Icons.Material.Filled.Search" 
                      DebounceInterval="300" 
                      OnDebounceIntervalElapsed="OnSearchTextChanged"
                      Margin="Margin.Dense"
                      FullWidth="true" />
    </MudPaper>
    
    @if (loading)
    {
        <div class="text-center pa-4">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
            <MudText Typo="Typo.body1" Class="mt-3" Color="Color.Secondary">Loading golf clubs...</MudText>
        </div>
    }
    else if (filteredClubs?.Any() == true)
    {
        <MudList T="object" Class="clubs-list">
            @foreach (var club in filteredClubs)
            {
                <MudListItem T="object" Class="club-list-item">
                    <MudCard Elevation="2" 
                             Class="mb-3 club-card" 
                             Style="border-left: 4px solid #3c8dbc; cursor: pointer; transition: all 0.2s ease;"
                             @onclick="@(() => ShowClubDetails(club.GolfClubId))">
                        <MudCardContent Class="pa-3">
                            <div class="d-flex justify-space-between align-start">
                                <!-- Main Club Info -->
                                <div class="flex-grow-1">
                                    <div class="d-flex align-center mb-2">
                                        <MudIcon Icon="@Icons.Material.Filled.GolfCourse" Color="Color.Primary" Class="mr-3" />
                                        <div>
                                            <MudText Typo="Typo.h6" Style="font-weight: 600;">
                                                @club.Name
                                            </MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                @GetClubLocation(club)
                                            </MudText>
                                        </div>
                                    </div>
                                    
                                    <div class="d-flex align-center gap-4 mt-2">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Flag" 
                                                    Size="Size.Small" 
                                                    Class="mr-1" 
                                                    Color="Color.Info" />
                                            <MudText Typo="Typo.caption">
                                                @club.CourseCount Courses
                                            </MudText>
                                        </div>
                                        @if (!string.IsNullOrEmpty(club.Website))
                                        {
                                            <div class="d-flex align-center">
                                                <MudIcon Icon="@Icons.Material.Filled.Language"
                                                        Size="Size.Small"
                                                        Class="mr-1"
                                                        Color="Color.Success" />
                                                <MudText Typo="Typo.caption">
                                                    Has Website
                                                </MudText>
                                            </div>
                                        }
                                    </div>
                                </div>
                                
                                <!-- Quick Actions -->
                                <div class="d-flex flex-column align-center ml-2">
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                                  Color="Color.Primary" 
                                                  Size="Size.Small"
                                                  title="View Courses"
                                                  OnClick="@(() => ShowClubDetails(club.GolfClubId))" />
                                    <MudMenu>
                                        <ActivatorContent>
                                            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" 
                                                          Color="Color.Secondary" 
                                                          Size="Size.Small" />
                                        </ActivatorContent>
                                        <ChildContent>
                                            <MudMenuItem Icon="@Icons.Material.Filled.Visibility" 
                                                         OnClick="@(() => ShowClubDetails(club.GolfClubId))">
                                                View Details
                                            </MudMenuItem>
                                            <MudMenuItem Icon="@Icons.Material.Filled.Edit" 
                                                         OnClick="@(() => JSRuntime.InvokeVoidAsync("alert", "Edit club coming soon!"))">
                                                Edit Club
                                            </MudMenuItem>
                                        </ChildContent>
                                    </MudMenu>
                                </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudListItem>
            }
        </MudList>
    }
    else if (!loading && golfClubs?.Any() == true)
    {
        <!-- No search results -->
        <div class="text-center pa-4">
            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Secondary" />
            <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mt-2">No clubs found</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">Try adjusting your search terms</MudText>
        </div>
    }
    else
    {
        <!-- No clubs at all -->
        <div class="text-center pa-4">
            <MudIcon Icon="@Icons.Material.Filled.GolfCourse" Size="Size.Large" Color="Color.Secondary" />
            <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mt-2">No golf clubs found</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                Add a club to get started.
            </MudText>
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Add"
                      OnClick="@(() => JSRuntime.InvokeVoidAsync("alert", "Add new club coming soon!"))">
                Add a Club
            </MudButton>
        </div>
    }
</MudContainer>

<!-- Club Details Dialog -->
<MudDialog @bind-Visible="showDetailsDialog" Options="detailsDialogOptions">
    <DialogContent>
        @if (dialogLoading)
        {
            <div class="text-center pa-8">
                <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
                <MudText Typo="Typo.body1" Class="mt-3" Color="Color.Secondary">Loading club details...</MudText>
            </div>
        }
        else if (selectedClub != null)
        {
            <div class="mb-2">
                <MudText Typo="Typo.h5" Color="Color.Primary">@selectedClub.Name</MudText>
                <MudText Typo="Typo.caption" Color="Color.Secondary">@GetClubLocation(selectedClub)</MudText>
            </div>

            <MudText Typo="Typo.h6" Class="mt-4 mb-2">Courses</MudText>
            @if (selectedClub.Courses?.Any() == true)
            {
                <MudList T="object" Dense="true">
                    @foreach (var course in selectedClub.Courses)
                    {
                        <MudListItem T="object">
                            <div class="d-flex justify-space-between align-center flex-grow-1">
                                <div>
                                    <MudText>@course.Name</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @course.NumberOfHoles holes | Par @course.DefaultPar
                                    </MudText>
                                </div>
                            </div>
                        </MudListItem>
                    }
                </MudList>
            }
            else
            {
                <MudAlert Severity="Severity.Info">No courses have been added for this club yet.</MudAlert>
            }
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="CloseDetailsDialog">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<GolfClub>? golfClubs;
    private List<GolfClub>? filteredClubs;
    private bool loading = true;
    private bool dialogLoading = false;
    private bool showDetailsDialog = false;
    private GolfClub? selectedClub;
    private string searchString = "";

    private DialogOptions detailsDialogOptions = new() 
    { 
        MaxWidth = MaxWidth.Medium, 
        FullWidth = true,
        CloseButton = true
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadGolfClubs();
    }

    private async Task LoadGolfClubs()
    {
        try
        {
            loading = true;
            golfClubs = await GolfClubApi.GetAllGolfClubsAsync();
            ApplySearchFilter();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading golf clubs");
            golfClubs = new List<GolfClub>();
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchTextChanged(string text)
    {
        searchString = text;
        ApplySearchFilter();
        await Task.CompletedTask;
    }

    private void ApplySearchFilter()
    {
        if (golfClubs == null)
        {
            filteredClubs = new List<GolfClub>();
            return;
        }

        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredClubs = golfClubs;
        }
        else
        {
            var searchTerm = searchString.Trim().ToLowerInvariant();
            filteredClubs = golfClubs.Where(c =>
                (c.Name?.ToLowerInvariant().Contains(searchTerm) == true) ||
                (c.City?.ToLowerInvariant().Contains(searchTerm) == true) ||
                (c.CountyOrRegion?.ToLowerInvariant().Contains(searchTerm) == true)
            ).ToList();
        }
        
        StateHasChanged();
    }

    private string GetClubLocation(GolfClub club)
    {
        var parts = new List<string>();
        if (!string.IsNullOrEmpty(club.City)) parts.Add(club.City);
        if (!string.IsNullOrEmpty(club.CountyOrRegion)) parts.Add(club.CountyOrRegion);
        return string.Join(", ", parts);
    }

    private async Task ShowClubDetails(int clubId)
    {
        showDetailsDialog = true;
        dialogLoading = true;
        StateHasChanged();

        try
        {
            selectedClub = await GolfClubApi.GetGolfClubByIdAsync(clubId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching details for club {ClubId}", clubId);
            // Optionally, show an error in the dialog
        }
        finally
        {
            dialogLoading = false;
            StateHasChanged();
        }
    }

    private void CloseDetailsDialog()
    {
        showDetailsDialog = false;
        selectedClub = null;
    }
}
