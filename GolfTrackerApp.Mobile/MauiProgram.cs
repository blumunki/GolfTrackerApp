using Microsoft.Extensions.Logging;
using MudBlazor.Services;
using GolfTrackerApp.Mobile.Services.Api;
using GolfTrackerApp.Mobile.Services;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Http;

namespace GolfTrackerApp.Mobile;

public static class MauiProgram
{
	public static MauiApp CreateMauiApp()
	{
		var builder = MauiApp.CreateBuilder();
		
		// Add OAuth configuration for development builds
#if DEBUG
		try
		{
			// Load OAuth secrets from generated configuration class
			// Generated by ./generate-dev-config.sh from user secrets, excluded from git
			var configBuilder = new ConfigurationBuilder();
			configBuilder.AddInMemoryCollection(new Dictionary<string, string?>
			{
				{ "Authentication:Google:ClientId", GolfTrackerApp.Mobile.Generated.DevConfiguration.GoogleClientId },
				{ "Authentication:Google:ClientSecret", GolfTrackerApp.Mobile.Generated.DevConfiguration.GoogleClientSecret }
			});
			
			var devConfig = configBuilder.Build();
			foreach (var kvp in devConfig.AsEnumerable())
			{
				if (!string.IsNullOrEmpty(kvp.Value))
				{
					builder.Configuration[kvp.Key] = kvp.Value;
				}
			}
		}
		catch (Exception ex)
		{
			System.Diagnostics.Debug.WriteLine($"[CONFIG] Error loading development configuration: {ex.Message}");
			System.Diagnostics.Debug.WriteLine($"[CONFIG] Run './generate-dev-config.sh' to create DevConfiguration.generated.cs");
		}
#endif

		builder
			.UseMauiApp<App>()
			.ConfigureFonts(fonts =>
			{
				fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
				fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
			});

		builder.Services.AddMauiBlazorWebView();

		// Add MudBlazor services
		builder.Services.AddMudServices();

		// Configure base HTTP client settings
		var httpClientBuilder = new Action<HttpClient>(client =>
		{
#if ANDROID
			// Use Android emulator bridge IP to connect to host development server
			// Use HTTPS since API only responds on HTTPS
			client.BaseAddress = new Uri("https://10.0.2.2:7295/");
#else
			client.BaseAddress = new Uri("https://localhost:7295/");
#endif
			client.DefaultRequestHeaders.Add("Accept", "application/json");
		});

#if DEBUG
		var httpMessageHandlerFactory = new Func<HttpMessageHandler>(() =>
		{
			var handler = new HttpClientHandler();
			// Allow self-signed certificates in development
			handler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true;
			return handler;
		});
#endif

		// Configure HTTP clients for API services
		builder.Services.AddHttpClient<IGolfClubApiService, GolfClubApiService>(httpClientBuilder)
#if DEBUG
			.ConfigurePrimaryHttpMessageHandler(httpMessageHandlerFactory)
#endif
			;

		builder.Services.AddHttpClient<IPlayerApiService, PlayerApiService>(httpClientBuilder)
#if DEBUG
			.ConfigurePrimaryHttpMessageHandler(httpMessageHandlerFactory)
#endif
			;

		builder.Services.AddHttpClient<IRoundApiService, RoundApiService>(httpClientBuilder)
#if DEBUG
			.ConfigurePrimaryHttpMessageHandler(httpMessageHandlerFactory)
#endif
			;

		builder.Services.AddHttpClient<IDashboardApiService, DashboardApiService>(httpClientBuilder)
#if DEBUG
			.ConfigurePrimaryHttpMessageHandler(httpMessageHandlerFactory)
#endif
			;

		builder.Services.AddHttpClient<IPlayerReportApiService, PlayerReportApiService>(httpClientBuilder)
#if DEBUG
			.ConfigurePrimaryHttpMessageHandler(httpMessageHandlerFactory)
#endif
			;

		// Authentication services
		builder.Services.AddSingleton<ConfigurationService>();
		builder.Services.AddSingleton<AuthenticationStateService>();
		builder.Services.AddSingleton<INavigationService, NavigationService>();
		
		// Configure GoogleAuthenticationService with proper HttpClient setup
		builder.Services.AddSingleton<GoogleAuthenticationService>(serviceProvider =>
		{
			var configuration = serviceProvider.GetRequiredService<IConfiguration>();
			var configService = serviceProvider.GetRequiredService<ConfigurationService>();
			var logger = serviceProvider.GetRequiredService<ILogger<GoogleAuthenticationService>>();
			var authStateService = serviceProvider.GetRequiredService<AuthenticationStateService>();
			var playerApiService = serviceProvider.GetRequiredService<IPlayerApiService>();
			
			// Create HttpClient with proper configuration for Android/iOS
			HttpClient httpClient;
#if DEBUG
			var handler = new HttpClientHandler();
			handler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true;
			httpClient = new HttpClient(handler);
#else
			httpClient = new HttpClient();
#endif

#if ANDROID
			httpClient.BaseAddress = new Uri("https://10.0.2.2:7295/");
#else
			httpClient.BaseAddress = new Uri("https://localhost:7295/");
#endif
			httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

			return new GoogleAuthenticationService(httpClient, configuration, configService, logger, authStateService, playerApiService);
		});

#if DEBUG
		builder.Services.AddBlazorWebViewDeveloperTools();
		builder.Logging.AddDebug();
#endif

		var app = builder.Build();

		return app;
	}
}
