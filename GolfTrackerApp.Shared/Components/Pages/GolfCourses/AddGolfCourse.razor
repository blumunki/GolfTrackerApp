@page "/golfcourses/add"
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer
@inject IGolfCourseService GolfCourseService
@inject IGolfClubService GolfClubService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using GolfTrackerApp.Shared.Models
@using GolfTrackerApp.Shared.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities


<PageTitle>Add New Golf Course</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Add New Golf Course</MudText>

@if (_golfClubs is null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <EditForm Model="@newGolfCourse" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudSelect T="int" @bind-Value="newGolfCourse.GolfClubId" 
                           For="@(() => newGolfCourse.GolfClubId)" 
                           Label="Golf Club" 
                           Required="true"
                           Disabled="@(_preselectedClubId > 0)">
                    <MudSelectItem T="int" Value="0">Select a Club</MudSelectItem>
                    @foreach (var club in _golfClubs)
                    {
                        <MudSelectItem T="int" Value="@club.GolfClubId">@club.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField @bind-Value="newGolfCourse.Name" For="@(() => newGolfCourse.Name)" Label="Course Name" Required="true" Class="mt-3" />
                <MudNumericField @bind-Value="newGolfCourse.NumberOfHoles" For="@(() => newGolfCourse.NumberOfHoles)" Label="Number of Holes" Required="true" Min="1" Max="18" Class="mt-3" />
                <MudNumericField @bind-Value="newGolfCourse.DefaultPar" For="@(() => newGolfCourse.DefaultPar)" Label="Default Par" Required="true" Min="27" Max="75" Class="mt-3" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Disabled="@(newGolfCourse.GolfClubId == 0)">Create Course</MudButton>
                <MudButton Variant="Variant.Outlined" OnClick="GoBack" Class="mx-2">Cancel</MudButton>
            </MudCardActions>
        </MudCard>
        <ValidationSummary class="mt-3" />
    </EditForm>
}

@code {
    private GolfCourse newGolfCourse = new() { GolfClubId = 0 };
    private List<GolfClub>? _golfClubs;
    private int _preselectedClubId;

    protected override async Task OnInitializedAsync()
    {
        // Check if a clubId was passed in the query string
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("clubId", out var clubId))
        {
            int.TryParse(clubId, out _preselectedClubId);
            newGolfCourse.GolfClubId = _preselectedClubId;
        }

        _golfClubs = await GolfClubService.GetAllGolfClubsAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (newGolfCourse.GolfClubId == 0)
        {
            Snackbar.Add("Please select a Golf Club.", Severity.Warning);
            return;
        }

        try
        {
            await GolfCourseService.AddGolfCourseAsync(newGolfCourse);
            Snackbar.Add("Golf course added successfully!", Severity.Success);
            NavigationManager.NavigateTo($"/golfclubs/{newGolfCourse.GolfClubId}"); // Go back to the club's detail page
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding golf course: {ex.Message}", Severity.Error);
        }
    }

    private void GoBack()
    {
        // If we came from a specific club, go back there. Otherwise, go to the main clubs list.
        if (_preselectedClubId > 0)
        {
            NavigationManager.NavigateTo($"/golfclubs/{_preselectedClubId}");
        }
        else
        {
            NavigationManager.NavigateTo("/golfclubs");
        }
    }
}