@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GolfTrackerApp.Web.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="3" Class="pa-4 mt-4">
        <MudText Typo="Typo.h4" Class="mb-2">Forgot your password?</MudText>
        <MudText Typo="Typo.subtitle1" Class="mb-4">Enter your email.</MudText>

        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />

            <MudTextField 
                @bind-Value="Input.Email"
                Label="Email"
                Variant="Variant.Outlined"
                Class="mb-4"
                Immediate="true"
                AutoFocus="true"
                InputType="InputType.Email"
                For="@(() => Input.Email)" />

            <MudButton 
                ButtonType="ButtonType.Submit" 
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                Size="Size.Large"
                FullWidth="true">
                Reset password
            </MudButton>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email!);
        if (user is null || !await UserManager.IsEmailConfirmedAsync(user))
        {
            RedirectManager.RedirectToWithStatus("Account/ForgotPasswordConfirmation", 
                "Please check your email to reset your password.", 
                HttpContext);
            return;
        }

        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
