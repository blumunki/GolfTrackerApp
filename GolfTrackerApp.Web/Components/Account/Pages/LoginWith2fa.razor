@page "/Account/LoginWith2fa"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using GolfTrackerApp.Shared.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger

<PageTitle>Two-factor authentication</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="3" Class="pa-4 mt-4">
        <MudText Typo="Typo.h4" Class="mb-4">Two-factor authentication</MudText>
        
        @if (!string.IsNullOrEmpty(message))
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">@message</MudAlert>
        }

        <MudText Class="mb-4">Your login is protected with an authenticator app. Enter your authenticator code below.</MudText>

        <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <input type="hidden" name="RememberMe" value="@RememberMe" />
            <DataAnnotationsValidator />

            <MudTextField 
                @bind-Value="Input.TwoFactorCode"
                Label="Authenticator code"
                Variant="Variant.Outlined"
                Class="mb-3"
                Immediate="true"
                AutoFocus="true"
                autocomplete="off"
                For="@(() => Input.TwoFactorCode)" />

            <MudCheckBox T="bool"
                @bind-Value="Input.RememberMachine"
                Label="Remember this machine"
                Class="mb-4" 
                Color="Color.Primary" />

            <MudButton 
                ButtonType="ButtonType.Submit" 
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                Size="Size.Large"
                FullWidth="true"
                Class="mb-4">
                Log in
            </MudButton>
        </EditForm>

        <MudDivider Class="mb-4" />

        <MudText>
            Don't have access to your authenticator device? You can
            <MudLink Href="@($"Account/LoginWithRecoveryCode?ReturnUrl={ReturnUrl}")" Color="Color.Primary">
                log in with a recovery code
            </MudLink>.
        </MudText>
    </MudPaper>
</MudContainer>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }
}
