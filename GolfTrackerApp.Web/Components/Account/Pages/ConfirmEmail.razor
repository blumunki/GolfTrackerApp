@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GolfTrackerApp.Web.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm email</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="3" Class="pa-4 mt-4">
        <MudText Typo="Typo.h4" Class="mb-4">Confirm email</MudText>
        
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <MudAlert Severity="@(statusMessage.StartsWith("Error") ? Severity.Error : Severity.Success)"
                     Class="mb-4">
                @statusMessage
            </MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    private string? statusMessage;

    [Parameter, SupplyParameterFromQuery]
    public string? UserId { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? Code { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(UserId) || string.IsNullOrEmpty(Code))
        {
            RedirectManager.RedirectToWithStatus("Account/Login", 
                "Error: Invalid email confirmation link.", 
                HttpContext);
            return;
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", 
                "Error: Unable to load user.", 
                HttpContext);
            return;
        }

        var decodedCode = WebEncoders.Base64UrlDecode(Code);
        var result = await UserManager.ConfirmEmailAsync(user, Encoding.UTF8.GetString(decodedCode));
        statusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
    }
}
