@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GolfTrackerApp.Web.Data
@rendermode InteractiveServer

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Log in</MudText>

        <EditForm Model="Input" FormName="login" OnValidSubmit="LoginUser" method="post">
            <DataAnnotationsValidator />
            
            <MudTextField @bind-Value="Input.Email"
                         Label="Email"
                         Required="true"
                         RequiredError="Email is required"
                         InputType="InputType.Email" />

            <MudTextField @bind-Value="Input.Password"
                         Label="Password"
                         Required="true"
                         RequiredError="Password is required"
                         InputType="InputType.Password"
                         Class="mt-3" />

            <MudCheckBox T="bool" @bind-Value="Input.RememberMe" 
                        Label="Remember me?" 
                        Color="Color.Primary"
                        Class="mt-3" />

            <MudButton ButtonType="ButtonType.Submit" 
                      Variant="Variant.Filled" 
                      Color="Color.Primary"
                      FullWidth="true"
                      Size="Size.Large"
                      Class="mt-4">
                Log in
            </MudButton>

            <MudDivider Class="my-4"/>

            <ExternalLoginPicker />

            <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mt-4">
                <MudLink Href="Account/Register">Register as a new user</MudLink>
                <MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink>
            </MudStack>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">@errorMessage</MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is null)
        {
            return;
        }

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        if (HttpContext is null)
        {
            errorMessage = "Error: Authentication context not available.";
            return;
        }
        
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
