@page "/Account/ConfirmEmailChange"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GolfTrackerApp.Web.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm email change</PageTitle>

<h1>Confirm email change</h1>

<StatusMessage Message="@message" />

@code {
    private string? message;

    [Parameter, SupplyParameterFromQuery]
    public string? UserId { get; set; }
    
    [Parameter, SupplyParameterFromQuery]
    public string? Email { get; set; }
    
    [Parameter, SupplyParameterFromQuery]
    public string? Code { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(UserId) || string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Code))
        {
            RedirectManager.RedirectToWithStatus("Account/Manage/Email", 
                "Error: Invalid email change confirmation link.", 
                HttpContext);
            return;
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", 
                "Error: Unable to load user.", 
                HttpContext);
            return;
        }

        var decodedCode = WebEncoders.Base64UrlDecode(Code);
        var result = await UserManager.ChangeEmailAsync(user, Email, 
            Encoding.UTF8.GetString(decodedCode));
        if (!result.Succeeded)
        {
            message = "Error changing email.";
            return;
        }

        // In our UI email and user name are one and the same, so when we update the email
        // we need to update the user name.
        var setUserNameResult = await UserManager.SetUserNameAsync(user, Email);
        if (!setUserNameResult.Succeeded)
        {
            message = "Error changing user name.";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        message = "Thank you for confirming your email change.";
    }
}
