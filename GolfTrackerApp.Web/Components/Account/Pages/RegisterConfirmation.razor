@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GolfTrackerApp.Web.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="3" Class="pa-4 mt-4">
        <MudText Typo="Typo.h4" Class="mb-4">Register confirmation</MudText>

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">@statusMessage</MudAlert>
        }

        @if (emailConfirmationLink is not null)
        {
            <MudText Class="mb-4">
                This app does not currently have a real email sender registered, see 
                <MudLink Href="https://aka.ms/aspaccountconf" Target="_blank">these docs</MudLink>
                for how to configure a real email sender.
            </MudText>
            <MudText Class="mb-4">
                Normally this would be emailed: 
                <MudLink Href="@emailConfirmationLink">Click here to confirm your account</MudLink>
            </MudText>
        }
        else
        {
            <MudAlert Severity="Severity.Info">Please check your email to confirm your account.</MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        if (Email is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "No email address specified";
            return;
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }

    private async Task<bool> GetEmailConfirmationRequired()
    {
        var user = await UserManager.FindByEmailAsync(Email ?? string.Empty);
        if (user is null)
        {
            return false;
        }
        return !await UserManager.IsEmailConfirmedAsync(user);
    }
}
