@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GolfTrackerApp.Shared.Data

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="3" Class="pa-4 mt-4">
        <MudText Typo="Typo.h4" Class="mb-2">Reset password</MudText>
        <MudText Typo="Typo.subtitle1" Class="mb-4">Reset your password.</MudText>

        @if (!string.IsNullOrEmpty(Message))
        {
            <MudAlert Severity="Severity.Info" Class="mb-4">@Message</MudAlert>
        }

        @if (!string.IsNullOrEmpty(identityErrors))
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">@identityErrors</MudAlert>
        }

        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />

            <input type="hidden" name="Input.Code" value="@Input.Code" />

            <MudTextField 
                @bind-Value="Input.Email"
                Label="Email"
                Variant="Variant.Outlined"
                Class="mb-3"
                InputType="InputType.Email"
                Immediate="true"
                For="@(() => Input.Email)" />

            <MudTextField 
                @bind-Value="Input.Password"
                Label="Password"
                Variant="Variant.Outlined"
                InputType="InputType.Password"
                Class="mb-3"
                Immediate="true"
                For="@(() => Input.Password)" />

            <MudTextField 
                @bind-Value="Input.ConfirmPassword"
                Label="Confirm Password"
                Variant="Variant.Outlined"
                InputType="InputType.Password"
                Class="mb-4"
                Immediate="true"
                For="@(() => Input.ConfirmPassword)" />

            <MudButton 
                ButtonType="ButtonType.Submit" 
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                Size="Size.Large"
                FullWidth="true">
                Reset
            </MudButton>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private string? code;
    private string? email;
    private string? identityErrors;
    [Parameter] public string? Message { get; set; }
    private InputModel Input { get; set; } = new();
    
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        code = code ?? string.Empty;
        var decoded = WebEncoders.Base64UrlDecode(code);
        var parameters = Encoding.UTF8.GetString(decoded).Split('&');
        if (parameters.Length != 2)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
            return;
        }

        email = parameters[0];
        var user = await UserManager.FindByEmailAsync(email);
        if (user is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
            return;
        }

        await base.OnInitializedAsync();
    }

    // Remove override keyword since this is an event handler
    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(email ?? string.Empty);
        if (user is null)
        {
            identityErrors = "Invalid email address";
            return;
        }

        var result = await UserManager.ResetPasswordAsync(user, code!, Input.Password!);
        if (!result.Succeeded)
        {
            identityErrors = string.Join(" ", result.Errors.Select(e => e.Description));
            return;
        }
        
        RedirectManager.RedirectToWithStatus("Account/ResetPasswordConfirmation", 
            "Your password has been reset.", 
            HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
