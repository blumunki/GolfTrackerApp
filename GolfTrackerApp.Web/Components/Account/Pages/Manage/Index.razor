@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using GolfTrackerApp.Web.Data

@* @inject UserManager<ApplicationUser> UserManager *@
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

@inherits AccountPageBase

<PageTitle>Profile</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <StatusMessage />
    </MudItem>

    <MudItem xs="12">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="Username" Value="@username" Disabled="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.PhoneNumber" Label="Phone number" />
                    <ValidationMessage For="() => Input.PhoneNumber" />
                </MudItem>
                <MudItem xs="12">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnAuthenticatedInitializedAsync()
    {
        if (CurrentUser is null)
        {
            return;
        }

        username = await UserManager.GetUserNameAsync(CurrentUser);
        phoneNumber = await UserManager.GetPhoneNumberAsync(CurrentUser);

        Input.PhoneNumber ??= phoneNumber;
    }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is null)
        {
            return;
        }

        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        
        if (user is null)
        {
            return;
        }

        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
