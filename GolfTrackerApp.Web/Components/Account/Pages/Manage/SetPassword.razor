@page "/Account/Manage/SetPassword"
@rendermode InteractiveServer
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using GolfTrackerApp.Shared.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Set password</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Set your password</MudText>

        <StatusMessage Message="@message" />

        <MudAlert Severity="Severity.Info" Class="mb-4">
            You do not have a local username/password for this site. Add a local
            account so you can log in without an external login.
        </MudAlert>

        <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />

            <MudStack Spacing="3">
                <MudTextField 
                    T="string" 
                    Label="New password"
                    @bind-Value="Input.NewPassword"
                    InputType="InputType.Password"
                    Variant="Variant.Outlined"
                    For="@(() => Input.NewPassword)" />

                <MudTextField 
                    T="string" 
                    Label="Confirm password"
                    @bind-Value="Input.ConfirmPassword"
                    InputType="InputType.Password"
                    Variant="Variant.Outlined"
                    For="@(() => Input.ConfirmPassword)" />

                <MudButton 
                    ButtonType="ButtonType.Submit"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    Size="Size.Large"
                    FullWidth="true"
                    StartIcon="@Icons.Material.Filled.Password">
                    Set password
                </MudButton>
            </MudStack>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private string? message;
    private InputModel Input { get; set; } = new InputModel();

    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            NavigationManager.NavigateTo("Account/Manage/ChangePassword");
            return;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        NavigationManager.NavigateTo("Account/Manage/ChangePassword");
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
