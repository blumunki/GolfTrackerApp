@page "/Account/Manage/ChangePassword"
@rendermode InteractiveServer
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using GolfTrackerApp.Web.Data
@using Microsoft.AspNetCore.Authorization

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager



<PageTitle>Change password</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Change password</MudText>

        @if (!string.IsNullOrEmpty(message))
        {
            <MudAlert Severity="@(message.StartsWith("Error") ? Severity.Error : Severity.Success)" 
                     Class="mb-4">
                @message
            </MudAlert>
        }

        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />

            <MudTextField 
                @bind-Value="Input.OldPassword"
                Label="Current password"
                Variant="Variant.Outlined"
                InputType="InputType.Password"
                Class="mb-3"
                For="@(() => Input.OldPassword)" />

            <MudTextField 
                @bind-Value="Input.NewPassword"
                Label="New password"
                Variant="Variant.Outlined"
                InputType="InputType.Password"
                Class="mb-3"
                For="@(() => Input.NewPassword)" />

            <MudTextField 
                @bind-Value="Input.ConfirmPassword"
                Label="Confirm new password"
                Variant="Variant.Outlined"
                InputType="InputType.Password"
                Class="mb-4"
                For="@(() => Input.ConfirmPassword)" />

            <MudButton 
                ButtonType="ButtonType.Submit" 
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                Size="Size.Large"
                FullWidth="true">
                Update password
            </MudButton>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private ApplicationUser user = default!;
    private string? message;
    private InputModel Input { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            NavigationManager.NavigateTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user,
            Input.OldPassword!, Input.NewPassword!);
        
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(" ", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        message = "Your password has been changed.";
        Input = new();
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string? OldPassword { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
