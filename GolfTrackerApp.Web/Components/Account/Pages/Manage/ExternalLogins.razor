@page "/Account/Manage/ExternalLogins"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GolfTrackerApp.Web.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IUserStore<ApplicationUser> UserStore
@inject IdentityRedirectManager RedirectManager

<PageTitle>Manage your external logins</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Manage your external logins</MudText>

        <StatusMessage />

        @if (currentLogins?.Count > 0)
        {
            <MudText Typo="Typo.h6" Class="mb-4">Registered Logins</MudText>
            <MudTable Items="currentLogins" Hover="true" Class="mb-6">
                <HeaderContent>
                    <MudTh>Provider</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.ProviderDisplayName</MudTd>
                    <MudTd>
                        @if (showRemoveButton)
                        {
                            <form @formname="@($"remove-login-{context.LoginProvider}")" @onsubmit="OnSubmitAsync" method="post">
                                <AntiforgeryToken />
                                <input type="hidden" name="@nameof(LoginProvider)" value="@context.LoginProvider" />
                                <input type="hidden" name="@nameof(ProviderKey)" value="@context.ProviderKey" />
                                <MudButton 
                                    ButtonType="ButtonType.Submit"
                                    Variant="Variant.Text" 
                                    Color="Color.Error"
                                    StartIcon="@Icons.Material.Filled.RemoveCircle">
                                    Remove
                                </MudButton>
                            </form>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }

        @if (otherLogins?.Count > 0)
        {
            <MudDivider Class="mb-4" />
            <MudText Typo="Typo.h6" Class="mb-4">Add another service to log in</MudText>

            <form class="form-horizontal" action="Account/Manage/LinkExternalLogin" method="post">
                <AntiforgeryToken />
                <MudStack Row="true" Spacing="2">
                    @foreach (var provider in otherLogins)
                    {
                        <MudButton 
                            ButtonType="ButtonType.Submit"
                            Variant="Variant.Filled" 
                            Color="Color.Primary"
                            name="Provider"
                            value="@provider.Name"
                            StartIcon="@Icons.Material.Filled.Add">
                            @provider.DisplayName
                        </MudButton>
                    }
                </MudStack>
            </form>
        }
    </MudPaper>
</MudContainer>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private IList<UserLoginInfo>? currentLogins;
    private IList<AuthenticationScheme>? otherLogins;
    private bool showRemoveButton;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private string? LoginProvider { get; set; }

    [SupplyParameterFromForm]
    private string? ProviderKey { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    public const string LinkLoginCallbackAction = "/Account/Manage/LinkLoginCallback";

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        currentLogins = await UserManager.GetLoginsAsync(user);
        otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
            .Where(auth => currentLogins.All(ul => auth.Name != ul.LoginProvider))
            .ToList();

        string? passwordHash = null;
        if (UserStore is IUserPasswordStore<ApplicationUser> userPasswordStore)
        {
            passwordHash = await userPasswordStore.GetPasswordHashAsync(user, HttpContext.RequestAborted);
        }

        showRemoveButton = passwordHash is not null || currentLogins.Count > 1;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
        }
    }

    private async Task OnSubmitAsync()
    {
        var result = await UserManager.RemoveLoginAsync(user, LoginProvider!, ProviderKey!);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not removed.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("The external login was removed.", HttpContext);
    }

    private async Task OnGetLinkLoginCallbackAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        if (info is null)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Could not load external login info.", HttpContext);
        }

        if (info is null)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login information was not available.", HttpContext);
            return;
        }

        var result = await UserManager.AddLoginAsync(user, info);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not added. External logins can only be associated with one account.", HttpContext);
        }

        // Clear the existing external cookie to ensure a clean login process
        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        RedirectManager.RedirectToCurrentPageWithStatus("The external login was added.", HttpContext);
    }

    private async Task OnSubmitAddLoginAsync()
    {
        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            message = "Error loading external login information.";
            return;
        }

        var result = await UserManager.AddLoginAsync(user, info);
        if (!result.Succeeded)
        {
            message = $"Error: {string.Join(" ", result.Errors.Select(e => e.Description))}";
            return;
        }

        // Reset state
        message = null;
        await OnInitializedAsync();
    }
}
