@page "/Account/Manage/TwoFactorAuthentication"
@rendermode InteractiveServer
@attribute [Authorize]

@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Identity
@using GolfTrackerApp.Shared.Data
@using Microsoft.AspNetCore.Authorization

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Two-factor authentication (2FA)</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Two-factor authentication (2FA)</MudText>

        <StatusMessage Message="@message" />

        @if (canTrack)
        {
            if (is2faEnabled)
            {
                <MudStack Spacing="3">
                    @if (recoveryCodesLeft == 0)
                    {
                        <MudAlert Severity="Severity.Error">
                            <MudText Typo="Typo.body1" Style="font-weight: 500">You have no recovery codes left.</MudText>
                            <MudText>You must <MudLink Href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</MudLink> before you can log in with a recovery code.</MudText>
                        </MudAlert>
                    }
                    else if (recoveryCodesLeft == 1)
                    {
                        <MudAlert Severity="Severity.Error">
                            <MudText Typo="Typo.body1" Style="font-weight: 500">You have 1 recovery code left.</MudText>
                            <MudText>You can <MudLink Href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</MudLink>.</MudText>
                        </MudAlert>
                    }
                    else if (recoveryCodesLeft <= 3)
                    {
                        <MudAlert Severity="Severity.Warning">
                            <MudText Typo="Typo.body1" Style="font-weight: 500">You have @recoveryCodesLeft recovery codes left.</MudText>
                            <MudText>You should <MudLink Href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</MudLink>.</MudText>
                        </MudAlert>
                    }

                    <MudStack Row="true" Spacing="2">
                        @if (isMachineRemembered)
                        {
                            <form style="display: inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                                <AntiforgeryToken />
                                <MudButton 
                                    ButtonType="ButtonType.Submit"
                                    Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    StartIcon="@Icons.Material.Filled.FormatClear">
                                    Forget this browser
                                </MudButton>
                            </form>
                        }

                        <MudButton 
                            Href="Account/Manage/Disable2fa"
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.NoEncryption">
                            Disable 2FA
                        </MudButton>

                        <MudButton 
                            Href="Account/Manage/GenerateRecoveryCodes"
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.RestartAlt">
                            Reset recovery codes
                        </MudButton>
                    </MudStack>
                </MudStack>
            }

            <MudDivider Class="my-6" />
            
            <MudText Typo="Typo.h5" Class="mb-4">Authenticator app</MudText>
            
            @if (!hasAuthenticator)
            {
                <MudButton 
                    Href="Account/Manage/EnableAuthenticator"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.AppSettingsAlt">
                    Add authenticator app
                </MudButton>
            }
            else
            {
                <MudStack Row="true" Spacing="2">
                    <MudButton 
                        Href="Account/Manage/EnableAuthenticator"
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.AppSettingsAlt">
                        Set up authenticator app
                    </MudButton>

                    <MudButton 
                        Href="Account/Manage/ResetAuthenticator"
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.RestartAlt">
                        Reset authenticator app
                    </MudButton>
                </MudStack>
            }
        }
        else
        {
            <MudAlert Severity="Severity.Error">
                <MudText Typo="Typo.body1" Style="font-weight: 500">Privacy and cookie policy have not been accepted.</MudText>
                <MudText>You must accept the policy before you can enable two factor authentication.</MudText>
            </MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    private ApplicationUser user = default!;
    private bool canTrack;
    private bool hasAuthenticator;
    private int recoveryCodesLeft;
    private bool is2faEnabled;
    private bool isMachineRemembered;
    private string? message;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await UserAccessor.GetRequiredUserAsync(HttpContext);
            canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
            hasAuthenticator = await UserManager.GetAuthenticatorKeyAsync(user) is not null;
            is2faEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
            
            // Move the problematic call to a separate method that can be retried if needed
            await UpdateTwoFactorRememberedStatusAsync();
            
            recoveryCodesLeft = await UserManager.CountRecoveryCodesAsync(user);
        }
        catch (InvalidOperationException)
        {
            // If we can't access the HttpContext, redirect to login
            NavigationManager.NavigateTo("Account/Login", forceLoad: true);
        }
    }

    private async Task UpdateTwoFactorRememberedStatusAsync()
    {
        try
        {
            var principal = await SignInManager.CreateUserPrincipalAsync(user);
            isMachineRemembered = await SignInManager.IsTwoFactorClientRememberedAsync(user);
        }
        catch (InvalidOperationException)
        {
            // If we can't check the 2FA remembered status, assume it's not remembered
            isMachineRemembered = false;
        }
    }

    private async Task OnSubmitForgetBrowserAsync()
    {
        try 
        {
            await SignInManager.ForgetTwoFactorClientAsync();
            message = "The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code.";
            isMachineRemembered = false;
            StateHasChanged();
        }
        catch (InvalidOperationException)
        {
            message = "Error: Could not forget the browser. Please try logging out and back in.";
            StateHasChanged();
        }
    }
}
