@page "/Account/Manage/EnableAuthenticator"

@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using GolfTrackerApp.Shared.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger

<PageTitle>Configure authenticator app</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    @if (recoveryCodes is not null)
    {
        <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
    }
    else
    {
        <MudPaper Elevation="3" Class="pa-4">
            <MudText Typo="Typo.h4" Class="mb-4">Configure authenticator app</MudText>

            @if (!string.IsNullOrEmpty(message))
            {
                <MudAlert Severity="@(message.StartsWith("Error") ? Severity.Error : Severity.Success)" 
                         Class="mb-4">
                    @message
                </MudAlert>
            }

            <MudText Typo="Typo.body1" Class="mb-4">To use an authenticator app go through the following steps:</MudText>

            <MudPaper Elevation="0" Class="pa-0">
                <MudStack>
                    <MudPaper Elevation="0" Class="d-flex gap-4">
                        <MudIcon Icon="@Icons.Material.Filled.GetApp" />
                        <MudText>
                            Download a two-factor authenticator app like Microsoft Authenticator for
                            <MudLink Href="https://go.microsoft.com/fwlink/?Linkid=825072" Target="_blank">Android</MudLink> and
                            <MudLink Href="https://go.microsoft.com/fwlink/?Linkid=825073" Target="_blank">iOS</MudLink> or
                            Google Authenticator for
                            <MudLink Href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en" Target="_blank">Android</MudLink> and
                            <MudLink Href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8" Target="_blank">iOS</MudLink>.
                        </MudText>
                    </MudPaper>

                    <MudPaper Elevation="0" Class="d-flex gap-4">
                        <MudIcon Icon="@Icons.Material.Filled.QrCode" />
                        <MudStack>
                            <MudText>
                                Scan the QR Code or enter this key <MudText Inline="true" Style="font-family: monospace; background-color: var(--mud-palette-background-grey);" Class="pa-1">@sharedKey</MudText> into your two factor authenticator app. 
                                Spaces and casing do not matter.
                            </MudText>
                            <MudAlert Severity="Severity.Info">
                                Learn how to <MudLink Href="https://go.microsoft.com/fwlink/?Linkid=852423" Target="_blank">enable QR code generation</MudLink>.
                            </MudAlert>
                            <div data-url="@authenticatorUri"></div>
                        </MudStack>
                    </MudPaper>

                    <MudPaper Elevation="0" Class="d-flex gap-4">
                        <MudIcon Icon="@Icons.Material.Filled.Pin" />
                        <MudStack>
                            <MudText>
                                Once you have scanned the QR code or input the key above, your two factor authentication app will provide you
                                with a unique code. Enter the code in the confirmation box below.
                            </MudText>

                            <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                                <DataAnnotationsValidator />

                                <MudTextField 
                                    @bind-Value="Input.Code"
                                    Label="Verification Code"
                                    Variant="Variant.Outlined"
                                    Class="mb-4"
                                    Immediate="true"
                                    For="@(() => Input.Code)" />

                                <MudButton 
                                    ButtonType="ButtonType.Submit" 
                                    Variant="Variant.Filled" 
                                    Color="Color.Primary" 
                                    Size="Size.Large"
                                    StartIcon="@Icons.Material.Filled.VerifiedUser"
                                    FullWidth="true">
                                    Verify
                                </MudButton>
                            </EditForm>
                        </MudStack>
                    </MudPaper>
                </MudStack>
            </MudPaper>
        </MudPaper>
    }
</MudContainer>

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    private string? message;
    private ApplicationUser user = default!;
    private string? sharedKey;
    private string? authenticatorUri;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        await LoadSharedKeyAndQrCodeUriAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        // Strip spaces and hyphens
        var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

        var is2faTokenValid = await UserManager.VerifyTwoFactorTokenAsync(
            user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if (!is2faTokenValid)
        {
            message = "Error: Verification code is invalid.";
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(user, true);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has enabled 2FA with an authenticator app.", userId);

        message = "Your authenticator app has been verified.";

        if (await UserManager.CountRecoveryCodesAsync(user) == 0)
        {
            recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        }
        else
        {
            RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication", message, HttpContext);
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)
    {
        // Load the authenticator key & QR code URI to display on the form
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
    }

    private string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("Microsoft.AspNetCore.Identity.UI"),
            UrlEncoder.Encode(email),
            unformattedKey);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Verification Code")]
        public string Code { get; set; } = "";
    }
}
