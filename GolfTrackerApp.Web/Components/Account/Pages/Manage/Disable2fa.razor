@page "/Account/Manage/Disable2fa"

@using Microsoft.AspNetCore.Identity
@using GolfTrackerApp.Shared.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<Disable2fa> Logger

<PageTitle>Disable two-factor authentication (2FA)</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Disable two-factor authentication (2FA)</MudText>

        <StatusMessage />

        <MudAlert Severity="Severity.Warning" Icon="@Icons.Material.Filled.Warning" Class="mb-4">
            <MudText Typo="Typo.body1" Style="font-weight: 500" Class="mb-2">
                This action only disables 2FA.
            </MudText>
            <MudText Typo="Typo.body1">
                Disabling 2FA does not change the keys used in authenticator apps. If you wish to change the key
                used in an authenticator app you should 
                <MudLink Href="Account/Manage/ResetAuthenticator" Color="Color.Warning">reset your authenticator keys</MudLink>.
            </MudText>
        </MudAlert>

        <form @formname="disable-2fa" @onsubmit="OnSubmitAsync" method="post">
            <AntiforgeryToken />
            <MudButton 
                ButtonType="ButtonType.Submit" 
                Variant="Variant.Filled" 
                Color="Color.Error" 
                Size="Size.Large"
                StartIcon="@Icons.Material.Filled.SecurityUpdate"
                FullWidth="true">
                Disable 2FA
            </MudButton>
        </form>
    </MudPaper>
</MudContainer>

@code {
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        if (HttpMethods.IsGet(HttpContext.Request.Method) && !await UserManager.GetTwoFactorEnabledAsync(user))
        {
            throw new InvalidOperationException("Cannot disable 2FA for user as it's not currently enabled.");
        }
    }

    private async Task OnSubmitAsync()
    {
        var disable2faResult = await UserManager.SetTwoFactorEnabledAsync(user, false);
        if (!disable2faResult.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred disabling 2FA.");
        }

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has disabled 2fa.", userId);
        RedirectManager.RedirectToWithStatus(
            "Account/Manage/TwoFactorAuthentication",
            "2fa has been disabled. You can reenable 2fa when you setup an authenticator app",
            HttpContext);
    }
}
