@page "/Account/Manage/ResetAuthenticator"

@using Microsoft.AspNetCore.Identity
@using GolfTrackerApp.Web.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitle>Reset authenticator key</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Reset authenticator key</MudText>

        <StatusMessage />

        <MudAlert Severity="Severity.Warning" Class="mb-4">
            <MudText Style="font-weight: 500" Class="mb-2">
                If you reset your authenticator key your authenticator app will not work until you reconfigure it.
            </MudText>
            <MudText>
                This process disables 2FA until you verify your authenticator app.
                If you do not complete your authenticator app configuration you may lose access to your account.
            </MudText>
        </MudAlert>

        <form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
            <AntiforgeryToken />
            <MudButton 
                ButtonType="ButtonType.Submit"
                Variant="Variant.Filled"
                Color="Color.Error"
                StartIcon="@Icons.Material.Filled.RestartAlt">
                Reset authenticator key
            </MudButton>
        </form>
    </MudPaper>
</MudContainer>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task OnSubmitAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", userId);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToWithStatus(
            "Account/Manage/EnableAuthenticator",
            "Your authenticator app key has been reset, you will need to configure your authenticator app using the new key.",
            HttpContext);
    }
}
