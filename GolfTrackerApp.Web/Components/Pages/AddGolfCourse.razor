@page "/golfcourses/add"
@attribute [Authorize]
@inject IGolfCourseService GolfCourseService
@inject IGolfClubService GolfClubService
@inject NavigationManager NavigationManager
@using GolfTrackerApp.Web.Models
@using GolfTrackerApp.Web.Services
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer

<PageTitle>Add Golf Course</PageTitle>

<h3>Add New Golf Course</h3>

<EditForm Model="@newGolfCourse" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="golfClubId" class="form-label">Golf Club:</label>
        @if (golfClubs == null)
        {
            <p><em>Loading clubs...</em></p>
        }
        else
        {
            <InputSelect @bind-Value="newGolfCourse.GolfClubId" class="form-select">
                <option value="0">-- Select Golf Club --</option>
                @foreach (var club in golfClubs)
                {
                    <option value="@club.GolfClubId">@club.Name</option>
                }
            </InputSelect>
        }
        <ValidationMessage For="@(() => newGolfCourse.GolfClubId)" />
    </div>

    <div class="mb-3">
        <label for="name" class="form-label">Course Name:</label>
        <InputText id="name" @bind-Value="newGolfCourse.Name" class="form-control" />
        <ValidationMessage For="@(() => newGolfCourse.Name)" />
    </div>

    <div class="mb-3">
        <label for="numberOfHoles" class="form-label">Number of Holes:</label>
        <InputNumber id="numberOfHoles" @bind-Value="newGolfCourse.NumberOfHoles" class="form-control" />
        <ValidationMessage For="@(() => newGolfCourse.NumberOfHoles)" />
    </div>

    <div class="mb-3">
        <label for="defaultPar" class="form-label">Default Par:</label>
        <InputNumber id="defaultPar" @bind-Value="newGolfCourse.DefaultPar" class="form-control" />
        <ValidationMessage For="@(() => newGolfCourse.DefaultPar)" />
    </div>

    <button type="submit" class="btn btn-success" disabled="@(newGolfCourse.GolfClubId == 0)">Save Golf Course</button>
    <button type="button" class="btn btn-secondary" @onclick="GoToListPage">Cancel</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger mt-3">@errorMessage</p>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <p class="text-success mt-3">@successMessage</p>
}

@code {
    private GolfCourse newGolfCourse = new() { GolfClubId = 0 }; // Initialize GolfClubId to 0 for "Select"
    private List<GolfClub>? golfClubs;
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        golfClubs = await GolfClubService.GetAllGolfClubsAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (newGolfCourse.GolfClubId == 0) // Basic validation for dropdown
        {
            errorMessage = "Please select a Golf Club.";
            return;
        }
        errorMessage = null;
        successMessage = null;
        try
        {
            await GolfCourseService.AddGolfCourseAsync(newGolfCourse);
            successMessage = "Golf course added successfully!";
            newGolfCourse = new() { GolfClubId = 0 }; // Clear the form
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding golf course: {ex.Message}";
        }
    }

    private void GoToListPage()
    {
        NavigationManager.NavigateTo("/golfcourses");
    }
}