@page "/rounds/{RoundId:int}"
@attribute [Authorize]
@rendermode InteractiveServer

@inject IRoundService RoundService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILogger<RoundDetails> Logger

@using GolfTrackerApp.Web.Models
@using GolfTrackerApp.Web.Data
@using GolfTrackerApp.Web.Components.Shared
@using GolfTrackerApp.Web.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using Microsoft.AspNetCore.Authorization


<PageTitle>Round Details - @(round?.DatePlayed.ToShortDateString() ?? "")</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (round is null)
{
    <MudAlert Severity="Severity.Error">Round not found.</MudAlert>
}
else
{
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4"></MudBreadcrumbs>

    <MudPaper Class="pa-4 mb-4" Elevation="0">
        <MudText Typo="Typo.h5">@round.GolfCourse!.Name</MudText>
        <MudText Typo="Typo.body1" Color="Color.Dark">@round.GolfCourse!.GolfClub!.Name</MudText>
        <MudText Typo="Typo.subtitle2" Class="mt-1">@round.DatePlayed.ToString("dddd, MMMM d, yyyy")</MudText>
    </MudPaper>

    <MudSimpleTable Hover="true" Dense="true" Elevation="1">
        <thead>
            <tr>
                <th>Player</th>
                @foreach (var hole in _playedHoles.OrderBy(h => h.HoleNumber))
                {
                    <th class="text-center">@hole.HoleNumber<br /><small>Par @hole.Par</small></th>
                }
                <th class="text-center">Total</th>
                <th class="text-center">+/- Par</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in round.RoundPlayers.Select(rp => rp.Player).OrderBy(p => p!.LastName))
            {
                <tr>
                    <td><strong>@player!.FirstName @player.LastName</strong></td>
                    @foreach (var hole in _playedHoles.OrderBy(h => h.HoleNumber))
                    {
                        var score = round.Scores.FirstOrDefault(s => s.PlayerId == player.PlayerId && s.HoleId == hole.HoleId);
                        <td class="text-center">@score?.Strokes</td>
                    }
                    <td class="text-center">
                        <strong>@round.Scores.Where(s => s.PlayerId == player.PlayerId).Sum(s => s.Strokes)</strong>
                    </td>
                    <td class="text-center">
                        <strong>
                            @{
                                int totalStrokes = round.Scores.Where(s => s.PlayerId == player.PlayerId).Sum(s => s.Strokes);
                                int totalPar = _playedHoles.Sum(h => h.Par);
                                int scoreVsPar = totalStrokes - totalPar;
                                @(scoreVsPar > 0 ? $"+{scoreVsPar}" : (scoreVsPar == 0 ? "E" : scoreVsPar.ToString()))
                            }
                        </strong>
                    </td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>

    <MudButton Variant="Variant.Outlined" OnClick="@(() => NavigationManager.NavigateTo("/rounds"))" Class="mt-4">Back to Rounds List</MudButton>
}

@code {
    [Parameter]
    public int RoundId { get; set; }

    private Round? round;
    private bool isLoading = true;
    private List<Hole> _playedHoles = new();
    private List<BreadcrumbItem> _breadcrumbs = new();

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        try
        {
            round = await RoundService.GetRoundByIdAsync(RoundId);
            if (round is not null)
            {
                // VVV --- THIS IS THE MAIN FIX --- VVV
                // We add .Where(h => h is not null) to filter out any potential nulls
                _playedHoles = round.Scores
                    .Select(s => s.Hole)
                    .Where(h => h is not null)
                    .Cast<Hole>()
                    .DistinctBy(h => h.HoleId)
                    .ToList();

                _breadcrumbs = new List<BreadcrumbItem>
                {
                    new BreadcrumbItem("Rounds", href: "/rounds"),
                    new BreadcrumbItem(round!.DatePlayed.ToString("dd/MM/yyyy"), href: null, disabled: true)
                };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading round {RoundId}", RoundId);
            Snackbar.Add("Error loading round details.", Severity.Error);
        }
        isLoading = false;
    }

    private void GoBackToList()
    {
        NavigationManager.NavigateTo("/rounds");
    }
}