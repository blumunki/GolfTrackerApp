@page "/rounds"
@attribute [Authorize] // Or specific roles
@inject IRoundService RoundService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider // To get current user
@inject ISnackbar Snackbar
@using GolfTrackerApp.Web.Models
@using GolfTrackerApp.Web.Services
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@rendermode InteractiveServer

<PageTitle>Golf Rounds</PageTitle>
<MudText Typo="Typo.h4" GutterBottom="true">Golf Rounds</MudText>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (rounds is null || !rounds.Any())
{
    <MudText>No rounds found. Use the "Record New Round" link in the menu to get started.</MudText>
}
else
{
    <MudTable Items="@rounds.OrderByDescending(r => r.DatePlayed)" Hover="true" Striped="true" Dense="true" Class="mt-4" Elevation="1">
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Course</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Players</MudTh>
            <MudTh Style="text-align:right">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.DatePlayed.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Course">@($"{context.GolfCourse?.GolfClub?.Name} - {context.GolfCourse?.Name}")</MudTd>
            <MudTd DataLabel="Type">@context.RoundType</MudTd>
            <MudTd DataLabel="Players">@context.RoundPlayers.Count</MudTd>
            <MudTd Style="text-align:right">
                <MudTooltip Text="View Details">
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" OnClick="@(() => ViewRoundDetails(context.RoundId))" />
                </MudTooltip>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private List<Round>? rounds;
    private bool isLoading = true;
    private string _currentUserId = string.Empty;
    private bool _isCurrentUserAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            _currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
            _isCurrentUserAdmin = user.IsInRole("Admin");
            
            try
            {
                rounds = await RoundService.GetAllRoundsAsync(_currentUserId, _isCurrentUserAdmin);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error loading rounds: {ex.Message}", Severity.Error);
            }
        }
        
        isLoading = false;
    }

    private void ViewRoundDetails(int roundId)
    {
        NavigationManager.NavigateTo($"/rounds/{roundId}");
    }
}