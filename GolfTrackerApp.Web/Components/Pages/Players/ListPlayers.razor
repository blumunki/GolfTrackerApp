@page "/players"
@attribute [Authorize] // Or specific roles
@inject IPlayerService PlayerService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime // Keep this if you used the confirm dialog for delete
@inject AuthenticationStateProvider AuthenticationStateProvider
@using GolfTrackerApp.Web.Models
@using Microsoft.AspNetCore.Authorization
@using GolfTrackerApp.Web.Services
@rendermode InteractiveServer

<PageTitle>Players</PageTitle>

<h1>Players</h1>

<p>
    <button class="btn btn-primary" @onclick="GoToAddPlayerPage">Add New Player</button>
</p>


@if (players == null && !isLoading) // Added !isLoading check
{
    <p><em>Loading...</em></p>
}
else if (players == null || !players.Any()) // players can be null if service call failed
{
    <p><em>No players found.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Handicap</th>
                <th>User Type</th>
                <th>Registered Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in players)
            {
                <tr>
                    <td>@player.FirstName @player.LastName</td>
                    <td>@(player.Handicap.HasValue ? player.Handicap.Value.ToString("N1") : "N/A")</td>
                    <td>@(string.IsNullOrEmpty(player.ApplicationUserId) ? "Managed" : "Registered")</td>
                    <td>@(player.ApplicationUser?.Email ?? "N/A")</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditPlayer(player.PlayerId)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => PrepareDeletePlayer(player)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (playerToDelete != null)
{
    @* Placeholder for a proper modal. For now, the JS confirm is in PrepareDeletePlayer *@
    <div class="modal fade show" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="() => playerToDelete = null"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete player: @playerToDelete.FirstName @playerToDelete.LastName?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => playerToDelete = null">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="() => DeletePlayerConfirmed(playerToDelete!.PlayerId)">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    private List<Player>? players;
    private bool isLoading = true; // Added for better loading state
    private Player? playerToDelete; // For delete confirmation
    private string _currentUserId = string.Empty;
    private bool _isCurrentUserAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            _currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            _isCurrentUserAdmin = user.IsInRole("Admin");
        }
        else
        {
            // Handle unauthenticated user access if page isn't fully protected by [Authorize]
            // or if different behavior is needed. For [Authorize] pages, this block might not be hit.
            NavigationManager.NavigateTo("Account/Login", forceLoad: true); // Redirect if not authenticated
            return;
        }

        try
        {
            if (!string.IsNullOrEmpty(_currentUserId))
            {
                players = await PlayerService.GetAllPlayersAsync(_currentUserId, _isCurrentUserAdmin);
            }
            else if (_isCurrentUserAdmin) // An admin might not have a typical user ID if it's a system state
            {
                players = await PlayerService.GetAllPlayersAsync(string.Empty, true); // Or handle admin differently
            }
            else {
                players = new List<Player>(); // No user, not admin, show empty or handle error
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading players: {ex.Message}"); // Replace with proper logging
            // Optionally set an error message to display in the UI
        }
        isLoading = false;
    }

    private void GoToAddPlayerPage()
    {
        NavigationManager.NavigateTo("/players/add");
    }

    private void EditPlayer(int playerId)
    {
        NavigationManager.NavigateTo($"/players/edit/{playerId}");
    }

    private void PrepareDeletePlayer(Player player)
    {
        playerToDelete = player;
        // The JS confirm approach has been moved to a Blazor modal example below for better UI.
        // If you prefer JS confirm, uncomment the JSRuntime version and remove the modal HTML.
        // StateHasChanged(); // To show the modal
    }

    private async Task DeletePlayerConfirmed(int playerId)
    {
        if (playerToDelete == null || playerToDelete.PlayerId != playerId) return; // Safety check

        try
        {
            await PlayerService.DeletePlayerAsync(playerId);
            // VVV THIS LINE IS UPDATED VVV
            players = await PlayerService.GetAllPlayersAsync(_currentUserId, _isCurrentUserAdmin); // Refresh list with user context
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting player: {ex.Message}"); // Replace with proper logging
            // Optionally set an error message to display in the UI
            // For example: errorMessage = $"Error deleting player: {ex.Message}"; (and define errorMessage field)
        }
        playerToDelete = null; // Close modal / reset state
        StateHasChanged(); // Refresh UI
    }

    // If you were using the JS confirm:
    // @inject IJSRuntime JSRuntime // Make sure this is injected at the top
    // private async Task DeletePlayerUsingJSConfirm(Player player)
    // {
    //     if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {player.FirstName} {player.LastName}? This action cannot be undone."))
    //     {
    //         await DeletePlayerConfirmed(player.PlayerId);
    //     }
    // }
}