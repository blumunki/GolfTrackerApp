@page "/players/add"
@attribute [Authorize(Roles = "Admin")]
@inject IPlayerService PlayerService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject ILogger<AddPlayer> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@using GolfTrackerApp.Web.Services
@using GolfTrackerApp.Web.Models
@using GolfTrackerApp.Web.Data
@using GolfTrackerApp.Web.Components.Pages.Players
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@rendermode InteractiveServer

<PageTitle>Add New Player</PageTitle>
<h3>Add New Player</h3>

@if (isInitialized && string.IsNullOrWhiteSpace(initializationError))
{
    <PlayerFormComponent PlayerModel="@newPlayer"
                         OnSubmitForm="HandleAddPlayer"
                         OnCancelForm="HandleCancel"
                         SubmitButtonText="Create Player" />
}
else if (!string.IsNullOrWhiteSpace(initializationError))
{
    <div class="alert alert-danger">@initializationError</div>
    <p><a href="/players" class="btn btn-secondary">Back to Players List</a></p>
}
else
{
    <p><em>Initializing form... Please wait.</em></p>
}


@if (!string.IsNullOrEmpty(infoMessage))
{
    <div class="alert alert-info mt-3">@infoMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage) && string.IsNullOrWhiteSpace(initializationError))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private Player newPlayer = new(); // newPlayer instance is created here
    private string? errorMessage;
    private string? infoMessage;
    private string _currentUserId = string.Empty; // Will hold the logged-in user's ID
    private bool isInitialized = false;
    private string? initializationError;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            _currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
            if (string.IsNullOrWhiteSpace(_currentUserId))
            {
                initializationError = "CRITICAL: Current user ID could not be determined. Please ensure you are properly logged in with a valid user identifier. Cannot add player.";
                Logger.LogError("Current user ID is null, empty, or whitespace in AddPlayer.razor after authentication.");
            }
            else
            {
                // VVV KEY CHANGE IS HERE VVV
                // Pre-populate CreatedByApplicationUserId for the newPlayer model instance
                // This happens BEFORE the form is fully rendered and available for submission.
                newPlayer.CreatedByApplicationUserId = _currentUserId;
                initializationError = null; // Clear any potential previous error if this stage is reached.
            }
        }
        else
        {
            initializationError = "User not authenticated. Redirecting to login.";
            Logger.LogWarning("Unauthenticated user attempted to access AddPlayer.razor OnInitializedAsync.");
            // It's better to let the [Authorize] attribute handle redirection,
            // but if not, this is a fallback. For safety, ensure page has [Authorize].
            // NavigationManager.NavigateTo("Account/Login", new NavigationOptions { ReplaceHistoryEntry = true });
            // Return or flag an error to prevent form display if NavManager isn't used here.
        }
        isInitialized = true; // Mark as initialized so UI can react (show form or error)
        StateHasChanged(); // Ensure UI updates with the newPlayer potentially having CreatedBy set
    }

    private async Task HandleAddPlayer(PlayerFormComponent.FormSubmitArgs args)
    {
        errorMessage = null;
        infoMessage = null;

        // The playerToCreate is args.PlayerData, which is the newPlayer instance from the form.
        // It should already have CreatedByApplicationUserId populated from OnInitializedAsync.
        Player playerToCreate = args.PlayerData;

        // Defensive check, though OnInitializedAsync should have set it or shown an error.
        if (string.IsNullOrWhiteSpace(playerToCreate.CreatedByApplicationUserId))
        {
            playerToCreate.CreatedByApplicationUserId = _currentUserId; // Try to set it again if somehow missed
        }
        
        if (string.IsNullOrWhiteSpace(playerToCreate.CreatedByApplicationUserId)) // If still not set, error out
        {
            errorMessage = "Cannot save player: creator user ID is missing. Please re-login.";
            Logger.LogError("HandleAddPlayer: CreatedByApplicationUserId is still missing for player {FirstName} {LastName}", playerToCreate.FirstName, playerToCreate.LastName);
            return;
        }

        try
        {
            if (!string.IsNullOrWhiteSpace(args.EmailToLink))
            {
                var systemUserToLink = await UserManager.FindByEmailAsync(args.EmailToLink);
                if (systemUserToLink == null)
                {
                    infoMessage = $"System user with email '{args.EmailToLink}' not found. Player '{playerToCreate.FirstName} {playerToCreate.LastName}' will be created as a 'managed' player owned by you.";
                    playerToCreate.ApplicationUserId = null;
                }
                else
                {
                    var existingPlayerProfileForUser = await PlayerService.GetPlayerByApplicationUserIdAsync(systemUserToLink.Id);
                    if (existingPlayerProfileForUser != null)
                    {
                        errorMessage = $"The system user '{systemUserToLink.Email}' is already linked to player '{existingPlayerProfileForUser.FirstName} {existingPlayerProfileForUser.LastName}'. Cannot link this new player profile.";
                        return;
                    }
                    playerToCreate.ApplicationUserId = systemUserToLink.Id;
                    infoMessage = $"Player '{playerToCreate.FirstName} {playerToCreate.LastName}' will be linked to system user '{systemUserToLink.Email}'.";
                }
            }
            else
            {
                playerToCreate.ApplicationUserId = null;
                 if(string.IsNullOrWhiteSpace(infoMessage))
                {
                    infoMessage = $"Player '{playerToCreate.FirstName} {playerToCreate.LastName}' will be created as a 'managed' player owned by you.";
                }
            }

            if (string.IsNullOrEmpty(playerToCreate.ApplicationUserId))
            {
                var allPlayersByCurrentUser = await PlayerService.GetAllPlayersAsync(_currentUserId, false);
                if (allPlayersByCurrentUser.Any(p => string.IsNullOrEmpty(p.ApplicationUserId) &&
                                                   p.CreatedByApplicationUserId == _currentUserId &&
                                                   p.FirstName.Equals(playerToCreate.FirstName, StringComparison.OrdinalIgnoreCase) &&
                                                   p.LastName.Equals(playerToCreate.LastName, StringComparison.OrdinalIgnoreCase)))
                {
                    errorMessage = $"You already manage a player named '{playerToCreate.FirstName} {playerToCreate.LastName}'. Please use a different name.";
                    return;
                }
            }

            await PlayerService.AddPlayerAsync(playerToCreate);
            Logger.LogInformation("Player {FirstName} {LastName} added successfully by User {UserId}.", playerToCreate.FirstName, playerToCreate.LastName, _currentUserId);
            NavigationManager.NavigateTo("/players");
        }
        catch (InvalidOperationException opEx)
        {
            Logger.LogWarning(opEx, "Business rule violation adding player {FirstName} {LastName} by User {UserId}.", playerToCreate.FirstName, playerToCreate.LastName, _currentUserId);
            errorMessage = opEx.Message;
            infoMessage = null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Generic error adding player {FirstName} {LastName} by User {UserId}.", playerToCreate.FirstName, playerToCreate.LastName, _currentUserId);
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            infoMessage = null;
        }
    }

    private void HandleCancel()
    {
        NavigationManager.NavigateTo("/players");
    }
}