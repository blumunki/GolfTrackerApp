@page "/players/add"
@attribute [Authorize(Roles = "Admin")]
@inject IPlayerService PlayerService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject ILogger<AddPlayer> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@using GolfTrackerApp.Web.Services
@using GolfTrackerApp.Web.Models
@using GolfTrackerApp.Web.Data
@using GolfTrackerApp.Web.Components.Pages.Players
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@rendermode InteractiveServer

<PageTitle>Add New Player</PageTitle>
<MudText Typo="Typo.h4" GutterBottom="true">Add New Player</MudText>

@if (isInitialized)
{
    <EditForm Model="@newPlayer" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            @* The refactored form component is placed here *@
            <PlayerFormComponent @ref="_playerFormComponent" PlayerModel="@newPlayer" />

            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create Player</MudButton>
                <MudButton Variant="Variant.Outlined" OnClick="Cancel" Class="mx-2">Cancel</MudButton>
            </MudCardActions>
        </MudCard>

        @* Display validation errors and feedback messages using MudAlert *@
        <ValidationSummary class="mt-3" />

        @if (!string.IsNullOrEmpty(infoMessage))
        {
            <MudAlert Severity="Severity.Info" Class="mt-3">@infoMessage</MudAlert>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-3">@errorMessage</MudAlert>
        }
    </EditForm>
}
else
{
    <MudProgressCircular Indeterminate="true" />
}


@code {
    private Player newPlayer = new();
    private PlayerFormComponent _playerFormComponent = default!; // Reference to the child component

    private string? errorMessage;
    private string? infoMessage;
    private string _currentUserId = string.Empty;
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            _currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
        }
        isInitialized = true;
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = null;
        infoMessage = null;

        var playerToCreate = newPlayer;
        var emailToLink = _playerFormComponent.IsRegisteredUserCandidate ? _playerFormComponent.UserEmailToLink : null;

        try
        {
            if (!string.IsNullOrWhiteSpace(emailToLink))
            {
                var systemUserToLink = await UserManager.FindByEmailAsync(emailToLink);
                if (systemUserToLink == null)
                {
                    infoMessage = $"System user with email '{emailToLink}' not found. Player will be created as a 'managed' player owned by you.";
                    playerToCreate.ApplicationUserId = null;
                }
                else
                {
                    var existingPlayerProfileForUser = await PlayerService.GetPlayerByApplicationUserIdAsync(systemUserToLink.Id);
                    if (existingPlayerProfileForUser != null)
                    {
                        errorMessage = $"The system user '{systemUserToLink.Email}' is already linked to another player profile.";
                        return;
                    }
                    playerToCreate.ApplicationUserId = systemUserToLink.Id;
                    infoMessage = $"Player will be linked to system user '{systemUserToLink.Email}'.";
                }
            }
            else
            {
                playerToCreate.ApplicationUserId = null;
            }

            // The duplicate check logic can also be simplified or removed,
            // as the service layer now handles this robustly.
            if (string.IsNullOrEmpty(playerToCreate.ApplicationUserId))
            {
                var allPlayersByCurrentUser = await PlayerService.GetAllPlayersAsync(_currentUserId, false);
                if (allPlayersByCurrentUser.Any(p => string.IsNullOrEmpty(p.ApplicationUserId) &&
                                                p.FirstName.Equals(playerToCreate.FirstName, StringComparison.OrdinalIgnoreCase) &&
                                                p.LastName.Equals(playerToCreate.LastName, StringComparison.OrdinalIgnoreCase)))
                {
                    errorMessage = $"You already manage a player named '{playerToCreate.FirstName} {playerToCreate.LastName}'.";
                    return;
                }
            }

            // Now, the service will handle setting CreatedByApplicationUserId
            await PlayerService.AddPlayerAsync(playerToCreate);
            Snackbar.Add("Player created successfully!", Severity.Success);
            NavigationManager.NavigateTo("/players");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding player {FirstName} {LastName}", playerToCreate.FirstName, playerToCreate.LastName);
            errorMessage = "An unexpected error occurred while saving the player.";
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/players");
    }
}