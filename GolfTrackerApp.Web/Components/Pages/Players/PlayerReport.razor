@page "/players/{PlayerId:int}/report"
@attribute [Authorize]
@rendermode InteractiveServer

@inject IPlayerService PlayerService
@inject IReportService ReportService
@inject IGolfCourseService CourseService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

@using GolfTrackerApp.Web.Models
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using GolfTrackerApp.Web.Services
@using GolfTrackerApp.Web.Components.Shared

<PageTitle>Player Performance Report</PageTitle>

@if (player is null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudText Typo="Typo.h4" GutterBottom="true">Performance Report: @player.FirstName @player.LastName</MudText>

    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <MudGrid Spacing="2">
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="int?" Label="Filter by Course" @bind-Value="SelectedCourseId" Clearable="true">
                    @foreach (var course in _allCourses.OrderBy(c => c.GolfClub!.Name).ThenBy(c => c.Name))
                    {
                        <MudSelectItem T="int?" Value="@course.GolfCourseId">@($"{course.GolfClub!.Name} - {course.Name}")</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="int?" Label="Holes Played" @bind-Value="SelectedHolesPlayed" Clearable="true">
                    <MudSelectItem T="int?" Value="9">9 Holes</MudSelectItem>
                    <MudSelectItem T="int?" Value="18">18 Holes</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudDatePicker Label="Start Date" @bind-Date="StartDate" Clearable="true" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudDatePicker Label="End Date" @bind-Date="EndDate" Clearable="true" />
            </MudItem>
            <MudItem xs="12">
                 <MudSwitch T="bool" @bind-checked="ShowScoreVsPar" Label="Show Score vs Par (otherwise Total Score)" Color="Color.Primary" />
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (isLoadingChart)
    {
        <MudProgressLinear Indeterminate="true" Class="my-4" />
    }
    else if (_series is not null && _series.Any())
    {
        <MudChart ChartType="ChartType.Line" ChartSeries="@_series" XAxisLabels="@_xAxisLabels" Width="100%" Height="350px"></MudChart>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Class="mt-4">No completed rounds found for this player with the selected filters.</MudAlert>
    }
}

@code {
    [Parameter]
    public int PlayerId { get; set; }

    private Player? player;
    private List<GolfCourse> _allCourses = new();
    private bool isLoadingChart = true;

    // --- Filter Properties ---
    private int? _selectedCourseId;
    public int? SelectedCourseId { get => _selectedCourseId; set { if (_selectedCourseId != value) { _selectedCourseId = value; _ = OnFilterChanged(); } } }

    private int? _selectedHolesPlayed;
    public int? SelectedHolesPlayed { get => _selectedHolesPlayed; set { if (_selectedHolesPlayed != value) { _selectedHolesPlayed = value; _ = OnFilterChanged(); } } }

    private DateTime? _startDate;
    public DateTime? StartDate { get => _startDate; set { if (_startDate != value) { _startDate = value; _ = OnFilterChanged(); } } }

    private DateTime? _endDate;
    public DateTime? EndDate { get => _endDate; set { if (_endDate != value) { _endDate = value; _ = OnFilterChanged(); } } }

    private bool _showScoreVsPar = true;
    public bool ShowScoreVsPar { get => _showScoreVsPar; set { if (_showScoreVsPar != value) { _showScoreVsPar = value; _ = OnFilterChanged(); } } }

    // --- Chart Properties ---
    private List<ChartSeries> _series = new();
    private string[] _xAxisLabels = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        player = await PlayerService.GetPlayerByIdAsync(PlayerId);
        _allCourses = await CourseService.GetAllGolfCoursesAsync();
        await LoadReportData();
    }

    private async Task OnFilterChanged() => await LoadReportData();

    private async Task LoadReportData()
    {
        isLoadingChart = true;
        try
        {
            var performanceData = await ReportService.GetPlayerPerformanceAsync(PlayerId, _selectedCourseId, _selectedHolesPlayed, null, _startDate, _endDate);
            PrepareChartData(performanceData);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading report data: {ex.Message}", Severity.Error);
        }
        isLoadingChart = false;
    }

    private void PrepareChartData(List<PlayerPerformanceDataPoint> data)
    {
        if (data is null || !data.Any())
        {
            _series.Clear();
            _xAxisLabels = Array.Empty<string>();
            return;
        }

        // This fixes the X-Axis issue by creating a common timeline for all series
        var allDates = data.Select(d => d.Date).Distinct().OrderBy(d => d).ToList();
        _xAxisLabels = allDates.Select(d => d.ToString("dd MMM")).ToArray();

        var seriesList = new List<ChartSeries>();

        // If no hole filter is applied, create separate series for 9 and 18 holes
        if (_selectedHolesPlayed is null)
        {
            var data18 = data.Where(d => d.HolesPlayed == 18).ToDictionary(d => d.Date);
            seriesList.Add(new ChartSeries
            {
                Name = "18 Hole Score",
                Data = allDates.Select(date => data18.ContainsKey(date) ? (double?)(ShowScoreVsPar ? data18[date].ScoreVsPar : data18[date].TotalScore) : null).Select(d => d ?? 0).ToArray()
            });

            var data9 = data.Where(d => d.HolesPlayed == 9).ToDictionary(d => d.Date);
            seriesList.Add(new ChartSeries
            {
                Name = "9 Hole Score",
                Data = allDates.Select(date => data9.ContainsKey(date) ? (double?)(ShowScoreVsPar ? data9[date].ScoreVsPar : data9[date].TotalScore) : null).Select(d => d ?? 0).ToArray()
            });
        }
        else // A filter is applied, show a single line
        {
            var dataFiltered = data.ToDictionary(d => d.Date);
             seriesList.Add(new ChartSeries
             {
                Name = _showScoreVsPar ? "Score vs Par" : "Total Score",
                Data = allDates.Select(date => dataFiltered.ContainsKey(date) ? (double?)(ShowScoreVsPar ? dataFiltered[date].ScoreVsPar : dataFiltered[date].TotalScore) : null).Select(d => d ?? 0).ToArray()
            });
        }

        _series = seriesList;
    }
}