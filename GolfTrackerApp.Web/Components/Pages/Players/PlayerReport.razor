@page "/players/{PlayerId:int}/report"
@attribute [Authorize]
@rendermode InteractiveServer

@inject IPlayerService PlayerService
@inject IReportService ReportService
@inject IGolfCourseService CourseService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

@using System.Globalization
@using GolfTrackerApp.Web.Models
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using GolfTrackerApp.Web.Services
@using GolfTrackerApp.Web.Components.Shared

<PageTitle>Player Performance Report</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudText Typo="Typo.h4" GutterBottom="true">Performance Report: @_viewModel.Player?.FirstName @_viewModel.Player?.LastName</MudText>

    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <MudGrid Spacing="2">
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="int?" Label="Filter by Course" @bind-Value="SelectedCourseId" Clearable="true">
                    @foreach (var course in _viewModel.FilterCourses.OrderBy(c => c.GolfClub!.Name).ThenBy(c => c.Name))
                    {
                        <MudSelectItem T="int?" Value="@course.GolfCourseId">@($"{course.GolfClub!.Name} - {course.Name}")</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="int?" Label="Holes Played" @bind-Value="SelectedHolesPlayed" Clearable="true">
                    <MudSelectItem T="int?" Value="9">9 Holes</MudSelectItem>
                    <MudSelectItem T="int?" Value="18">18 Holes</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="RoundTypeOption?" Label="Filter by Round Type" @bind-Value="SelectedRoundType" Clearable="true">
                    <MudSelectItem T="RoundTypeOption?" Value="@RoundTypeOption.Friendly">Friendly</MudSelectItem>
                    <MudSelectItem T="RoundTypeOption?" Value="@RoundTypeOption.Competitive">Competitive</MudSelectItem>
                </MudSelect>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudDatePicker Label="Start Date" @bind-Date="StartDate" Clearable="true" Culture="_ukCulture" DateFormat="dd/MM/yyyy" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudDatePicker Label="End Date" @bind-Date="EndDate" Clearable="true" Culture="_ukCulture" DateFormat="dd/MM/yyyy" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSwitch @bind-Value="ShowScoreVsPar" Label="Show Score vs Par" Color="Color.Primary"/>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (isLoading)
    {
        <MudProgressLinear Indeterminate="true" Class="my-4" />
    }
    else if (_series is not null && _series.Any() && _series[0].Data.Length > 0)
    {
        <MudPaper Class="pa-4 mt-4" Elevation="2">
            <div style="aspect-ratio: 2 / 1;">
                <MudChart ChartType="ChartType.Line" ChartSeries="@_series" XAxisLabels="@_xAxisLabels" Width="100%" Height="100%"></MudChart>
            </div>
        </MudPaper>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Class="mt-4">No completed rounds found for this player with the selected filters.</MudAlert>
    }
}

@code {
    [Parameter]
    public int PlayerId { get; set; }

    // The ViewModel holds all our data
    private PlayerReportViewModel _viewModel = new();

    private bool isLoading = true;
    private CultureInfo _ukCulture = new("en-GB");

    // Filter properties remain here, as they are part of the UI state
    private int? _selectedCourseId;
    public int? SelectedCourseId { get => _selectedCourseId; set { if (_selectedCourseId != value) { _selectedCourseId = value; _ = OnFilterChanged(); } } }

    private int? _selectedHolesPlayed;
    public int? SelectedHolesPlayed { get => _selectedHolesPlayed; set { if (_selectedHolesPlayed != value) { _selectedHolesPlayed = value; _ = OnFilterChanged(); } } }

    private RoundTypeOption? _selectedRoundType;
    public RoundTypeOption? SelectedRoundType { get => _selectedRoundType; set { if (_selectedRoundType != value) { _selectedRoundType = value; _ = OnFilterChanged(); } } }

    private DateTime? _startDate;
    public DateTime? StartDate { get => _startDate; set { if (_startDate != value) { _startDate = value; _ = OnFilterChanged(); } } }

    private DateTime? _endDate;
    public DateTime? EndDate { get => _endDate; set { if (_endDate != value) { _endDate = value; _ = OnFilterChanged(); } } }

    private bool _showScoreVsPar = true;
    public bool ShowScoreVsPar { get => _showScoreVsPar; set { if (_showScoreVsPar != value) { _showScoreVsPar = value; _ = OnFilterChanged(); } } }

    private List<ChartSeries> _series = new();
    private string[] _xAxisLabels = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadReportData();
    }

    private async Task OnFilterChanged() => await LoadReportData();

    private async Task LoadReportData()
    {
        isLoading = true;
        try
        {
            // One simple call to the service to get all data
            _viewModel = await ReportService.GetPlayerReportViewModelAsync(PlayerId, _selectedCourseId, _selectedHolesPlayed, _selectedRoundType, _startDate, _endDate);
            PrepareChartData(_viewModel.PerformanceData);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading report data: {ex.Message}", Severity.Error);
        }
        isLoading = false;
    }

    private void PrepareChartData(List<PlayerPerformanceDataPoint> data)
    {
        if (data is null || !data.Any())
        {
            _series.Clear();
            _xAxisLabels = Array.Empty<string>();
            return;
        }

        string seriesName = _showScoreVsPar ? "Score vs Par" : "Total Score";
        var seriesData = _showScoreVsPar
            ? data.Select(d => (double)d.ScoreVsPar).ToArray()
            : data.Select(d => (double)d.TotalScore).ToArray();

        _series = new List<ChartSeries> { new() { Name = seriesName, Data = seriesData } };

        int labelInterval = Math.Max(1, data.Count / 15);
        _xAxisLabels = data
            .Select((d, i) => i % labelInterval == 0 ? d.Date.ToString("dd MMM") : "")
            .ToArray();
    }
}