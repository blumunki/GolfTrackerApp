@page "/golfcourses/{CourseId:int}/details"
@rendermode InteractiveServer

@inject IGolfCourseService GolfCourseService
@inject IHoleService HoleService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILogger<GolfCourseDetails> Logger
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IReportService ReportService
@inject IRoundService RoundService
@inject IPlayerService PlayerService

@using GolfTrackerApp.Web.Models
@using GolfTrackerApp.Web.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using GolfTrackerApp.Web.Components.Shared
@using MudBlazor
@using System.Security.Claims

<PageTitle>@(course?.Name ?? "Course Details")</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (course is null)
{
    <MudAlert Severity="Severity.Error">Golf course not found.</MudAlert>
}
else
{
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4"></MudBreadcrumbs>

    <MudPaper Class="pa-4 mb-4" Elevation="0">
        <MudGrid Spacing="2" Justify="Justify.SpaceBetween" alignItems="AlignItems.Center">
            <MudItem>
                <MudText Typo="Typo.h5">@course.Name</MudText>
                <MudText Typo="Typo.body1">Par: @course.DefaultPar | Holes: @course.NumberOfHoles</MudText>
            </MudItem>
            <AuthorizeView>
                <Authorized>
                    <MudItem Class="d-flex justify-content-end align-center gap-2">
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OpenAddHoleDialog" StartIcon="@Icons.Material.Filled.Add">Add Hole</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo($"/golfcourses/edit/{course.GolfCourseId}"))">Edit Course</MudButton>
                    </MudItem>
                </Authorized>
                <NotAuthorized>
                    <MudItem Class="d-flex justify-content-end align-center gap-2">
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Success" 
                                   Href="/Account/Register"
                                   StartIcon="@Icons.Material.Filled.PersonAdd">
                            Join to Manage
                        </MudButton>
                    </MudItem>
                </NotAuthorized>
            </AuthorizeView>
        </MudGrid>
    </MudPaper>

    <MudTable Items="@holes.OrderBy(h => h.HoleNumber)" Hover="true" Dense="true" Elevation="1">
        <HeaderContent>
            <MudTh>Hole</MudTh>
            <MudTh>Par</MudTh>
            <MudTh>Length (Yards)</MudTh>
            <MudTh>Stroke Index</MudTh>
            <AuthorizeView>
                <Authorized Context="authContext">
                    <MudTh Style="text-align:right">Actions</MudTh>
                </Authorized>
            </AuthorizeView>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Hole">@context.HoleNumber</MudTd>
            <MudTd DataLabel="Par">@context.Par</MudTd>
            <MudTd DataLabel="Length">@context.LengthYards</MudTd>
            <MudTd DataLabel="SI">@context.StrokeIndex</MudTd>
            <AuthorizeView>
                <Authorized Context="authContext">
                    <MudTd Style="text-align:right">
                        <MudTooltip Text="Edit Hole">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => OpenEditHoleDialog(context))" />
                        </MudTooltip>
                        <MudTooltip Text="Delete Hole">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(() => PrepareDeleteHole(context))" />
                        </MudTooltip>
                    </MudTd>
                </Authorized>
            </AuthorizeView>
        </RowTemplate>
    </MudTable>

    @* Personal Performance Section - Only show for logged-in users *@
    <AuthorizeView>
        <Authorized>
            @if (currentUserId is not null && (_scoringDistribution is not null || recentRounds.Any()))
            {
                <MudText Typo="Typo.h5" Class="mt-4 mb-3">Your Performance at @course.Name</MudText>
                
                <MudGrid Spacing="3" Class="mb-4">
                    @if (_scoringDistribution is not null && _scoringDistribution.TotalHoles > 0)
                    {
                        <MudItem xs="12" md="6">
                            <MudCard Elevation="2" Class="d-flex flex-column" Style="height: 100%;">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Scoring Distribution</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="flex-grow-1">
                                    <div style="height: 300px; display: flex; justify-content: center; align-items: center;">
                                        <div style="width: 300px; height: 300px;">
                                            <MudChart ChartType="ChartType.Pie" 
                                                      InputData="@_pieChartData" 
                                                      InputLabels="@_pieChartLabels" 
                                                      Width="100%" 
                                                      Height="100%"></MudChart>
                                        </div>
                                    </div>
                                    <MudText Typo="Typo.caption" Class="mt-2 text-center">Based on @_scoringDistribution.TotalHoles holes</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                    
                    @if (recentRounds.Any())
                    {
                        <MudItem xs="12" md="6">
                            <MudCard Elevation="2" Style="height: 100%;">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Recent Rounds</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudList clickable="true" T="object">
                                        @foreach (var round in recentRounds)
                                        {
                                            <MudListItem T="object" OnClick="@(() => NavigationManager.NavigateTo($"/rounds/{round.RoundId}"))">
                                                <div class="d-flex justify-space-between flex-grow-1">
                                                    <div class="d-flex flex-column">
                                                        <MudText Typo="Typo.body1">@round.DatePlayed.ToString("dd MMM yyyy")</MudText>
                                                        <MudText Typo="Typo.caption">@round.GolfCourse?.Name</MudText>
                                                    </div>
                                                    <MudText Typo="Typo.body1">View Round</MudText>
                                                </div>
                                            </MudListItem>
                                        }
                                    </MudList>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
        </Authorized>
        <NotAuthorized>
            @* Show call-to-action for non-authenticated users *@
            <MudPaper Class="pa-4 mt-4" Elevation="1">
                <MudText Typo="Typo.h6" Class="mb-3">Track Your Performance</MudText>
                <MudText Typo="Typo.body1" Class="mb-3">
                    Join our community to track your rounds at @course.Name and see detailed hole-by-hole analytics.
                </MudText>
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="6">
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   Href="/Account/Register"
                                   StartIcon="@Icons.Material.Filled.TrendingUp"
                                   FullWidth="true">
                            Start Tracking
                        </MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Primary" 
                                   Href="/Account/Login"
                                   StartIcon="@Icons.Material.Filled.Login"
                                   FullWidth="true">
                            Already Have Account?
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </NotAuthorized>
    </AuthorizeView>    <MudButton Variant="Variant.Text" OnClick="@(() => NavigationManager.NavigateTo($"/golfclubs/{course.GolfClubId}"))" Class="mt-4">Back to Club Details</MudButton>
}

@code {
    [Parameter]
    public int CourseId { get; set; }

    private GolfCourse? course;
    private List<Hole> holes = new();
    private bool isLoading = true;
    private List<BreadcrumbItem> _breadcrumbs = new();

    // Performance data properties
    private string? currentUserId;
    private int _currentPlayerId;
    private List<ChartSeries> _performanceSeries = new();
    private string[] _performanceXAxisLabels = Array.Empty<string>();
    private List<Round> recentRounds = new();
    
    // Scoring distribution properties
    private ScoringDistribution? _scoringDistribution;
    private double[] _pieChartData = Array.Empty<double>();
    private string[] _pieChartLabels = Array.Empty<string>();
    
    private bool isAuthenticated = false;

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        
        // Check authentication status
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        
        try
        {
            course = await GolfCourseService.GetGolfCourseByIdAsync(CourseId);
            if (course != null)
            {
                holes = await HoleService.GetHolesForCourseAsync(course.GolfCourseId);

                // Setup breadcrumbs for easy navigation
                _breadcrumbs = new List<BreadcrumbItem>
                {
                    new BreadcrumbItem("Clubs", href: "/golfclubs"),
                    new BreadcrumbItem(course.GolfClub?.Name ?? "Club", href: $"/golfclubs/{course.GolfClubId}"),
                    new BreadcrumbItem(course.Name, href: null, disabled: true)
                };

                // Load personal performance data only if user is authenticated
                if (isAuthenticated)
                {
                    await LoadPersonalPerformanceData();
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading course details for CourseId {CourseId}", CourseId);
            Snackbar.Add("Error loading course details.", Severity.Error);
        }
        isLoading = false;
    }

    private async Task LoadPersonalPerformanceData()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);

            if (currentUserId is not null)
            {
                var player = await PlayerService.GetPlayerByApplicationUserIdAsync(currentUserId);
                if (player is not null)
                {
                    _currentPlayerId = player.PlayerId;

                    // Load performance data and recent rounds in parallel
                    var performanceTask = ReportService.GetPlayerPerformanceForCourseAsync(currentUserId, CourseId, 10);
                    var recentRoundsTask = RoundService.GetRecentRoundsForCourseAsync(currentUserId, CourseId, 5);
                    var scoringDistributionTask = ReportService.GetScoringDistributionAsync(player.PlayerId, CourseId, null, null, null, null);

                    await Task.WhenAll(performanceTask, recentRoundsTask, scoringDistributionTask);

                    var performanceData = await performanceTask;
                    recentRounds = await recentRoundsTask;
                    _scoringDistribution = await scoringDistributionTask;

                    PreparePerformanceChart(performanceData);
                    PreparePieChartData(_scoringDistribution);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error loading personal performance data for course {CourseId}", CourseId);
            // Don't show error to user, just log it - performance data is optional
        }
    }

    private void PreparePerformanceChart(List<PlayerPerformanceDataPoint> data)
    {
        if (data is null || !data.Any()) 
        {
            _performanceSeries.Clear();
            _performanceXAxisLabels = Array.Empty<string>();
            return;
        }

        _performanceSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Score vs Par", Data = data.Select(d => (double)d.ScoreVsPar).ToArray() }
        };
        _performanceXAxisLabels = data.Select(d => d.Date.ToString("dd MMM")).ToArray();
    }

    private void PreparePieChartData(ScoringDistribution? distribution)
    {
        if (distribution is null || distribution.TotalHoles == 0)
        {
            _pieChartData = Array.Empty<double>();
            _pieChartLabels = Array.Empty<string>();
            return;
        }

        var data = new List<double>();
        var labels = new List<string>();

        // Add ALL categories, including those with 0 counts for completeness
        if (distribution.EagleCount > 0)
        {
            data.Add(distribution.EagleCount);
            labels.Add($"Eagle ({distribution.EagleCount})");
        }
        
        if (distribution.BirdieCount > 0)
        {
            data.Add(distribution.BirdieCount);
            labels.Add($"Birdie ({distribution.BirdieCount})");
        }
        
        // Always include Par, Bogey as they're the most common
        data.Add(distribution.ParCount);
        labels.Add($"Par ({distribution.ParCount})");
        
        data.Add(distribution.BogeyCount);
        labels.Add($"Bogey ({distribution.BogeyCount})");
        
        if (distribution.DoubleBogeyCount > 0)
        {
            data.Add(distribution.DoubleBogeyCount);
            labels.Add($"Double Bogey ({distribution.DoubleBogeyCount})");
        }
        
        if (distribution.TripleBogeyOrWorseCount > 0)
        {
            data.Add(distribution.TripleBogeyOrWorseCount);
            labels.Add($"Triple+ ({distribution.TripleBogeyOrWorseCount})");
        }

        // Use InputData format for pie chart
        _pieChartData = data.ToArray();
        _pieChartLabels = labels.ToArray();
    }
    private async Task OpenAddHoleDialog()
    {
        if (course is null || !isAuthenticated) return;
        var newHole = new Hole { GolfCourseId = course.GolfCourseId };
        var parameters = new DialogParameters<AddEditHoleDialog>
        {
            { x => x.HoleModel, newHole },
            { x => x.Title, "Add New Hole" }
        };
        var dialog = await DialogService.ShowAsync<AddEditHoleDialog>("Add Hole", parameters);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await OnParametersSetAsync(); // Refresh the list
        }
    }

    private async Task OpenEditHoleDialog(Hole holeToEdit)
    {
        if (!isAuthenticated) return;
        var parameters = new DialogParameters<AddEditHoleDialog>
        {
            { x => x.HoleModel, holeToEdit },
            { x => x.Title, $"Edit Hole {holeToEdit.HoleNumber}" }
        };
        var dialog = await DialogService.ShowAsync<AddEditHoleDialog>("Edit Hole", parameters);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await OnParametersSetAsync(); // Refresh the list
        }
    }

    private async Task PrepareDeleteHole(Hole holeToDelete)
    {
        if (!isAuthenticated) return;
        
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { nameof(ConfirmDialog.ContentText), $"Are you sure you want to delete Hole {holeToDelete.HoleNumber}?" },
            { nameof(ConfirmDialog.ButtonText), "Delete" },
            { nameof(ConfirmDialog.Color), Color.Error }
        };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is true)
        {
            try
            {
                bool deleted = await HoleService.DeleteHoleAsync(holeToDelete.HoleId);
                if (deleted)
                {
                    Snackbar.Add("Hole deleted successfully.", Severity.Success);
                    await OnParametersSetAsync(); // Refresh the list of holes
                }
                else
                {
                    Snackbar.Add("Failed to delete hole.", Severity.Warning);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting hole: {ex.Message}", Severity.Error);
            }
        }
    }
}