@page "/golfcourses/{CourseId:int}/details"
@attribute [Authorize]
@rendermode InteractiveServer

@inject IGolfCourseService GolfCourseService
@inject IHoleService HoleService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILogger<GolfCourseDetails> Logger

@using GolfTrackerApp.Web.Models
@using GolfTrackerApp.Web.Services
@using Microsoft.AspNetCore.Authorization

<PageTitle>@(course?.Name ?? "Course Details")</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (course is null)
{
    <MudAlert Severity="Severity.Error">Golf course not found.</MudAlert>
}
else
{
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4"></MudBreadcrumbs>

    <MudPaper Class="pa-4 mb-4" Elevation="0">
        <MudGrid Spacing="2" Justify="Justify.SpaceBetween" alignItems="AlignItems.Center">
            <MudItem>
                <MudText Typo="Typo.h5">@course.Name</MudText>
                <MudText Typo="Typo.body1">Par: @course.DefaultPar | Holes: @course.NumberOfHoles</MudText>
            </MudItem>
            <MudItem Class="d-flex justify-content-end">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo($"/golfcourses/edit/{course.GolfCourseId}"))">Edit Course</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudTable Items="@holes.OrderBy(h => h.HoleNumber)" Hover="true" Dense="true" Elevation="1">
        <HeaderContent>
            <MudTh>Hole</MudTh>
            <MudTh>Par</MudTh>
            <MudTh>Length (Yards)</MudTh>
            <MudTh>Stroke Index</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Hole">@context.HoleNumber</MudTd>
            <MudTd DataLabel="Par">@context.Par</MudTd>
            <MudTd DataLabel="Length">@context.LengthYards</MudTd>
            <MudTd DataLabel="SI">@context.StrokeIndex</MudTd>
        </RowTemplate>
    </MudTable>

    <MudButton Variant="Variant.Text" OnClick="@(() => NavigationManager.NavigateTo($"/golfclubs/{course.GolfClubId}"))" Class="mt-4">Back to Club Details</MudButton>
}

@code {
    [Parameter]
    public int CourseId { get; set; }

    private GolfCourse? course;
    private List<Hole> holes = new();
    private bool isLoading = true;
    private List<BreadcrumbItem> _breadcrumbs = new();

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        try
        {
            course = await GolfCourseService.GetGolfCourseByIdAsync(CourseId);
            if (course != null)
            {
                holes = await HoleService.GetHolesForCourseAsync(course.GolfCourseId);

                // Setup breadcrumbs for easy navigation
                _breadcrumbs = new List<BreadcrumbItem>
                {
                    new BreadcrumbItem("Clubs", href: "/golfclubs"),
                    new BreadcrumbItem(course.GolfClub?.Name ?? "Club", href: $"/golfclubs/{course.GolfClubId}"),
                    new BreadcrumbItem(course.Name, href: null, disabled: true)
                };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading course details for CourseId {CourseId}", CourseId);
            Snackbar.Add("Error loading course details.", Severity.Error);
        }
        isLoading = false;
    }
}