@page "/golfcourses/{CourseId:int}/details"
@attribute [Authorize]
@rendermode InteractiveServer

@inject IGolfCourseService GolfCourseService
@inject IHoleService HoleService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILogger<GolfCourseDetails> Logger
@inject IDialogService DialogService

@using GolfTrackerApp.Web.Models
@using GolfTrackerApp.Web.Services
@using Microsoft.AspNetCore.Authorization
@using GolfTrackerApp.Web.Components.Shared // For ConfirmDialog

<PageTitle>@(course?.Name ?? "Course Details")</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (course is null)
{
    <MudAlert Severity="Severity.Error">Golf course not found.</MudAlert>
}
else
{
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4"></MudBreadcrumbs>

    <MudPaper Class="pa-4 mb-4" Elevation="0">
        <MudGrid Spacing="2" Justify="Justify.SpaceBetween" alignItems="AlignItems.Center">
            <MudItem>
                <MudText Typo="Typo.h5">@course.Name</MudText>
                <MudText Typo="Typo.body1">Par: @course.DefaultPar | Holes: @course.NumberOfHoles</MudText>
            </MudItem>
            <MudItem Class="d-flex justify-content-end align-center gap-2">
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OpenAddHoleDialog" StartIcon="@Icons.Material.Filled.Add">Add Hole</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo($"/golfcourses/edit/{course.GolfCourseId}"))">Edit Course</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudTable Items="@holes.OrderBy(h => h.HoleNumber)" Hover="true" Dense="true" Elevation="1">
        <HeaderContent>
            <MudTh>Hole</MudTh>
            <MudTh>Par</MudTh>
            <MudTh>Length (Yards)</MudTh>
            <MudTh>Stroke Index</MudTh>
            <MudTh Style="text-align:right">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Hole">@context.HoleNumber</MudTd>
            <MudTd DataLabel="Par">@context.Par</MudTd>
            <MudTd DataLabel="Length">@context.LengthYards</MudTd>
            <MudTd DataLabel="SI">@context.StrokeIndex</MudTd>
            <MudTd Style="text-align:right">
                <MudTooltip Text="Edit Hole">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => OpenEditHoleDialog(context))" />
                </MudTooltip>
                <MudTooltip Text="Delete Hole">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(() => PrepareDeleteHole(context))" />
                </MudTooltip>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <MudButton Variant="Variant.Text" OnClick="@(() => NavigationManager.NavigateTo($"/golfclubs/{course.GolfClubId}"))" Class="mt-4">Back to Club Details</MudButton>
}

@code {
    [Parameter]
    public int CourseId { get; set; }

    private GolfCourse? course;
    private List<Hole> holes = new();
    private bool isLoading = true;
    private List<BreadcrumbItem> _breadcrumbs = new();

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        try
        {
            course = await GolfCourseService.GetGolfCourseByIdAsync(CourseId);
            if (course != null)
            {
                holes = await HoleService.GetHolesForCourseAsync(course.GolfCourseId);

                // Setup breadcrumbs for easy navigation
                _breadcrumbs = new List<BreadcrumbItem>
                {
                    new BreadcrumbItem("Clubs", href: "/golfclubs"),
                    new BreadcrumbItem(course.GolfClub?.Name ?? "Club", href: $"/golfclubs/{course.GolfClubId}"),
                    new BreadcrumbItem(course.Name, href: null, disabled: true)
                };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading course details for CourseId {CourseId}", CourseId);
            Snackbar.Add("Error loading course details.", Severity.Error);
        }
        isLoading = false;
    }
    private async Task OpenAddHoleDialog()
    {
        if (course is null) return;
        var newHole = new Hole { GolfCourseId = course.GolfCourseId };
        var parameters = new DialogParameters<AddEditHoleDialog>
        {
            { x => x.HoleModel, newHole },
            { x => x.Title, "Add New Hole" }
        };
        var dialog = await DialogService.ShowAsync<AddEditHoleDialog>("Add Hole", parameters);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await OnParametersSetAsync(); // Refresh the list
        }
    }

    private async Task OpenEditHoleDialog(Hole holeToEdit)
    {
        var parameters = new DialogParameters<AddEditHoleDialog>
        {
            { x => x.HoleModel, holeToEdit },
            { x => x.Title, $"Edit Hole {holeToEdit.HoleNumber}" }
        };
        var dialog = await DialogService.ShowAsync<AddEditHoleDialog>("Edit Hole", parameters);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await OnParametersSetAsync(); // Refresh the list
        }
    }
    private async Task PrepareDeleteHole(Hole holeToDelete)
    {
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { nameof(ConfirmDialog.ContentText), $"Are you sure you want to delete Hole {holeToDelete.HoleNumber}?" },
            { nameof(ConfirmDialog.ButtonText), "Delete" },
            { nameof(ConfirmDialog.Color), Color.Error }
        };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is true)
        {
            // VVV --- THIS IS THE UPDATED LOGIC --- VVV
            try
            {
                bool deleted = await HoleService.DeleteHoleAsync(holeToDelete.HoleId);
                if (deleted)
                {
                    Snackbar.Add("Hole deleted successfully.", Severity.Success);
                    await OnParametersSetAsync(); // Refresh the list of holes
                }
                else
                {
                    Snackbar.Add("Failed to delete hole.", Severity.Warning);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting hole: {ex.Message}", Severity.Error);
            }
        }
    }
}