@page "/"
@* @attribute [Authorize] *@
@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRoundService RoundService
@inject IReportService ReportService
@inject IPlayerService PlayerService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@using System.Security.Claims
@using GolfTrackerApp.Web.Models
@using GolfTrackerApp.Web.Components.Shared
@using GolfTrackerApp.Web.Services
@using Microsoft.AspNetCore.Authorization
@using MudBlazor

<PageTitle>Golf Dashboard</PageTitle>

<div class="golf-dashboard">
    @if (isLoading)
    {
        <div class="golf-loading-container">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            <MudText Typo="Typo.body1" Style="margin-top: 16px;">Loading your golf dashboard...</MudText>
        </div>
    }
    else
    {
        <div class="golf-dashboard-header">
            <h1 class="golf-dashboard-title">Your Golf Dashboard</h1>
            <p class="golf-dashboard-subtitle">Track your progress, celebrate your achievements</p>
        </div>

        @if (dashboardStats.TotalRounds == 0)
        {
            <div class="golf-welcome-container">
                <h2 class="golf-welcome-title">Welcome to Your Golf Journey! 🏌️‍♂️</h2>
                <p class="golf-welcome-message">Ready to track your rounds and improve your game? Start by recording your first round!</p>
                <MudButton Href="/rounds/record"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           StartIcon="@Icons.Material.Filled.AddCircle">
                    Record Your First Round
                </MudButton>
            </div>
        }
        else
        {
            <!-- Statistics Overview -->
            <div class="golf-stats-container">
                <MudGrid Spacing="3" Class="justify-center">
                    <MudItem xs="6" sm="3" Style="animation-delay: 0.1s;">
                        <div class="golf-stat-card">
                            <div class="golf-stat-icon">🏌️</div>
                            <div class="golf-stat-value">@dashboardStats.TotalRounds</div>
                            <div class="golf-stat-label">Rounds Played</div>
                            @if (dashboardStats.LastRoundDate.HasValue)
                            {
                                <div class="golf-stat-improvement">
                                    Last: @dashboardStats.LastRoundDate.Value.ToString("MMM dd")
                                </div>
                            }
                        </div>
                    </MudItem>
                    <MudItem xs="6" sm="3" Style="animation-delay: 0.2s;">
                        <div class="golf-stat-card">
                            <div class="golf-stat-icon">🏆</div>
                            <div class="golf-stat-value">@(dashboardStats.BestScore?.ToString() ?? "-")</div>
                            <div class="golf-stat-label">Best Score</div>
                            @if (dashboardStats.LowestToPar.HasValue)
                            {
                                <div class="golf-stat-improvement">
                                    @(dashboardStats.LowestToPar.Value >= 0 ? "+" : "")@dashboardStats.LowestToPar.Value to par
                                </div>
                            }
                        </div>
                    </MudItem>
                    <MudItem xs="6" sm="3" Style="animation-delay: 0.3s;">
                        <div class="golf-stat-card">
                            <div class="golf-stat-icon">📊</div>
                            <div class="golf-stat-value">@(dashboardStats.AverageToPar?.ToString("F1") ?? "-")</div>
                            <div class="golf-stat-label">Average to Par</div>
                            @if (dashboardStats.CurrentStreak > 0)
                            {
                                <div class="@(dashboardStats.IsImprovingStreak ? "golf-stat-improvement" : "golf-stat-decline")">
                                    @(dashboardStats.IsImprovingStreak ? "↗️ Improving" : "📈 Recent form")
                                </div>
                            }
                        </div>
                    </MudItem>
                    <MudItem xs="6" sm="3" Style="animation-delay: 0.4s;">
                        <div class="golf-stat-card">
                            <div class="golf-stat-icon">⭐</div>
                            <div class="golf-stat-value">@dashboardStats.FavoriteCourseRounds</div>
                            <div class="golf-stat-label">Most Played</div>
                            @if (!string.IsNullOrEmpty(dashboardStats.FavoriteCourseName))
                            {
                                <div class="golf-stat-improvement" title="@dashboardStats.FavoriteCourseName">
                                    @(dashboardStats.FavoriteCourseName.Length > 20 ? 
                                      dashboardStats.FavoriteCourseName.Substring(0, 20) + "..." : 
                                      dashboardStats.FavoriteCourseName)
                                </div>
                            }
                        </div>
                    </MudItem>
                </MudGrid>
            </div>
        }

        <!-- Main Dashboard Grid -->
        <MudGrid Spacing="4">
            <!-- Quick Actions -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="3" Class="golf-dashboard-card golf-quick-actions" Style="height: 100%;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">⚡ Quick Actions</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="d-flex flex-column justify-center align-center gap-4 pa-6 flex-grow-1">
                        <MudButton Href="/rounds/record"
                                   Variant="Variant.Outlined"
                                   Class="golf-action-button"
                                   StartIcon="@Icons.Material.Filled.EditNote"
                                   Style="width: 100%; height: 56px; font-size: 16px;">
                            📝 Record a Round
                        </MudButton>
                        <MudButton Variant="Variant.Outlined"
                                   Class="golf-action-button"
                                   StartIcon="@Icons.Material.Filled.RadioButtonChecked"
                                   Style="width: 100%; height: 56px; font-size: 16px;"
                                   Disabled="true">
                            🔴 Live Scoring (Coming Soon)
                        </MudButton>
                        <MudButton Href="@($"/players/{_currentPlayerId}/report")"
                                   Variant="Variant.Outlined"
                                   Class="golf-action-button"
                                   StartIcon="@Icons.Material.Filled.Analytics"
                                   Style="width: 100%; height: 56px; font-size: 16px;">
                            📈 View Full Report
                        </MudButton>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Performance Chart -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="3" Class="golf-dashboard-card" Style="height: 100%;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">📈 Recent Form</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.TrendingUp" 
                                          Color="Color.Primary" 
                                          Href="@($"/players/{_currentPlayerId}/report")" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent Class="flex-grow-1 d-flex flex-column">
                        @if (_performanceSeries is not null && _performanceSeries.Any())
                        {
                            <div class="golf-chart-container flex-grow-1 d-flex flex-column">
                                <MudChart ChartType="ChartType.Line" 
                                         ChartSeries="@_performanceSeries" 
                                         XAxisLabels="@_performanceXAxisLabels" 
                                         Width="100%" 
                                         Height="250px"
                                         ChartOptions="@_chartOptions">
                                </MudChart>
                            </div>
                        }
                        else
                        {
                            <div class="golf-empty-state">
                                <div class="golf-empty-state-icon">📊</div>
                                <MudText>Play a few rounds to see your performance trends here.</MudText>
                            </div>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Recent Rounds -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="3" Class="golf-dashboard-card" Style="height: 100%;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">🏌️ Recent Rounds</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.List" 
                                          Color="Color.Primary" 
                                          Href="/rounds" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (recentRounds is null || !recentRounds.Any())
                        {
                            <div class="golf-empty-state">
                                <div class="golf-empty-state-icon">🏌️</div>
                                <MudText>No rounds recorded yet. Start tracking your game!</MudText>
                            </div>
                        }
                        else
                        {
                            <MudList Class="golf-dashboard-list" T="object">
                                @foreach (var round in recentRounds)
                                {
                                    <MudListItem T="object" OnClick="@(() => NavigationManager.NavigateTo($"/rounds/{round.RoundId}"))">
                                        <div class="d-flex justify-space-between align-center flex-grow-1">
                                            <div class="d-flex flex-column">
                                                <MudText Typo="Typo.body1">
                                                    <strong>@($"{round.GolfCourse!.GolfClub!.Name}")</strong>
                                                </MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                    @round.GolfCourse?.Name
                                                </MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Tertiary">
                                                    @round.DatePlayed.ToString("MMM dd, yyyy")
                                                </MudText>
                                            </div>
                                            <div class="text-right">
                                                <MudText Typo="Typo.h6" Color="Color.Primary">
                                                    @round.Scores.Where(s => s.PlayerId == _currentPlayerId).Sum(s => s.Strokes)
                                                </MudText>
                                                @{
                                                    var totalPar = round.Scores.Where(s => s.PlayerId == _currentPlayerId).Sum(s => s.Hole!.Par);
                                                    var totalScore = round.Scores.Where(s => s.PlayerId == _currentPlayerId).Sum(s => s.Strokes);
                                                    var toPar = totalScore - totalPar;
                                                }
                                                <MudText Typo="Typo.caption" Color="@(toPar < 0 ? Color.Success : toPar > 0 ? Color.Warning : Color.Info)">
                                                    @(toPar >= 0 ? "+" : "")@toPar
                                                </MudText>
                                            </div>
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Playing Partners -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="3" Class="golf-dashboard-card" Style="height: 100%;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">👥 Playing Partners</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.People" 
                                          Color="Color.Primary" 
                                          Href="/players" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (partnerSummary is null || !partnerSummary.Any())
                        {
                            <div class="golf-empty-state">
                                <div class="golf-empty-state-icon">👥</div>
                                <MudText>Invite friends to play and track your competitive records!</MudText>
                            </div>
                        }
                        else
                        {
                            <MudList Class="golf-dashboard-list" T="object">
                                @foreach (var partner in partnerSummary)
                                {
                                    <MudListItem T="object" Href="@($"/players/{partner.PartnerId}/report")">
                                        <div class="d-flex justify-space-between align-center flex-grow-1">
                                            <div class="d-flex flex-column">
                                                <MudText Typo="Typo.body1">
                                                    <strong>@partner.PartnerName</strong>
                                                </MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                    Last played: @partner.LastPlayedDate.ToString("MMM dd, yyyy")
                                                </MudText>
                                            </div>
                                            <div class="text-right">
                                                <MudText Typo="Typo.body2" Color="@(partner.UserWins > partner.PartnerWins ? Color.Success : partner.UserWins < partner.PartnerWins ? Color.Warning : Color.Info)">
                                                    <strong>@partner.UserWins-@partner.PartnerWins-@partner.Ties</strong>
                                                </MudText>
                                                <MudText Typo="Typo.caption">
                                                    @(partner.UserWins > partner.PartnerWins ? "You lead!" : 
                                                      partner.UserWins < partner.PartnerWins ? "You trail" : "It's tied!")
                                                </MudText>
                                            </div>
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
</div>

@code {
    private bool isLoading = true;
    private int _currentPlayerId;

    // Data for cards
    private DashboardStats dashboardStats = new();
    private List<PlayingPartnerSummary>? partnerSummary;
    private List<ChartSeries> _performanceSeries = new();
    private string[] _performanceXAxisLabels = Array.Empty<string>();
    private List<Round>? recentRounds;

    // Chart configuration
    private ChartOptions _chartOptions = new()
    {
        YAxisTicks = 5,
        MaxNumYAxisTicks = 5,
        YAxisLines = true,
        XAxisLines = true
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);

        if (currentUserId is not null)
        {
            var player = await PlayerService.GetPlayerByApplicationUserIdAsync(currentUserId);
            if (player is not null)
            {
                _currentPlayerId = player.PlayerId;
                var isAdmin = user.IsInRole("Admin");

                // Load data for all cards in parallel for efficiency
                var dashboardStatsTask = ReportService.GetDashboardStatsAsync(currentUserId);
                var partnerTask = ReportService.GetPlayingPartnerSummaryAsync(currentUserId, 5);
                var performanceTask = ReportService.GetPlayerPerformanceSummaryAsync(currentUserId, 7);
                var recentRoundsTask = RoundService.GetRecentRoundsAsync(currentUserId, isAdmin, 5);

                await Task.WhenAll(dashboardStatsTask, partnerTask, performanceTask, recentRoundsTask);

                dashboardStats = dashboardStatsTask.Result;
                partnerSummary = partnerTask.Result;
                PreparePerformanceChart(performanceTask.Result);
                recentRounds = recentRoundsTask.Result;
            }
        }
        
        isLoading = false;
    }

    private void PreparePerformanceChart(List<PlayerPerformanceDataPoint> data)
    {
        if (data is null || !data.Any()) return;

        _performanceSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Score vs Par", Data = data.Select(d => (double)d.ScoreVsPar).ToArray() }
        };
        _performanceXAxisLabels = data.Select(d => d.Date.ToString("MMM dd")).ToArray();
    }
}