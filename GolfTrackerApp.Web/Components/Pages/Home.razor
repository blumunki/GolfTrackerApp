@page "/"
@attribute [Authorize]
@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRoundService RoundService
@inject IReportService ReportService
@inject IPlayerService PlayerService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@using System.Security.Claims
@using GolfTrackerApp.Web.Models
@using GolfTrackerApp.Web.Components.Shared
@using GolfTrackerApp.Web.Services
@using Microsoft.AspNetCore.Authorization
@using MudBlazor


<PageTitle>Dashboard</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Dashboard</MudText>

@if (isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudGrid Spacing="3">
        <MudItem xs="12" sm="6">
            @* Placeholder for Quick Actions Card *@
            <MudPaper Class="pa-4" Style="height: 100%;">
                <MudText Typo="Typo.h6">Quick Actions</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudCard Elevation="2" Style="height: 100%;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">My Recent Form</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Launch" Href="@($"/players/{_currentPlayerId}/report")" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (_performanceSeries is not null && _performanceSeries.Any())
                    {
                        <MudChart ChartType="ChartType.Line" ChartSeries="@_performanceSeries" XAxisLabels="@_performanceXAxisLabels" Width="100%" Height="180px"></MudChart>
                    }
                    else
                    {
                        <MudText>Play some rounds to see your performance here.</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudCard Elevation="2" Style="height: 100%;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Recent Rounds</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Launch" Href="/rounds" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (recentRounds is null || !recentRounds.Any())
                    {
                        <MudText>No recent rounds to display.</MudText>
                    }
                    else
                    {
                        <MudList clickable="true" T="object">
                            @foreach (var round in recentRounds)
                            {
                                <MudListItem T="object" OnClick="@(() => NavigationManager.NavigateTo($"/rounds/{round.RoundId}"))">
                                    <div class="d-flex justify-space-between flex-grow-1">
                                        <div class="d-flex flex-column">
                                            <MudText>@($"{round.GolfCourse!.GolfClub!.Name} - {round.GolfCourse.Name}")</MudText>
                                            <MudText Typo="Typo.caption">@round.DatePlayed.ToString("dd MMM yyyy")</MudText>
                                        </div>
                                        <MudText Typo="Typo.body2"><strong>@round.Scores.Where(s => s.PlayerId == _currentPlayerId).Sum(s => s.Strokes)</strong></MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudCard Elevation="2" Style="height: 100%;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Playing Partners</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @if (partnerSummary is null || !partnerSummary.Any())
                    {
                        <MudText>Play some rounds with friends to see stats here.</MudText>
                    }
                    else
                    {
                        <MudList clickable="true" T="object">
                            @foreach (var partner in partnerSummary)
                            {
                                <MudListItem T="object" Href="@($"/players/{partner.PartnerId}/report")">
                                    <div class="d-flex justify-space-between flex-grow-1">
                                        <div class="d-flex flex-column">
                                            <MudText>@partner.PartnerName</MudText>
                                            <MudText Typo="Typo.caption">Last played: @partner.LastPlayedDate.ToString("dd MMM yyyy")</MudText>
                                        </div>
                                        <MudText Typo="Typo.body2">Record: @partner.UserWins-@partner.PartnerWins-@partner.Ties</MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}
@code {
    private bool isLoading = true;
    private int _currentPlayerId;

    // Data for cards
    private List<PlayingPartnerSummary>? partnerSummary;
    private List<ChartSeries> _performanceSeries = new();
    private string[] _performanceXAxisLabels = Array.Empty<string>();
    private List<Round>? recentRounds; // <-- New field for this card

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);

        if (currentUserId is not null)
        {
            var player = await PlayerService.GetPlayerByApplicationUserIdAsync(currentUserId);
            if (player is not null)
            {
                _currentPlayerId = player.PlayerId;
                var isAdmin = user.IsInRole("Admin");

                // Load data for all cards in parallel for efficiency
                var partnerTask = ReportService.GetPlayingPartnerSummaryAsync(currentUserId, 4);
                var performanceTask = ReportService.GetPlayerPerformanceSummaryAsync(currentUserId, 7);
                var recentRoundsTask = RoundService.GetRecentRoundsAsync(currentUserId, isAdmin, 4); // <-- New call

                await Task.WhenAll(partnerTask, performanceTask, recentRoundsTask);

                partnerSummary = partnerTask.Result;
                PreparePerformanceChart(performanceTask.Result);
                recentRounds = recentRoundsTask.Result; // <-- Get result
            }
        }

        isLoading = false;
    }

    private void PreparePerformanceChart(List<PlayerPerformanceDataPoint> data)
    {
        if (data is null || !data.Any()) return;

        _performanceSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Score vs Par", Data = data.Select(d => (double)d.ScoreVsPar).ToArray() }
        };
        _performanceXAxisLabels = data.Select(d => d.Date.ToString("dd MMM")).ToArray();
    }
}