@page "/admin/datamigration"
@attribute [Authorize(Roles = "Admin")] // Only Admins can access this page
@inject NavigationManager NavigationManager
@inject IServiceScopeFactory ServiceScopeFactory // For resolving services in a long-running task

@using System.IO
@using System.Globalization
@using CsvHelper
@using CsvHelper.Configuration
@using GolfTrackerApp.Web.Data
@using GolfTrackerApp.Web.Models
@using GolfTrackerApp.Web.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@rendermode InteractiveServer

<PageTitle>Data Migration</PageTitle>

<h1>Data Migration Utility</h1>

<p><strong>Important:</strong> Upload files in the specified order. Ensure CSV files are UTF-8 encoded.</p>

<div class="migration-section mb-4">
    <h4>1. Import Golf Clubs</h4>
    <p>CSV Format: Name, AddressLine1, AddressLine2, City, CountyOrRegion, Postcode, Country, Website</p>
    <InputFile OnChange="HandleGolfClubsUpload" accept=".csv" />
    <button class="btn btn-primary mt-2" @onclick="ProcessGolfClubs" disabled="@(golfClubsFile == null || isProcessingGolfClubs)">
        @if (isProcessingGolfClubs) { <span>Processing...</span> } else { <span>Import Golf Clubs</span> }
    </button>
    @if (!string.IsNullOrEmpty(golfClubsImportLog))
    {
        <pre class="log-output">@golfClubsImportLog</pre>
    }
</div>

@* --- Import Golf Courses --- *@
<div class="migration-section mb-4">
    <h4>2. Import Golf Courses</h4>
    <p>CSV Format: ClubName (must match an already imported club's name), CourseName, DefaultPar, NumberOfHoles</p>
    <InputFile OnChange="HandleGolfCoursesUpload" accept=".csv" />
    <button class="btn btn-primary mt-2" @onclick="ProcessGolfCourses" disabled="@(golfCoursesFile == null || isProcessingGolfCourses || isProcessingGolfClubs)">
        @if (isProcessingGolfCourses) { <span>Processing...</span> } else { <span>Import Golf Courses</span> }
    </button>
    @if (!string.IsNullOrEmpty(golfCoursesImportLog))
    {
        <pre class="log-output">@golfCoursesImportLog</pre>
    }
</div>


@* --- Import Players --- *@
<div class="migration-section mb-4">
    <h4>3. Import Players</h4>
    <p>CSV Format: FirstName, LastName, Email (optional; if provided, attempts to link/create system user), Handicap (optional)</p>
    <InputFile OnChange="HandlePlayersUpload" accept=".csv" />
    <button class="btn btn-primary mt-2" @onclick="ProcessPlayers" disabled="@(playersFile == null || isProcessingPlayers || isProcessingGolfClubs || isProcessingGolfCourses)">
        @if (isProcessingPlayers) { <span>Processing...</span> } else { <span>Import Players</span> }
    </button>
    @if (!string.IsNullOrEmpty(playersImportLog))
    {
        <pre class="log-output">@playersImportLog</pre>
    }
</div>

@* --- Further placeholders for Holes, Rounds, Scores --- *@


<style>
    .migration-section {
        border: 1px solid #ccc;
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 5px;
    }
    .log-output {
        background-color: #f5f5f5;
        border: 1px solid #eee;
        padding: 10px;
        max-height: 200px;
        overflow-y: auto;
        white-space: pre-wrap;
        word-wrap: break-word;
        margin-top:10px;
    }
</style>

@code {
    private IBrowserFile? golfClubsFile;
    private string golfClubsImportLog = string.Empty;
    private bool isProcessingGolfClubs = false;

    public class GolfClubCsvRecord
    {
        public string? Name { get; set; }
        public string? AddressLine1 { get; set; }
        public string? AddressLine2 { get; set; }
        public string? City { get; set; }
        public string? CountyOrRegion { get; set; }
        public string? Postcode { get; set; }
        public string? Country { get; set; }
        public string? Website { get; set; }
    }

    public class GolfCourseCsvRecord
    {
        public string? ClubName { get; set; } // To look up GolfClubId
        public string? CourseName { get; set; }
        public int DefaultPar { get; set; }
        public int NumberOfHoles { get; set; } = 18; // Default if not in CSV
    }

    private IBrowserFile? golfCoursesFile;
    private string golfCoursesImportLog = string.Empty;
    private bool isProcessingGolfCourses = false;

    public class PlayerCsvRecord
    {
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Email { get; set; } // Optional
        public double? Handicap { get; set; }
    }

    private IBrowserFile? playersFile;
    private string playersImportLog = string.Empty;
    private bool isProcessingPlayers = false;

    // --- Golf Clubs Import Logic ---
    private void HandleGolfClubsUpload(InputFileChangeEventArgs e)
    {
        golfClubsFile = e.File;
        golfClubsImportLog = $"Selected file: {golfClubsFile.Name}";
    }

    private async Task ProcessGolfClubs()
    {
        if (golfClubsFile == null)
        {
            golfClubsImportLog = "Please select a file first.";
            return;
        }

        isProcessingGolfClubs = true;
        var log = new System.Text.StringBuilder();
        log.AppendLine($"Starting Golf Clubs import from {golfClubsFile.Name}...");
        StateHasChanged(); // Update UI to show processing

        // Use IServiceScopeFactory for long-running operations or when services have a shorter lifetime
        // than the component. For EF Core DbContext, this is good practice.
        await using var scope = ServiceScopeFactory.CreateAsyncScope();
        var golfClubService = scope.ServiceProvider.GetRequiredService<IGolfClubService>();
        var existingClubNames = (await golfClubService.GetAllGolfClubsAsync()).Select(gc => gc.Name.ToLowerInvariant()).ToHashSet();
        int successCount = 0;
        int skippedCount = 0;

        try
        {
            // Max file size (e.g., 5MB). Adjust as needed.
            await using var stream = golfClubsFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            using var reader = new StreamReader(stream);
            using var csv = new CsvReader(reader, new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                HasHeaderRecord = true, // Assuming your CSV has a header row
                MissingFieldFound = null, // Handle missing fields gracefully if needed
                HeaderValidated = null, // Handle header validation if needed
            });


            await foreach (var record in csv.GetRecordsAsync<GolfClubCsvRecord>())
            {
                try
                {
                    var clubName = record.Name;
                    if (string.IsNullOrWhiteSpace(clubName))
                    {
                        log.AppendLine("Skipped row: Club Name is missing.");
                        skippedCount++;
                        continue;
                    }

                    if (existingClubNames.Contains(clubName.ToLowerInvariant()))
                    {
                        log.AppendLine($"Skipped: Golf Club '{clubName}' already exists.");
                        skippedCount++;
                        continue;
                    }

                    var newClub = new GolfClub
                    {
                        Name = clubName,
                        AddressLine1 = record.AddressLine1,
                        AddressLine2 = record.AddressLine2,
                        City = record.City,
                        CountyOrRegion = record.CountyOrRegion,
                        Postcode = record.Postcode,
                        Country = record.Country,
                        Website = record.Website
                    };
                    await golfClubService.AddGolfClubAsync(newClub);
                    existingClubNames.Add(newClub.Name.ToLowerInvariant()); // Add to local cache
                    successCount++;
                    log.AppendLine($"Added: {newClub.Name}");
                }
                catch (Exception rowEx)
                {
                    //log.AppendLine($"Error processing row: {rowEx.Message}. Row data: {string.Join(",", csv.Context.Parser.Record ?? Array.Empty<string>())}");
                    log.AppendLine($"Error processing record (Name: {record?.Name ?? "N/A"}): {rowEx.Message}");
                    skippedCount++;
                }
            }
            log.AppendLine($"\nImport complete. Added: {successCount}, Skipped/Errors: {skippedCount}");
        }
        catch (CsvHelperException csvEx) // Specifically catch CsvHelper exceptions for better diagnostics
        {
            log.AppendLine($"\nCSV PARSING ERROR during import: {csvEx.Message}");
            if (csvEx.Context?.Parser != null)
            {
                log.AppendLine($"Error occurred near Row: {csvEx.Context.Parser.Row}, Raw Record: '{csvEx.Context.Parser.RawRecord?.TrimEnd()}'");
            }
        }
        catch (Exception ex) // Catches other exceptions (e.g., DB errors, file stream issues not caught by CsvHelperException)
        {
            log.AppendLine($"\nFATAL ERROR during import: {ex.Message}");
        }
        finally
        {
            golfClubsImportLog = log.ToString();
            isProcessingGolfClubs = false;
            golfClubsFile = null; // Reset file input
            StateHasChanged(); // Update UI
        }
    }
    
    private void HandleGolfCoursesUpload(InputFileChangeEventArgs e)
    {
        golfCoursesFile = e.File;
        golfCoursesImportLog = $"Selected file: {golfCoursesFile.Name}";
    }

    private async Task ProcessGolfCourses()
    {
        if (golfCoursesFile == null)
        {
            golfCoursesImportLog = "Please select a Golf Courses CSV file first.";
            return;
        }

        isProcessingGolfCourses = true;
        var log = new System.Text.StringBuilder();
        log.AppendLine($"Starting Golf Courses import from {golfCoursesFile.Name}...");
        StateHasChanged();

        await using var scope = ServiceScopeFactory.CreateAsyncScope();
        var golfCourseService = scope.ServiceProvider.GetRequiredService<IGolfCourseService>();
        var golfClubService = scope.ServiceProvider.GetRequiredService<IGolfClubService>(); // To look up Club IDs

        // Create a lookup for GolfClubId by ClubName
        var clubNameToIdLookup = (await golfClubService.GetAllGolfClubsAsync())
                                    .ToDictionary(gc => gc.Name.ToLowerInvariant(), gc => gc.GolfClubId);

        var existingCourseNames = (await golfCourseService.GetAllGolfCoursesAsync())
                                     .Select(course => $"{course.GolfClubId}_{course.Name.ToLowerInvariant()}")
                                     .ToHashSet(); // Check for course name uniqueness within a club

        int successCount = 0;
        int skippedCount = 0;

        try
        {
            await using var stream = golfCoursesFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            using var reader = new StreamReader(stream);
            using var csv = new CsvReader(reader, new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                HasHeaderRecord = true,
                MissingFieldFound = null,
                HeaderValidated = null,
            });

            await foreach (var record in csv.GetRecordsAsync<GolfCourseCsvRecord>())
            {
                try
                {
                    if (string.IsNullOrWhiteSpace(record.CourseName) || string.IsNullOrWhiteSpace(record.ClubName))
                    {
                        log.AppendLine("Skipped row: Course Name or Club Name is missing.");
                        skippedCount++;
                        continue;
                    }

                    if (!clubNameToIdLookup.TryGetValue(record.ClubName.ToLowerInvariant(), out var golfClubId))
                    {
                        log.AppendLine($"Skipped: Golf Club '{record.ClubName}' not found for course '{record.CourseName}'. Please import clubs first.");
                        skippedCount++;
                        continue;
                    }

                    var uniqueCourseKey = $"{golfClubId}_{record.CourseName.ToLowerInvariant()}";
                    if (existingCourseNames.Contains(uniqueCourseKey))
                    {
                        log.AppendLine($"Skipped: Golf Course '{record.CourseName}' already exists for club '{record.ClubName}'.");
                        skippedCount++;
                        continue;
                    }

                    var newCourse = new GolfCourse
                    {
                        GolfClubId = golfClubId,
                        Name = record.CourseName,
                        DefaultPar = record.DefaultPar,
                        NumberOfHoles = record.NumberOfHoles <= 0 ? 18 : record.NumberOfHoles // Basic validation/default for NumberOfHoles
                    };

                    await golfCourseService.AddGolfCourseAsync(newCourse);
                    existingCourseNames.Add(uniqueCourseKey); // Add to local cache
                    successCount++;
                    log.AppendLine($"Added Course: {newCourse.Name} (Club: {record.ClubName})");
                }
                catch (Exception rowEx)
                {
                    log.AppendLine($"Error processing course record (CourseName: {record?.CourseName ?? "N/A"}, ClubName: {record?.ClubName ?? "N/A"}): {rowEx.Message}");
                    skippedCount++;
                }
            }
            log.AppendLine($"\nGolf Courses import complete. Added: {successCount}, Skipped/Errors: {skippedCount}");
        }
        catch (CsvHelperException csvEx)
        {
            log.AppendLine($"\nCSV PARSING ERROR during Golf Courses import: {csvEx.Message}");
            if (csvEx.Context?.Parser != null)
            {
                log.AppendLine($"Error occurred near Row: {csvEx.Context.Parser.Row}, Raw Record: '{csvEx.Context.Parser.RawRecord?.TrimEnd()}'");
            }
        }
        catch (Exception ex)
        {
            log.AppendLine($"\nFATAL ERROR during Golf Courses import: {ex.Message}");
        }
        finally
        {
            golfCoursesImportLog = log.ToString();
            isProcessingGolfCourses = false;
            golfCoursesFile = null; // Reset file input
            StateHasChanged();
        }
    }


    private void HandlePlayersUpload(InputFileChangeEventArgs e)
    {
        playersFile = e.File;
        playersImportLog = $"Selected file: {playersFile.Name}";
    }

    private async Task ProcessPlayers()
    {
        if (playersFile == null)
        {
            playersImportLog = "Please select a Players CSV file first.";
            return;
        }

        isProcessingPlayers = true;
        var log = new System.Text.StringBuilder();
        log.AppendLine($"Starting Players import from {playersFile.Name}...");
        StateHasChanged();

        await using var scope = ServiceScopeFactory.CreateAsyncScope();
        var playerService = scope.ServiceProvider.GetRequiredService<IPlayerService>();
        //var userManager = scope.ServiceProvider.GetRequiredService<UserManager<IdentityUser>>(); // For ApplicationUser
        var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>(); // Changed to ApplicationUser

        // Cache existing players to help avoid duplicates
        // For registered players, check by ApplicationUserId
        // For managed players, check by FirstName + LastName (case-insensitive)
        var existingRegisteredPlayerUserIds = (await playerService.GetAllPlayersAsync())
                                            .Where(p => !string.IsNullOrEmpty(p.ApplicationUserId))
                                            .Select(p => p.ApplicationUserId)
                                            .ToHashSet();
        var existingManagedPlayerNames = (await playerService.GetAllPlayersAsync())
                                        .Where(p => string.IsNullOrEmpty(p.ApplicationUserId))
                                        .Select(p => $"{p.FirstName?.ToLowerInvariant()}_{p.LastName?.ToLowerInvariant()}")
                                        .ToHashSet();
        int successCount = 0;
        int skippedCount = 0;
        int usersCreatedCount = 0;

        try
        {
            await using var stream = playersFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            using var reader = new StreamReader(stream);
            using var csv = new CsvReader(reader, new CsvConfiguration(CultureInfo.InvariantCulture) { HasHeaderRecord = true });

            await foreach (var record in csv.GetRecordsAsync<PlayerCsvRecord>())
            {
                try
                {
                    if (string.IsNullOrWhiteSpace(record.FirstName) || string.IsNullOrWhiteSpace(record.LastName))
                    {
                        log.AppendLine("Skipped row: FirstName or LastName is missing.");
                        skippedCount++;
                        continue;
                    }

                    string? appUserId = null;
                    bool isRegisteredPlayer = !string.IsNullOrWhiteSpace(record.Email);

                    if (isRegisteredPlayer)
                    {
                        var user = await userManager.FindByEmailAsync(record.Email!);
                        if (user == null)
                        {
                            // Create new ApplicationUser
                            //user = new IdentityUser { UserName = record.Email, Email = record.Email, EmailConfirmed = true }; // Auto-confirm for simplicity
                            user = new ApplicationUser { UserName = record.Email, Email = record.Email, EmailConfirmed = true }; // Changed to ApplicationUser, Auto-confirm for simplicity
                            var createUserResult = await userManager.CreateAsync(user, $"DefaultP@ssw0rd{DateTime.Now.Ticks}"); // Generate a complex default password
                            if (!createUserResult.Succeeded)
                            {
                                log.AppendLine($"Failed to create user for {record.Email}: {string.Join(", ", createUserResult.Errors.Select(e => e.Description))}");
                                skippedCount++;
                                continue;
                            }
                            // Optionally add to "User" role
                            await userManager.AddToRoleAsync(user, "User");
                            log.AppendLine($"Created new system user for email: {record.Email}");
                            usersCreatedCount++;
                        }
                        appUserId = user.Id;

                        if (existingRegisteredPlayerUserIds.Contains(appUserId))
                        {
                            log.AppendLine($"Skipped: Player profile for user {record.Email} already exists.");
                            skippedCount++;
                            continue;
                        }
                    }
                    else // Managed player
                    {
                        var managedPlayerKey = $"{record.FirstName.ToLowerInvariant()}_{record.LastName.ToLowerInvariant()}";
                        if (existingManagedPlayerNames.Contains(managedPlayerKey))
                        {
                            log.AppendLine($"Skipped: Managed player '{record.FirstName} {record.LastName}' already exists.");
                            skippedCount++;
                            continue;
                        }
                    }

                    var newPlayer = new Player
                    {
                        FirstName = record.FirstName,
                        LastName = record.LastName,
                        // // Store email on Player model if you added it, useful even for managed players
                        Handicap = record.Handicap,
                        ApplicationUserId = appUserId
                    };

                    await playerService.AddPlayerAsync(newPlayer);

                    if (isRegisteredPlayer && appUserId != null)
                    {
                        existingRegisteredPlayerUserIds.Add(appUserId);
                    }
                    else
                    {
                        existingManagedPlayerNames.Add($"{record.FirstName.ToLowerInvariant()}_{record.LastName.ToLowerInvariant()}");
                    }
                    successCount++;
                    log.AppendLine($"Added Player: {newPlayer.FirstName} {newPlayer.LastName} {(isRegisteredPlayer ? $"(User: {record.Email})" : "(Managed)")}");
                }
                catch (Exception rowEx)
                {
                    log.AppendLine($"Error processing player record (Name: {record?.FirstName} {record?.LastName}): {rowEx.Message}");
                    skippedCount++;
                }
            }
            log.AppendLine($"\nPlayers import complete. Added: {successCount}, Skipped/Errors: {skippedCount}, New System Users Created: {usersCreatedCount}");
        }
        catch (CsvHelperException csvEx)
        {
            log.AppendLine($"\nCSV PARSING ERROR during Players import: {csvEx.Message}");
            if (csvEx.Context?.Parser != null) { log.AppendLine($"Error occurred near Row: {csvEx.Context.Parser.Row}, Raw Record: '{csvEx.Context.Parser.RawRecord?.TrimEnd()}'"); }
        }
        catch (Exception ex)
        {
            log.AppendLine($"\nFATAL ERROR during Players import: {ex.Message}");
        }
        finally
        {
            playersImportLog = log.ToString();
            isProcessingPlayers = false;
            playersFile = null; // Reset file input
            StateHasChanged();
        }
    }


    // --- Placeholder for other entity import logic (GolfCourses, Players, etc.) ---
    // private IBrowserFile? golfCoursesFile;
    // private string golfCoursesImportLog = string.Empty;
    // private bool isProcessingGolfCourses = false;
    // ... and so on for other types
}