@page "/golfclubs"
@attribute [Authorize]
@inject IGolfClubService GolfClubService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using GolfTrackerApp.Web.Models
@using GolfTrackerApp.Web.Services
@using GolfTrackerApp.Web.Components.Shared
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer

<PageTitle>Golf Clubs</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Golf Clubs</MudText>

<MudButton Variant="Variant.Filled" 
           Color="Color.Primary" 
           OnClick="GoToAddGolfClubPage" 
           StartIcon="@Icons.Material.Filled.Add" 
           Class="mb-3">
    Add New Golf Club
</MudButton>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (allGolfClubs is null || !allGolfClubs.Any())
{
    <MudText>No golf clubs found. Please add one to get started.</MudText>
}
else
{
    <MudPaper Class="pa-4 mb-4" Elevation="0" Outlined="true">
        <MudTextField @bind-Value="searchString" 
                      Label="Filter by Name, City or Country..." 
                      Variant="Variant.Outlined" 
                      Adornment="Adornment.Start" 
                      AdornmentIcon="@Icons.Material.Filled.Search" 
                      Immediate="true" />
    </MudPaper>

    <MudTable Items="@FilteredGolfClubs" Hover="true" Striped="true" Dense="true" Elevation="1">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>City</MudTh>
            <MudTh>Postcode</MudTh>
            <MudTh>Country</MudTh>
            <MudTh Style="text-align:right">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name"><MudLink Href="@($"/golfclubs/{context.GolfClubId}")">@context.Name</MudLink></MudTd>
            <MudTd DataLabel="City">@context.City</MudTd>
            <MudTd DataLabel="Postcode">@context.Postcode</MudTd>
            <MudTd DataLabel="Country">@context.Country</MudTd>
            <MudTd Style="text-align:right">
                <MudTooltip Text="View Details">
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" OnClick="@(() => ViewClubDetails(context.GolfClubId))" />
                </MudTooltip>
                <MudTooltip Text="Edit Club">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Primary" OnClick="@(() => EditClub(context.GolfClubId))" />
                </MudTooltip>
                <MudTooltip Text="Delete Club">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(() => PrepareDeleteClub(context))" />
                </MudTooltip>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private List<GolfClub>? allGolfClubs;
    private bool isLoading = true;
    private string searchString = "";

    private List<GolfClub>? FilteredGolfClubs =>
        allGolfClubs?.Where(c =>
            string.IsNullOrWhiteSpace(searchString) ||
            c.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
            (c.City?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) ||
            (c.Country?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
        ).ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadClubs();
    }

    private async Task LoadClubs()
    {
        isLoading = true;
        try
        {
            allGolfClubs = await GolfClubService.GetAllGolfClubsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading golf clubs: {ex.Message}", Severity.Error);
        }
        isLoading = false;
    }

    private void GoToAddGolfClubPage() => NavigationManager.NavigateTo("/golfclubs/add");
    
    private void ViewClubDetails(int clubId) => NavigationManager.NavigateTo($"/golfclubs/{clubId}");

    private void EditClub(int clubId) => NavigationManager.NavigateTo($"/golfclubs/edit/{clubId}");

    private async Task PrepareDeleteClub(GolfClub club)
    {
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { nameof(ConfirmDialog.ContentText), $"Are you sure you want to delete {club.Name}? This cannot be undone." },
            { nameof(ConfirmDialog.ButtonText), "Delete" },
            { nameof(ConfirmDialog.Color), Color.Error }
        };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is true)
        {
            await DeleteClubConfirmed(club.GolfClubId);
        }
    }
    private async Task DeleteClubConfirmed(int clubId)
    {
        try
        {
            bool deleted = await GolfClubService.DeleteGolfClubAsync(clubId);
            if (deleted)
            {
                Snackbar.Add("Golf club deleted successfully.", Severity.Success);
                await LoadClubs();
            }
            else
            {
                Snackbar.Add("Failed to delete golf club.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting golf club: {ex.Message}", Severity.Error);
        }
        StateHasChanged(); // Ensures UI always refreshes after operation
    }
}