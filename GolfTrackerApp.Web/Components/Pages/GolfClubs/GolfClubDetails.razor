@page "/golfclubs/{ClubId:int}"
@attribute [Authorize]
@inject IGolfClubService GolfClubService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILogger<GolfClubDetails> Logger
@inject IDialogService DialogService
@inject IGolfCourseService GolfCourseService
@using GolfTrackerApp.Web.Models
@using GolfTrackerApp.Web.Services
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using GolfTrackerApp.Web.Components.Shared // For ConfirmDialog

@rendermode InteractiveServer

<PageTitle>@(golfClub?.Name ?? "Club Details")</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (golfClub == null)
{
    <MudAlert Severity="Severity.Error">@(errorMessage ?? "Golf club not found.")</MudAlert>
    <MudButton Variant="Variant.Text" OnClick="@(() => NavigationManager.NavigateTo("/golfclubs"))" Class="mt-4">Back to Clubs List</MudButton>
}
else
{
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4"></MudBreadcrumbs>
    <MudPaper Class="pa-4 mb-4" Elevation="0">
        <MudGrid Spacing="2" Justify="Justify.SpaceBetween" alignItems="AlignItems.Center" Class="mb-2">
        @* <MudGrid Spacing="2" Justify="Justify.SpaceBetween" AlignItems="@MudBlazor.AlignItems.Center" Class="mb-2"> *@
            <MudItem xs="12" sm="8" md="9"> @* Give more space to title *@
                <MudText Typo="Typo.h4">@golfClub.Name</MudText>
            </MudItem>
            <MudItem xs="12" sm="4" md="3" Class="d-flex justify-content-xs-start justify-content-sm-end">
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Primary" 
                           OnClick="@(() => EditThisClub(golfClub.GolfClubId))" 
                           StartIcon="@Icons.Material.Filled.Edit">Edit Club</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    <MudCard Class="mb-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Club Information</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudText><strong>Address:</strong> @FormatAddress(golfClub)</MudText>
            @if (!string.IsNullOrWhiteSpace(golfClub.Website))
            {
                <MudText><strong>Website:</strong> <MudLink Href="@golfClub.Website" Target="_blank">@golfClub.Website</MudLink></MudText>
            }
        </MudCardContent>
    </MudCard>

    <MudPaper Class="pa-4 mt-4" Elevation="0">
        <MudGrid Spacing="2" Justify="Justify.SpaceBetween" alignItems="AlignItems.Center" Class="mb-2">
        @* <MudGrid Spacing="2" Justify="Justify.SpaceBetween" AlignItems="@MudBlazor.AlignItems.Center" Class="mb-2"> *@
            <MudItem>
                <MudText Typo="Typo.h5">Courses at this Club</MudText>
            </MudItem>
            <MudItem Class="d-flex justify-content-end"> @* Ensure button aligns right *@
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Success" 
                           OnClick="@(() => AddCourseToThisClub(golfClub.GolfClubId))" 
                           StartIcon="@Icons.Material.Filled.Add">Add New Course</MudButton>
            </MudItem>
        </MudGrid>

        @if (golfClub.GolfCourses != null && golfClub.GolfCourses.Any())
        {
            @* VVV Explicit T="object" added VVV *@
            <MudList Dense="true" T="object">
                @foreach (var course in golfClub.GolfCourses.OrderBy(c => c.Name))
                {
                    @* VVV Explicit T="object" added VVV *@
                    <MudListItem T="object" OnClick="@(() => ViewCourseDetails(course.GolfCourseId))" Text="@($"{course.Name} (Par: {course.DefaultPar}, Holes: {course.NumberOfHoles})")">
                        <NestedList>
                             @* VVV Explicit T="object" added VVV *@
                             <MudListItem T="object" OnClick="@(() => ViewCourseDetails(course.GolfCourseId))" Icon="@Icons.Material.Filled.Visibility" IconColor="Color.Primary">View Holes / Details</MudListItem>
                             <MudListItem T="object" OnClick="@(() => EditThisCourse(course.GolfCourseId))" Icon="@Icons.Material.Filled.Edit" IconColor="Color.Secondary">Edit Course</MudListItem>
                             <MudListItem T="object" OnClick="@(() => PrepareDeleteCourse(course))" Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error">Delete Course</MudListItem>
                        </NestedList>
                    </MudListItem>
                    <MudDivider />
                }
            </MudList>
        }
        else
        {
            <MudText><em>No courses listed for this club yet. You can add one using the button above.</em></MudText>
        }
    </MudPaper>
    
    <MudButton Variant="Variant.Text" OnClick="GoBackToList" Class="mt-4">Back to Clubs List</MudButton>
}

@code {
    [Parameter]
    public int ClubId { get; set; }

    private GolfClub? golfClub;
    private bool isLoading = true;
    private string? errorMessage;

    private List<BreadcrumbItem> _breadcrumbs = new();

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            golfClub = await GolfClubService.GetGolfClubByIdAsync(ClubId); // Includes GolfCourses
            if (golfClub == null)
            {
                errorMessage = $"Golf club with ID {ClubId} not found.";
                Snackbar.Add(errorMessage, Severity.Warning);
            }
            else
            {
                _breadcrumbs = new List<BreadcrumbItem>
                {
                    new BreadcrumbItem("Clubs", href: "/golfclubs"),
                    new BreadcrumbItem(golfClub.Name, href: null, disabled: true)
                };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading club details for ClubId {ClubId}", ClubId);
            errorMessage = $"Error loading club details: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
        }
        isLoading = false;
    }

    private string FormatAddress(GolfClub club)
    {
        var addressParts = new List<string?>
        {
            club.AddressLine1,
            club.AddressLine2,
            club.City,
            club.CountyOrRegion,
            club.Postcode,
            club.Country
        };
        return string.Join(", ", addressParts.Where(part => !string.IsNullOrWhiteSpace(part)));
    }

    private void ViewCourseDetails(int courseId)
    {
        NavigationManager.NavigateTo($"/golfcourses/{courseId}/details");
    }

    private void EditThisClub(int clubIdToEdit)
    {
        NavigationManager.NavigateTo($"/golfclubs/edit/{clubIdToEdit}");
    }

    private void AddCourseToThisClub(int clubIdForNewCourse)
    {
        NavigationManager.NavigateTo($"/golfcourses/add?clubId={clubIdForNewCourse}");
    }

    private void EditThisCourse(int courseIdToEdit)
    {
        NavigationManager.NavigateTo($"/golfcourses/edit/{courseIdToEdit}");
    }

    private void GoBackToList()
    {
        NavigationManager.NavigateTo("/golfclubs");
    }

    private async Task PrepareDeleteCourse(GolfCourse courseToDelete)
    {
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { nameof(ConfirmDialog.ContentText), $"Are you sure you want to delete the course '{courseToDelete.Name}'? This will also delete all of its holes." },
            { nameof(ConfirmDialog.ButtonText), "Delete" },
            { nameof(ConfirmDialog.Color), Color.Error }
        };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is true)
        {
            try
            {
                await GolfCourseService.DeleteGolfCourseAsync(courseToDelete.GolfCourseId);
                Snackbar.Add("Course deleted successfully.", Severity.Success);
                await OnParametersSetAsync(); // Refresh the club details
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting course: {ex.Message}", Severity.Error);
            }
        }
    }
}